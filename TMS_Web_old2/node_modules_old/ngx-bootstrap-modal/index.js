import { NgModule, ComponentFactoryResolver, ApplicationRef, Injector } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { DialogHolderComponent } from './components/dialog-holder.component';
import { DialogWrapperComponent } from './components/dialog-wrapper.component';
import { DialogService, DialogServiceConfig } from './components/dialog.service';
import { BuiltInComponent } from './components/built-in.dialog';
export { DialogComponent } from './components/dialog.component';
export { DialogService, DialogServiceConfig } from './components/dialog.service';
export { BuiltInComponent } from './components/built-in.dialog';
/**
 * Dialog service factory. Creates dialog service with options
 * @param { ComponentFactoryResolver } resolver
 * @param { ApplicationRef } applicationRef
 * @param { Injector } injector
 * @param { DialogServiceConfig } options
 * @return { DialogService }
 */
export function dialogServiceFactory(resolver, applicationRef, injector, options) {
    return new DialogService(resolver, applicationRef, injector, options);
}
var BootstrapModalModule = /** @class */ (function () {
    function BootstrapModalModule() {
    }
    BootstrapModalModule.forRoot = function (config) {
        return {
            ngModule: BootstrapModalModule,
            providers: [
                { provide: DialogServiceConfig, useValue: config },
                {
                    provide: DialogService,
                    useFactory: dialogServiceFactory,
                    deps: [ComponentFactoryResolver, ApplicationRef, Injector, DialogServiceConfig]
                }
            ]
        };
    };
    BootstrapModalModule.forChild = function () {
        return {
            ngModule: BootstrapModalModule,
            providers: [
                {
                    provide: DialogService,
                    useFactory: dialogServiceFactory,
                    deps: [ComponentFactoryResolver, ApplicationRef, Injector, DialogServiceConfig]
                }
            ]
        };
    };
    BootstrapModalModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule
                    ],
                    declarations: [
                        DialogHolderComponent,
                        DialogWrapperComponent,
                        BuiltInComponent
                    ],
                    providers: [
                        DialogService
                    ],
                    entryComponents: [
                        DialogHolderComponent,
                        DialogWrapperComponent,
                        BuiltInComponent
                    ]
                },] },
    ];
    /** @nocollapse */
    BootstrapModalModule.ctorParameters = function () { return []; };
    return BootstrapModalModule;
}());
export { BootstrapModalModule };
//# sourceMappingURL=index.js.map