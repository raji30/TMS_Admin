import { Injectable, ComponentFactoryResolver, ApplicationRef, Injector, Optional } from '@angular/core';
import { DialogHolderComponent } from './dialog-holder.component';
import { BuiltInComponent } from './built-in.dialog';
var DialogServiceConfig = /** @class */ (function () {
    function DialogServiceConfig() {
        this.container = null;
    }
    return DialogServiceConfig;
}());
export { DialogServiceConfig };
var DialogService = /** @class */ (function () {
    /**
     * @param {ComponentFactoryResolver} resolver
     * @param {ApplicationRef} applicationRef
     * @param {Injector} injector
     * @param {DialogServiceConfig} config
     */
    function DialogService(resolver, applicationRef, injector, config) {
        this.resolver = resolver;
        this.applicationRef = applicationRef;
        this.injector = injector;
        this.container = config && config.container;
        this.DEFOPT = config && config.builtInOptions;
    }
    /**
     * Adds dialog
     * @param {Type<DialogComponent<T, T1>>} component
     * @param {T?} data
     * @param {DialogOptions?} options
     * @return {Observable<T1>}
     */
    /**
         * Adds dialog
         * @param {Type<DialogComponent<T, T1>>} component
         * @param {T?} data
         * @param {DialogOptions?} options
         * @return {Observable<T1>}
         */
    DialogService.prototype.addDialog = /**
         * Adds dialog
         * @param {Type<DialogComponent<T, T1>>} component
         * @param {T?} data
         * @param {DialogOptions?} options
         * @return {Observable<T1>}
         */
    function (component, data, options) {
        if (!this.dialogHolderComponent) {
            this.dialogHolderComponent = this.createDialogHolder();
        }
        return this.dialogHolderComponent.addDialog(component, data, options);
    };
    /**
     * Hides and removes dialog from DOM
     * @param {DialogComponent} component
     */
    /**
         * Hides and removes dialog from DOM
         * @param {DialogComponent} component
         */
    DialogService.prototype.removeDialog = /**
         * Hides and removes dialog from DOM
         * @param {DialogComponent} component
         */
    function (component) {
        if (!this.dialogHolderComponent) {
            return;
        }
        this.dialogHolderComponent.removeDialog(component);
    };
    /**
     * Closes all dialogs
     */
    /**
         * Closes all dialogs
         */
    DialogService.prototype.removeAll = /**
         * Closes all dialogs
         */
    function () {
        this.dialogHolderComponent.clear();
    };
    /**
     * Creates and add to DOM dialog holder component
     * @return {DialogHolderComponent}
     */
    /**
         * Creates and add to DOM dialog holder component
         * @return {DialogHolderComponent}
         */
    DialogService.prototype.createDialogHolder = /**
         * Creates and add to DOM dialog holder component
         * @return {DialogHolderComponent}
         */
    function () {
        var _this = this;
        var componentFactory = this.resolver.resolveComponentFactory(DialogHolderComponent);
        var componentRef = componentFactory.create(this.injector);
        var componentRootNode = componentRef.hostView.rootNodes[0];
        if (!this.container)
            this.container = document.body;
        this.applicationRef.attachView(componentRef.hostView);
        componentRef.onDestroy(function () {
            _this.applicationRef.detachView(componentRef.hostView);
        });
        this.container.appendChild(componentRootNode);
        return componentRef.instance;
    };
    /**
     * 构建一个内置模态
     * @param builtInOptions 内置配置参数
     * @param options 模态配置参数
     */
    /**
         * 构建一个内置模态
         * @param builtInOptions 内置配置参数
         * @param options 模态配置参数
         */
    DialogService.prototype.show = /**
         * 构建一个内置模态
         * @param builtInOptions 内置配置参数
         * @param options 模态配置参数
         */
    function (builtInOptions, options) {
        var opt = Object.assign({
            type: 'default',
            size: 'sm',
            input: 'text',
            inputOptions: {},
            inputAttributes: {},
            showCloseButton: true,
            showCancelButton: true,
            cancelButtonText: '取消',
            cancelButtonClass: 'btn-default',
            showConfirmButton: true,
            confirmButtonText: '确认',
            confirmButtonClass: 'btn-primary'
        }, this.DEFOPT, builtInOptions);
        this.addDialog(BuiltInComponent, {
            opt: opt
        }, this.mergerDialog({
            timeout: 0,
            backdrop: true,
            backdropColor: 'rgba(0,0,0,.5)',
            keyboard: true
        }, Object.assign(builtInOptions, options))).subscribe(function (res) {
            if (opt.onHide)
                opt.onHide(res);
        });
        if (opt.onShow)
            opt.onShow();
    };
    DialogService.prototype.mergerDialog = function (options, built) {
        var newOptions = {};
        if (!built)
            return newOptions;
        Object.keys(options).forEach(function (key) {
            if (typeof built[key] !== 'undefined')
                newOptions[key] = built[key];
        });
        return newOptions;
    };
    /**
     * Show Alter
     *
     * @param {string} title
     * @param {string} content
     * @param {BuiltInOptions} 覆盖内置配置参数
     */
    /**
         * Show Alter
         *
         * @param {string} title
         * @param {string} content
         * @param {BuiltInOptions} 覆盖内置配置参数
         */
    DialogService.prototype.alert = /**
         * Show Alter
         *
         * @param {string} title
         * @param {string} content
         * @param {BuiltInOptions} 覆盖内置配置参数
         */
    function (title, content, options) {
        this.show(Object.assign({}, options, {
            type: 'alert',
            title: title,
            content: content,
            showCancelButton: false
        }), this.mergerDialog({
            timeout: 0,
            backdrop: true,
            backdropColor: 'rgba(0,0,0,.5)',
            keyboard: true
        }, options));
    };
    /**
     * Show confirm
     *
     * @param {string} title
     * @param {string} content
     * @param {BuiltInOptions} 覆盖内置配置参数
     * @returns {Promise<boolean>} 返回一个Promise布尔类型
     */
    /**
         * Show confirm
         *
         * @param {string} title
         * @param {string} content
         * @param {BuiltInOptions} 覆盖内置配置参数
         * @returns {Promise<boolean>} 返回一个Promise布尔类型
         */
    DialogService.prototype.confirm = /**
         * Show confirm
         *
         * @param {string} title
         * @param {string} content
         * @param {BuiltInOptions} 覆盖内置配置参数
         * @returns {Promise<boolean>} 返回一个Promise布尔类型
         */
    function (title, content, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.show(Object.assign({}, options, {
                type: 'confirm',
                title: title,
                content: content,
                onHide: function (res) {
                    resolve(res === undefined ? false : res);
                }
            }), _this.mergerDialog({
                timeout: 0,
                backdrop: 'static',
                backdropColor: 'rgba(0,0,0,.5)',
                keyboard: false
            }, options));
        });
    };
    /**
     * Show prompt
     *
     * @param {string} title
     * @param {BuiltInOptions} 覆盖内置配置参数
     * @returns {Promise<any>} 返回一个Promise任意类型
     */
    /**
         * Show prompt
         *
         * @param {string} title
         * @param {BuiltInOptions} 覆盖内置配置参数
         * @returns {Promise<any>} 返回一个Promise任意类型
         */
    DialogService.prototype.prompt = /**
         * Show prompt
         *
         * @param {string} title
         * @param {BuiltInOptions} 覆盖内置配置参数
         * @returns {Promise<any>} 返回一个Promise任意类型
         */
    function (title, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.show(Object.assign({
                input: 'text',
                inputRequired: true,
                inputError: '不可为空'
            }, options, {
                type: 'prompt',
                title: title,
                onHide: function (res) {
                    resolve(res);
                }
            }), _this.mergerDialog({
                timeout: 0,
                backdrop: 'static',
                backdropColor: 'rgba(0,0,0,.5)',
                keyboard: false
            }, options));
        });
    };
    DialogService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    DialogService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver, },
        { type: ApplicationRef, },
        { type: Injector, },
        { type: DialogServiceConfig, decorators: [{ type: Optional },] },
    ]; };
    return DialogService;
}());
export { DialogService };
//# sourceMappingURL=dialog.service.js.map