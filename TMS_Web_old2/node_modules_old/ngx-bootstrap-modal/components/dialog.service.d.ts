import { ComponentFactoryResolver, ApplicationRef, Injector, Type } from '@angular/core';
import { DialogComponent } from './dialog.component';
import { Observable } from 'rxjs/Observable';
import { BuiltInOptions } from './built-in.options';
export interface DialogOptions {
    /**
     * 指定模态顺序
     *
     * @type {number}
     * @default 自动叠加
     */
    index?: number;
    /**
     * 自动关闭时间（单位：ms）
     *
     * @type {number}
     * @default 不会自动关闭
     */
    timeout?: number;
    /**
     * 是否包括背景且点击背景会关闭，如果传递的是字符串 'static' 点击背景不会关闭。
     *
     * @type {boolean}
     * @default true
     */
    backdrop?: boolean | 'static';
    /**
     * 背景色
     *
     * @type {string}
     * @default 'rgba(0,0,0,.5)' 半透明
     */
    backdropColor?: string;
    /**
     * 键盘上的 esc 键被按下时关闭模态框。
     *
     * @type {boolean}
     * @default true
     */
    keyboard?: boolean;
}
export declare class DialogServiceConfig {
    container?: HTMLElement;
    builtInOptions?: BuiltInOptions;
}
export declare class DialogService {
    private resolver;
    private applicationRef;
    private injector;
    /**
     * Placeholder of modal dialogs
     * @type {DialogHolderComponent}
     */
    private dialogHolderComponent;
    /**
     * HTML container for dialogs
     * type {HTMLElement}
     */
    private container;
    /**
     * @param {ComponentFactoryResolver} resolver
     * @param {ApplicationRef} applicationRef
     * @param {Injector} injector
     * @param {DialogServiceConfig} config
     */
    constructor(resolver: ComponentFactoryResolver, applicationRef: ApplicationRef, injector: Injector, config: DialogServiceConfig);
    /**
     * Adds dialog
     * @param {Type<DialogComponent<T, T1>>} component
     * @param {T?} data
     * @param {DialogOptions?} options
     * @return {Observable<T1>}
     */
    addDialog<T, T1>(component: Type<DialogComponent<T, T1>>, data?: T, options?: DialogOptions): Observable<T1>;
    /**
     * Hides and removes dialog from DOM
     * @param {DialogComponent} component
     */
    removeDialog(component: DialogComponent<any, any>): void;
    /**
     * Closes all dialogs
     */
    removeAll(): void;
    /**
     * Creates and add to DOM dialog holder component
     * @return {DialogHolderComponent}
     */
    private createDialogHolder();
    DEFOPT: BuiltInOptions;
    /**
     * 构建一个内置模态
     * @param builtInOptions 内置配置参数
     * @param options 模态配置参数
     */
    show(builtInOptions: BuiltInOptions, options?: DialogOptions): void;
    private mergerDialog(options, built);
    /**
     * Show Alter
     *
     * @param {string} title
     * @param {string} content
     * @param {BuiltInOptions} 覆盖内置配置参数
     */
    alert(title: string, content: string, options?: BuiltInOptions): void;
    /**
     * Show confirm
     *
     * @param {string} title
     * @param {string} content
     * @param {BuiltInOptions} 覆盖内置配置参数
     * @returns {Promise<boolean>} 返回一个Promise布尔类型
     */
    confirm(title: string, content: string, options?: BuiltInOptions): Promise<boolean>;
    /**
     * Show prompt
     *
     * @param {string} title
     * @param {BuiltInOptions} 覆盖内置配置参数
     * @returns {Promise<any>} 返回一个Promise任意类型
     */
    prompt(title: string, options?: BuiltInOptions): Promise<any>;
}
