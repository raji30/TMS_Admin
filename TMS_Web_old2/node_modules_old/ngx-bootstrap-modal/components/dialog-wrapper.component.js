import { Component, ViewContainerRef, ViewChild, ComponentFactoryResolver, ReflectiveInjector } from '@angular/core';
import { BuiltInComponent } from './built-in.dialog';
import { DialogService } from './dialog.service';
var DialogWrapperComponent = /** @class */ (function () {
    /**
     * Constructor
     * @param {ComponentFactoryResolver} resolver
     * @param {DialogService} dialogService
     */
    function DialogWrapperComponent(resolver, dialogService) {
        this.resolver = resolver;
        this.dialogService = dialogService;
    }
    /**
     * Adds content dialog component to wrapper
     * @param {Type<DialogComponent>} component
     * @return {DialogComponent}
     */
    /**
       * Adds content dialog component to wrapper
       * @param {Type<DialogComponent>} component
       * @return {DialogComponent}
       */
    DialogWrapperComponent.prototype.addComponent = /**
       * Adds content dialog component to wrapper
       * @param {Type<DialogComponent>} component
       * @return {DialogComponent}
       */
    function (component) {
        var _this = this;
        var factory = this.resolver.resolveComponentFactory(component);
        var injector = ReflectiveInjector.fromResolvedProviders([], this.element.injector);
        var componentRef = factory.create(injector);
        this.element.insert(componentRef.hostView);
        this.content = componentRef.instance;
        this.content.wrapper = this;
        if (component !== BuiltInComponent) {
            setTimeout(function () {
                _this.setFocus();
            }, 100);
        }
        return this.content;
    };
    /**
     * Registers event handler to close dialog by click on backdrop
     */
    /**
       * Registers event handler to close dialog by click on backdrop
       */
    DialogWrapperComponent.prototype.closeByClickOutside = /**
       * Registers event handler to close dialog by click on backdrop
       */
    function () {
        var _this = this;
        var containerEl = this.container.nativeElement;
        containerEl.querySelector('.modal-content').addEventListener('click', function (event) {
            event.stopPropagation();
        });
        containerEl.addEventListener('click', function () {
            _this.dialogService.removeDialog(_this.content);
        }, false);
    };
    DialogWrapperComponent.prototype.setFocus = function () {
        var containerEl = this.container.nativeElement;
        var autoFocusEl = containerEl.querySelector('[autofocus]');
        if (autoFocusEl)
            autoFocusEl.focus();
    };
    DialogWrapperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'dialog-wrapper',
                    template: "\n    <div #container class=\"modal fade\" style=\"display:block !important;\" role=\"dialog\">\n        <ng-template #element></ng-template>\n    </div>\n    ",
                    preserveWhitespaces: false
                },] },
    ];
    /** @nocollapse */
    DialogWrapperComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver, },
        { type: DialogService, },
    ]; };
    DialogWrapperComponent.propDecorators = {
        "element": [{ type: ViewChild, args: ['element', { read: ViewContainerRef },] },],
        "container": [{ type: ViewChild, args: ['container',] },],
    };
    return DialogWrapperComponent;
}());
export { DialogWrapperComponent };
//# sourceMappingURL=dialog-wrapper.component.js.map