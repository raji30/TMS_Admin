/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, Directive, ElementRef, EventEmitter, HostListener, Input, Output, ViewContainerRef } from '@angular/core';
import { FormControl } from '@angular/forms';
export class AutocompleteComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.classList = 'autocomplete';
        this.selectEvent = new EventEmitter();
        this.inputChangedEvent = new EventEmitter();
        this.maxLimit = 0;
        this.thisElement = elementRef.nativeElement;
        this.selectedIndex = 0;
        this.showAutoComplete = false;
        this.value = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.config && this.config.class) {
            this.classList += ' ' + this.config.class;
        }
        if (this.config && this.config.max > 0) {
            this.maxLimit = this.config.max;
        }
        this.placeholder = 'autocomplete';
        this.inputElement = /** @type {?} */ (this.thisElement.querySelector('input'));
        if (!this.isNull(this.config)) {
            if (!this.isNull(this.config.placeholder)) {
                this.placeholder = this.config.placeholder;
            }
            if (!this.isNull(this.config.sourceField)) {
                this.sourceField = this.config.sourceField;
            }
        }
        this.filterItems(this.value);
        this.inputElement.focus();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.filterItems(this.value);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    enterText(event) {
        /** @type {?} */
        const total = this.candidates.length;
        switch (event.keyCode) {
            case 27:
                this.showAutoComplete = false;
                break;
            case 38:
                this.selectedIndex = (total + this.selectedIndex - 1) % total;
                break;
            case 40:
                this.selectedIndex = (total + this.selectedIndex + 1) % total;
                break;
            case 13:
                if (this.candidates.length > 0) {
                    this.onSelect(this.selectedIndex);
                }
                event.preventDefault();
                break;
            default:
                this.value = event.target.value;
                this.inputChangedEvent.emit(this.value);
                break;
        }
    }
    /**
     * @param {?} idx
     * @return {?}
     */
    onSelect(idx) {
        this.showAutoComplete = false;
        this.value = this.candidatesLabels[idx];
        this.selectEvent.emit(this.candidates[idx]);
    }
    /**
     * @param {?} event
     * @param {?} idx
     * @return {?}
     */
    onKeyUpEvent(event, idx) {
        if (event.keyCode === 13) {
            this.onSelect(idx);
        }
    }
    /**
     * @param {?} search
     * @return {?}
     */
    filterItems(search) {
        /** @type {?} */
        const field = this.sourceField;
        /** @type {?} */
        const filterItem = this.filterItem;
        if (this.items) {
            this.candidates = this.items.filter(item => {
                return filterItem(item, field, search);
            });
            if (this.maxLimit > 0) {
                this.candidates = this.candidates.slice(0, this.maxLimit);
            }
            this.buildLabels();
        }
    }
    /**
     * @param {?} object
     * @param {?} path
     * @return {?}
     */
    getFieldValue(object, path) {
        if (typeof object === 'string') {
            return object;
        }
        if (path instanceof Array) {
            /** @type {?} */
            let result = object;
            path.forEach((element) => {
                if (result !== null &&
                    result !== undefined &&
                    result[element] !== null &&
                    result[element] !== undefined) {
                    result = result[element];
                }
                else {
                    result = '';
                }
            });
            return result;
        }
        else {
            return object[path] || '';
        }
    }
    /**
     * @param {?} object
     * @return {?}
     */
    isNull(object) {
        return object === null || object === undefined;
    }
    /**
     * @return {?}
     */
    buildLabels() {
        /** @type {?} */
        const field = this.sourceField;
        /** @type {?} */
        const getFieldValue = this.getFieldValue;
        this.candidatesLabels = this.candidates.map((e) => getFieldValue(e, field));
    }
    /**
     * @param {?} item
     * @param {?} path
     * @param {?} search
     * @return {?}
     */
    filterItem(item, path, search) {
        if (search === null || search === undefined || search.length === 0) {
            return true;
        }
        /** @type {?} */
        let result;
        if (typeof item === 'string') {
            result = item;
        }
        else if (path instanceof Array) {
            result = item;
            path.forEach((element) => {
                if (result !== null &&
                    result !== undefined &&
                    result[element] !== null &&
                    result[element] !== undefined) {
                    result = result[element];
                }
                else {
                    result = '';
                }
            });
        }
        else {
            result = item[path] || '';
        }
        return result.toLowerCase().indexOf(search.toLowerCase()) >= 0;
    }
}
AutocompleteComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line
                selector: 'ng2-input-autocomplete',
                template: `
  <div [ngClass]="classList">
    <input type="text"
      placeholder="{{placeholder}}"
      (blur)="showAutoComplete = false;"
      (focus)="showAutoComplete = true;"
      [value]="value"
      (keyup)="enterText($event)">
    <ul *ngIf="showAutoComplete && candidates && candidates.length > 0">
      <li *ngFor="let candidate of candidates; let idx = index"
        [ngClass]="{ active: (idx === selectedIndex) }"
        (keyup)="onKeyUpEvent($event, idx)"
        (mouseover)="selectedIndex = idx;"
        (mousedown)="onSelect(idx)">
        {{candidatesLabels[idx]}}
      </li>
    </ul>
  </div>`,
                styles: [`.autocomplete ul {
       position: absolute;
       left: 0;
       width: 100%;
       border-left: 1px solid #888;
       border-right: 1px solid #888;
       border-bottom: 1px solid #888;
       list-style: none;
       padding-left: 0px;
       margin-top: 2px;
       background-color: #fff;
       z-index: 100;
     }
     .autocomplete li {
       text-align: left;
       list-style: none;
       width: 100%;
       padding: 0.4em 0 0.4em 0;
     }
     .autocomplete li.active {
       width: 100%;
       background-color: #4bf;
     }

     .autocomplete .highlight {
       background-color: #e2e2e2;
     }
     .autocomplete li.active .highlight {
       background: #666;
       color: #fff;
     }`]
            }] }
];
/** @nocollapse */
AutocompleteComponent.ctorParameters = () => [
    { type: ElementRef }
];
AutocompleteComponent.propDecorators = {
    items: [{ type: Input }],
    config: [{ type: Input }],
    selectEvent: [{ type: Output }],
    inputChangedEvent: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    AutocompleteComponent.prototype.classList;
    /** @type {?} */
    AutocompleteComponent.prototype.items;
    /** @type {?} */
    AutocompleteComponent.prototype.config;
    /** @type {?} */
    AutocompleteComponent.prototype.selectEvent;
    /** @type {?} */
    AutocompleteComponent.prototype.inputChangedEvent;
    /** @type {?} */
    AutocompleteComponent.prototype.inputElement;
    /** @type {?} */
    AutocompleteComponent.prototype.value;
    /** @type {?} */
    AutocompleteComponent.prototype.candidates;
    /** @type {?} */
    AutocompleteComponent.prototype.candidatesLabels;
    /** @type {?} */
    AutocompleteComponent.prototype.selectedIndex;
    /** @type {?} */
    AutocompleteComponent.prototype.showAutoComplete;
    /** @type {?} */
    AutocompleteComponent.prototype.placeholder;
    /** @type {?} */
    AutocompleteComponent.prototype.maxLimit;
    /** @type {?} */
    AutocompleteComponent.prototype.sourceField;
    /** @type {?} */
    AutocompleteComponent.prototype.thisElement;
}
export class AutocompleteDirective {
    /**
     * @param {?} resolver
     * @param {?} viewContainerRef
     */
    constructor(resolver, viewContainerRef) {
        this.resolver = resolver;
        this.viewContainerRef = viewContainerRef;
        this.ngModelChange = new EventEmitter();
        this.inputChangedEvent = new EventEmitter();
        this.selectEvent = new EventEmitter();
        this.reset = false;
        this.hideAutocomplete = (event) => {
            if (!this.componentRef) {
                return;
            }
            if (event && event.target && this.thisElement && event.target === this.thisElement.parentElement) {
                return;
            }
            if (!event ||
                (event.target !== this.thisElement && event.type === 'click')) {
                this.componentRef.destroy();
                this.componentRef = undefined;
            }
            if (this.inputElement['tabIndex'] < 0) {
                this.inputElement['tabIndex'] = this.tabIndex;
            }
        };
        this.onInputChanged = (val) => {
            this.inputElement.value = val;
            if (val !== this.ngModel) {
                this.ngModel = val;
                this.ngModelChange.emit(val);
            }
            /** @type {?} */
            const component = this.componentRef.instance;
            component.filterItems(val);
            this.inputChangedEvent.emit(val);
        };
        this.onSelect = (item) => {
            /** @type {?} */
            const component = this.componentRef.instance;
            /** @type {?} */
            const val = component.value;
            if (val !== this.ngModel) {
                this.ngModel = val;
                this.ngModelChange.emit(val);
            }
            this.selectEvent.emit(item);
            if (this.inputElement) {
                this.inputElement.value = '' + val;
            }
            this.hideAutocomplete();
        };
        this.thisElement = this.viewContainerRef.element.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.thisElement.tagName.toLowerCase() === 'form') {
            return;
        }
        this.createDiv();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.componentRef) {
            this.componentRef.instance.selectEvent.unsubscribe();
            this.componentRef.instance.inputChangedEvent.unsubscribe();
        }
        document.removeEventListener('click', this.hideAutocomplete);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['items'] && this.componentRef) {
            /** @type {?} */
            const component = this.componentRef.instance;
            component.items = changes['items'].currentValue;
            component.filterItems(component.value);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const input = this.getInputElement();
        if (this.control) {
            this.control.valueChanges.subscribe(() => {
                this.reset = true;
            });
        }
        if (input.form) {
            input.form.addEventListener('reset', () => {
                this.reset = true;
            });
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    showAutocomplete(event) {
        this.hideAutocomplete();
        if (event === this.thisElement) {
            this.createAutocomplete();
        }
    }
    /**
     * @return {?}
     */
    getInputElement() {
        /** @type {?} */
        let input = /** @type {?} */ (this.thisElement);
        if (this.thisElement.tagName !== 'INPUT' && this.autocompleteElement) {
            input = /** @type {?} */ (this.thisElement.querySelector('input'));
        }
        return input;
    }
    /**
     * @return {?}
     */
    createDiv() {
        /** @type {?} */
        const element = document.createElement('div');
        element.style.display = 'inline-block';
        element.style.position = 'relative';
        this.thisElement.parentElement.insertBefore(element, this.thisElement.nextSibling);
        element.appendChild(this.thisElement);
        document.addEventListener('click', this.hideAutocomplete);
    }
    /**
     * @return {?}
     */
    createAutocomplete() {
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(AutocompleteComponent);
        this.componentRef = this.viewContainerRef.createComponent(factory);
        /** @type {?} */
        const component = this.componentRef.instance;
        component.config = this.config;
        component.items = this.items;
        component.selectEvent.subscribe(this.onSelect);
        component.inputChangedEvent.subscribe(this.onInputChanged);
        this.autocompleteElement = this.componentRef.location.nativeElement;
        this.autocompleteElement.style.display = 'none';
        this.inputElement = this.getInputElement();
        if (this.thisElement.tagName !== 'INPUT' && this.autocompleteElement) {
            this.inputElement.parentElement.insertBefore(this.autocompleteElement, this.inputElement.nextSibling);
        }
        if (this.reset) {
            this.ngModel = '';
            this.reset = false;
        }
        this.inputElement.value = this.ngModel ? this.ngModel : '';
        component.value = this.inputElement.value;
        this.tabIndex = this.inputElement['tabIndex'];
        this.inputElement['tabIndex'] = -100;
        if (this.componentRef) {
            /** @type {?} */
            const rect = this.thisElement.getBoundingClientRect();
            /** @type {?} */
            const style = this.autocompleteElement.style;
            style.width = rect.width + 'px';
            style.position = 'absolute';
            style.zIndex = '1';
            style.top = '0';
            style.left = '0';
            style.display = 'inline-block';
        }
    }
}
AutocompleteDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line
                selector: '[input-autocomplete]'
            },] }
];
/** @nocollapse */
AutocompleteDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef }
];
AutocompleteDirective.propDecorators = {
    config: [{ type: Input }],
    items: [{ type: Input }],
    ngModel: [{ type: Input }],
    control: [{ type: Input }],
    ngModelChange: [{ type: Output }],
    inputChangedEvent: [{ type: Output }],
    selectEvent: [{ type: Output }],
    showAutocomplete: [{ type: HostListener, args: ['click', ['$event.target'],] }, { type: HostListener, args: ['focus', ['$event.target'],] }]
};
if (false) {
    /** @type {?} */
    AutocompleteDirective.prototype.config;
    /** @type {?} */
    AutocompleteDirective.prototype.items;
    /** @type {?} */
    AutocompleteDirective.prototype.ngModel;
    /** @type {?} */
    AutocompleteDirective.prototype.control;
    /** @type {?} */
    AutocompleteDirective.prototype.ngModelChange;
    /** @type {?} */
    AutocompleteDirective.prototype.inputChangedEvent;
    /** @type {?} */
    AutocompleteDirective.prototype.selectEvent;
    /** @type {?} */
    AutocompleteDirective.prototype.componentRef;
    /** @type {?} */
    AutocompleteDirective.prototype.thisElement;
    /** @type {?} */
    AutocompleteDirective.prototype.autocompleteElement;
    /** @type {?} */
    AutocompleteDirective.prototype.inputElement;
    /** @type {?} */
    AutocompleteDirective.prototype.tabIndex;
    /** @type {?} */
    AutocompleteDirective.prototype.reset;
    /** @type {?} */
    AutocompleteDirective.prototype.hideAutocomplete;
    /** @type {?} */
    AutocompleteDirective.prototype.onInputChanged;
    /** @type {?} */
    AutocompleteDirective.prototype.onSelect;
    /** @type {?} */
    AutocompleteDirective.prototype.resolver;
    /** @type {?} */
    AutocompleteDirective.prototype.viewContainerRef;
}

//# sourceMappingURL=data:application/json;base64,