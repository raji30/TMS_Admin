(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('ng2-input-autocomplete', ['exports', '@angular/core', '@angular/common', '@angular/forms'], factory) :
    (factory((global['ng2-input-autocomplete'] = {}),global.ng.core,global.ng.common,global.ng.forms));
}(this, (function (exports,core,common,forms) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AutocompleteComponent = /** @class */ (function () {
        function AutocompleteComponent(elementRef) {
            this.classList = 'autocomplete';
            this.selectEvent = new core.EventEmitter();
            this.inputChangedEvent = new core.EventEmitter();
            this.maxLimit = 0;
            this.thisElement = elementRef.nativeElement;
            this.selectedIndex = 0;
            this.showAutoComplete = false;
            this.value = '';
        }
        /**
         * @return {?}
         */
        AutocompleteComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.config && this.config.class) {
                    this.classList += ' ' + this.config.class;
                }
                if (this.config && this.config.max > 0) {
                    this.maxLimit = this.config.max;
                }
                this.placeholder = 'autocomplete';
                this.inputElement = /** @type {?} */ (this.thisElement.querySelector('input'));
                if (!this.isNull(this.config)) {
                    if (!this.isNull(this.config.placeholder)) {
                        this.placeholder = this.config.placeholder;
                    }
                    if (!this.isNull(this.config.sourceField)) {
                        this.sourceField = this.config.sourceField;
                    }
                }
                this.filterItems(this.value);
                this.inputElement.focus();
            };
        /**
         * @return {?}
         */
        AutocompleteComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.filterItems(this.value);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        AutocompleteComponent.prototype.enterText = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var total = this.candidates.length;
                switch (event.keyCode) {
                    case 27:
                        this.showAutoComplete = false;
                        break;
                    case 38:
                        this.selectedIndex = (total + this.selectedIndex - 1) % total;
                        break;
                    case 40:
                        this.selectedIndex = (total + this.selectedIndex + 1) % total;
                        break;
                    case 13:
                        if (this.candidates.length > 0) {
                            this.onSelect(this.selectedIndex);
                        }
                        event.preventDefault();
                        break;
                    default:
                        this.value = event.target.value;
                        this.inputChangedEvent.emit(this.value);
                        break;
                }
            };
        /**
         * @param {?} idx
         * @return {?}
         */
        AutocompleteComponent.prototype.onSelect = /**
         * @param {?} idx
         * @return {?}
         */
            function (idx) {
                this.showAutoComplete = false;
                this.value = this.candidatesLabels[idx];
                this.selectEvent.emit(this.candidates[idx]);
            };
        /**
         * @param {?} event
         * @param {?} idx
         * @return {?}
         */
        AutocompleteComponent.prototype.onKeyUpEvent = /**
         * @param {?} event
         * @param {?} idx
         * @return {?}
         */
            function (event, idx) {
                if (event.keyCode === 13) {
                    this.onSelect(idx);
                }
            };
        /**
         * @param {?} search
         * @return {?}
         */
        AutocompleteComponent.prototype.filterItems = /**
         * @param {?} search
         * @return {?}
         */
            function (search) {
                /** @type {?} */
                var field = this.sourceField;
                /** @type {?} */
                var filterItem = this.filterItem;
                if (this.items) {
                    this.candidates = this.items.filter(function (item) {
                        return filterItem(item, field, search);
                    });
                    if (this.maxLimit > 0) {
                        this.candidates = this.candidates.slice(0, this.maxLimit);
                    }
                    this.buildLabels();
                }
            };
        /**
         * @param {?} object
         * @param {?} path
         * @return {?}
         */
        AutocompleteComponent.prototype.getFieldValue = /**
         * @param {?} object
         * @param {?} path
         * @return {?}
         */
            function (object, path) {
                if (typeof object === 'string') {
                    return object;
                }
                if (path instanceof Array) {
                    /** @type {?} */
                    var result_1 = object;
                    path.forEach(function (element) {
                        if (result_1 !== null &&
                            result_1 !== undefined &&
                            result_1[element] !== null &&
                            result_1[element] !== undefined) {
                            result_1 = result_1[element];
                        }
                        else {
                            result_1 = '';
                        }
                    });
                    return result_1;
                }
                else {
                    return object[path] || '';
                }
            };
        /**
         * @param {?} object
         * @return {?}
         */
        AutocompleteComponent.prototype.isNull = /**
         * @param {?} object
         * @return {?}
         */
            function (object) {
                return object === null || object === undefined;
            };
        /**
         * @return {?}
         */
        AutocompleteComponent.prototype.buildLabels = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var field = this.sourceField;
                /** @type {?} */
                var getFieldValue = this.getFieldValue;
                this.candidatesLabels = this.candidates.map(function (e) {
                    return getFieldValue(e, field);
                });
            };
        /**
         * @param {?} item
         * @param {?} path
         * @param {?} search
         * @return {?}
         */
        AutocompleteComponent.prototype.filterItem = /**
         * @param {?} item
         * @param {?} path
         * @param {?} search
         * @return {?}
         */
            function (item, path, search) {
                if (search === null || search === undefined || search.length === 0) {
                    return true;
                }
                /** @type {?} */
                var result;
                if (typeof item === 'string') {
                    result = item;
                }
                else if (path instanceof Array) {
                    result = item;
                    path.forEach(function (element) {
                        if (result !== null &&
                            result !== undefined &&
                            result[element] !== null &&
                            result[element] !== undefined) {
                            result = result[element];
                        }
                        else {
                            result = '';
                        }
                    });
                }
                else {
                    result = item[path] || '';
                }
                return result.toLowerCase().indexOf(search.toLowerCase()) >= 0;
            };
        AutocompleteComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line
                        selector: 'ng2-input-autocomplete',
                        template: "\n  <div [ngClass]=\"classList\">\n    <input type=\"text\"\n      placeholder=\"{{placeholder}}\"\n      (blur)=\"showAutoComplete = false;\"\n      (focus)=\"showAutoComplete = true;\"\n      [value]=\"value\"\n      (keyup)=\"enterText($event)\">\n    <ul *ngIf=\"showAutoComplete && candidates && candidates.length > 0\">\n      <li *ngFor=\"let candidate of candidates; let idx = index\"\n        [ngClass]=\"{ active: (idx === selectedIndex) }\"\n        (keyup)=\"onKeyUpEvent($event, idx)\"\n        (mouseover)=\"selectedIndex = idx;\"\n        (mousedown)=\"onSelect(idx)\">\n        {{candidatesLabels[idx]}}\n      </li>\n    </ul>\n  </div>",
                        styles: [".autocomplete ul {\n       position: absolute;\n       left: 0;\n       width: 100%;\n       border-left: 1px solid #888;\n       border-right: 1px solid #888;\n       border-bottom: 1px solid #888;\n       list-style: none;\n       padding-left: 0px;\n       margin-top: 2px;\n       background-color: #fff;\n       z-index: 100;\n     }\n     .autocomplete li {\n       text-align: left;\n       list-style: none;\n       width: 100%;\n       padding: 0.4em 0 0.4em 0;\n     }\n     .autocomplete li.active {\n       width: 100%;\n       background-color: #4bf;\n     }\n\n     .autocomplete .highlight {\n       background-color: #e2e2e2;\n     }\n     .autocomplete li.active .highlight {\n       background: #666;\n       color: #fff;\n     }"]
                    }] }
        ];
        /** @nocollapse */
        AutocompleteComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        AutocompleteComponent.propDecorators = {
            items: [{ type: core.Input }],
            config: [{ type: core.Input }],
            selectEvent: [{ type: core.Output }],
            inputChangedEvent: [{ type: core.Output }]
        };
        return AutocompleteComponent;
    }());
    var AutocompleteDirective = /** @class */ (function () {
        function AutocompleteDirective(resolver, viewContainerRef) {
            var _this = this;
            this.resolver = resolver;
            this.viewContainerRef = viewContainerRef;
            this.ngModelChange = new core.EventEmitter();
            this.inputChangedEvent = new core.EventEmitter();
            this.selectEvent = new core.EventEmitter();
            this.reset = false;
            this.hideAutocomplete = function (event) {
                if (!_this.componentRef) {
                    return;
                }
                if (event && event.target && _this.thisElement && event.target === _this.thisElement.parentElement) {
                    return;
                }
                if (!event ||
                    (event.target !== _this.thisElement && event.type === 'click')) {
                    _this.componentRef.destroy();
                    _this.componentRef = undefined;
                }
                if (_this.inputElement['tabIndex'] < 0) {
                    _this.inputElement['tabIndex'] = _this.tabIndex;
                }
            };
            this.onInputChanged = function (val) {
                _this.inputElement.value = val;
                if (val !== _this.ngModel) {
                    _this.ngModel = val;
                    _this.ngModelChange.emit(val);
                }
                /** @type {?} */
                var component = _this.componentRef.instance;
                component.filterItems(val);
                _this.inputChangedEvent.emit(val);
            };
            this.onSelect = function (item) {
                /** @type {?} */
                var component = _this.componentRef.instance;
                /** @type {?} */
                var val = component.value;
                if (val !== _this.ngModel) {
                    _this.ngModel = val;
                    _this.ngModelChange.emit(val);
                }
                _this.selectEvent.emit(item);
                if (_this.inputElement) {
                    _this.inputElement.value = '' + val;
                }
                _this.hideAutocomplete();
            };
            this.thisElement = this.viewContainerRef.element.nativeElement;
        }
        /**
         * @return {?}
         */
        AutocompleteDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.thisElement.tagName.toLowerCase() === 'form') {
                    return;
                }
                this.createDiv();
            };
        /**
         * @return {?}
         */
        AutocompleteDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.componentRef) {
                    this.componentRef.instance.selectEvent.unsubscribe();
                    this.componentRef.instance.inputChangedEvent.unsubscribe();
                }
                document.removeEventListener('click', this.hideAutocomplete);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        AutocompleteDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['items'] && this.componentRef) {
                    /** @type {?} */
                    var component = this.componentRef.instance;
                    component.items = changes['items'].currentValue;
                    component.filterItems(component.value);
                }
            };
        /**
         * @return {?}
         */
        AutocompleteDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var input = this.getInputElement();
                if (this.control) {
                    this.control.valueChanges.subscribe(function () {
                        _this.reset = true;
                    });
                }
                if (input.form) {
                    input.form.addEventListener('reset', function () {
                        _this.reset = true;
                    });
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        AutocompleteDirective.prototype.showAutocomplete = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.hideAutocomplete();
                if (event === this.thisElement) {
                    this.createAutocomplete();
                }
            };
        /**
         * @return {?}
         */
        AutocompleteDirective.prototype.getInputElement = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var input = /** @type {?} */ (this.thisElement);
                if (this.thisElement.tagName !== 'INPUT' && this.autocompleteElement) {
                    input = /** @type {?} */ (this.thisElement.querySelector('input'));
                }
                return input;
            };
        /**
         * @return {?}
         */
        AutocompleteDirective.prototype.createDiv = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var element = document.createElement('div');
                element.style.display = 'inline-block';
                element.style.position = 'relative';
                this.thisElement.parentElement.insertBefore(element, this.thisElement.nextSibling);
                element.appendChild(this.thisElement);
                document.addEventListener('click', this.hideAutocomplete);
            };
        /**
         * @return {?}
         */
        AutocompleteDirective.prototype.createAutocomplete = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var factory = this.resolver.resolveComponentFactory(AutocompleteComponent);
                this.componentRef = this.viewContainerRef.createComponent(factory);
                /** @type {?} */
                var component = this.componentRef.instance;
                component.config = this.config;
                component.items = this.items;
                component.selectEvent.subscribe(this.onSelect);
                component.inputChangedEvent.subscribe(this.onInputChanged);
                this.autocompleteElement = this.componentRef.location.nativeElement;
                this.autocompleteElement.style.display = 'none';
                this.inputElement = this.getInputElement();
                if (this.thisElement.tagName !== 'INPUT' && this.autocompleteElement) {
                    this.inputElement.parentElement.insertBefore(this.autocompleteElement, this.inputElement.nextSibling);
                }
                if (this.reset) {
                    this.ngModel = '';
                    this.reset = false;
                }
                this.inputElement.value = this.ngModel ? this.ngModel : '';
                component.value = this.inputElement.value;
                this.tabIndex = this.inputElement['tabIndex'];
                this.inputElement['tabIndex'] = -100;
                if (this.componentRef) {
                    /** @type {?} */
                    var rect = this.thisElement.getBoundingClientRect();
                    /** @type {?} */
                    var style = this.autocompleteElement.style;
                    style.width = rect.width + 'px';
                    style.position = 'absolute';
                    style.zIndex = '1';
                    style.top = '0';
                    style.left = '0';
                    style.display = 'inline-block';
                }
            };
        AutocompleteDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line
                        selector: '[input-autocomplete]'
                    },] }
        ];
        /** @nocollapse */
        AutocompleteDirective.ctorParameters = function () {
            return [
                { type: core.ComponentFactoryResolver },
                { type: core.ViewContainerRef }
            ];
        };
        AutocompleteDirective.propDecorators = {
            config: [{ type: core.Input }],
            items: [{ type: core.Input }],
            ngModel: [{ type: core.Input }],
            control: [{ type: core.Input }],
            ngModelChange: [{ type: core.Output }],
            inputChangedEvent: [{ type: core.Output }],
            selectEvent: [{ type: core.Output }],
            showAutocomplete: [{ type: core.HostListener, args: ['click', ['$event.target'],] }, { type: core.HostListener, args: ['focus', ['$event.target'],] }]
        };
        return AutocompleteDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AutocompleteModule = /** @class */ (function () {
        function AutocompleteModule() {
        }
        /**
         * @return {?}
         */
        AutocompleteModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: AutocompleteModule
                };
            };
        AutocompleteModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, forms.FormsModule],
                        declarations: [AutocompleteComponent, AutocompleteDirective],
                        exports: [AutocompleteComponent, AutocompleteDirective],
                        entryComponents: [AutocompleteComponent]
                    },] }
        ];
        return AutocompleteModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.AutocompleteComponent = AutocompleteComponent;
    exports.AutocompleteDirective = AutocompleteDirective;
    exports.AutocompleteModule = AutocompleteModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcyLWlucHV0LWF1dG9jb21wbGV0ZS51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL25nMi1pbnB1dC1hdXRvY29tcGxldGUvbGliL2F1dG9jb21wbGV0ZS5jb21wb25lbnQudHMiLCJuZzovL25nMi1pbnB1dC1hdXRvY29tcGxldGUvbGliL2F1dG9jb21wbGV0ZS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgTUlUIExJQ0VOU0UgQGxpdXk5N1xuKi9cbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICBDb21wb25lbnRSZWYsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBBZnRlclZpZXdJbml0LFxuICBPdXRwdXQsXG4gIFNpbXBsZUNoYW5nZSxcbiAgVmlld0NvbnRhaW5lclJlZixcbiAgSG9zdEJpbmRpbmdcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Zvcm1Db250cm9sfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgc2VsZWN0b3I6ICduZzItaW5wdXQtYXV0b2NvbXBsZXRlJyxcbiAgdGVtcGxhdGU6IGBcbiAgPGRpdiBbbmdDbGFzc109XCJjbGFzc0xpc3RcIj5cbiAgICA8aW5wdXQgdHlwZT1cInRleHRcIlxuICAgICAgcGxhY2Vob2xkZXI9XCJ7e3BsYWNlaG9sZGVyfX1cIlxuICAgICAgKGJsdXIpPVwic2hvd0F1dG9Db21wbGV0ZSA9IGZhbHNlO1wiXG4gICAgICAoZm9jdXMpPVwic2hvd0F1dG9Db21wbGV0ZSA9IHRydWU7XCJcbiAgICAgIFt2YWx1ZV09XCJ2YWx1ZVwiXG4gICAgICAoa2V5dXApPVwiZW50ZXJUZXh0KCRldmVudClcIj5cbiAgICA8dWwgKm5nSWY9XCJzaG93QXV0b0NvbXBsZXRlICYmIGNhbmRpZGF0ZXMgJiYgY2FuZGlkYXRlcy5sZW5ndGggPiAwXCI+XG4gICAgICA8bGkgKm5nRm9yPVwibGV0IGNhbmRpZGF0ZSBvZiBjYW5kaWRhdGVzOyBsZXQgaWR4ID0gaW5kZXhcIlxuICAgICAgICBbbmdDbGFzc109XCJ7IGFjdGl2ZTogKGlkeCA9PT0gc2VsZWN0ZWRJbmRleCkgfVwiXG4gICAgICAgIChrZXl1cCk9XCJvbktleVVwRXZlbnQoJGV2ZW50LCBpZHgpXCJcbiAgICAgICAgKG1vdXNlb3Zlcik9XCJzZWxlY3RlZEluZGV4ID0gaWR4O1wiXG4gICAgICAgIChtb3VzZWRvd24pPVwib25TZWxlY3QoaWR4KVwiPlxuICAgICAgICB7e2NhbmRpZGF0ZXNMYWJlbHNbaWR4XX19XG4gICAgICA8L2xpPlxuICAgIDwvdWw+XG4gIDwvZGl2PmAsXG4gIHN0eWxlczogW1xuICAgIGAuYXV0b2NvbXBsZXRlIHVsIHtcbiAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgbGVmdDogMDtcbiAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkICM4ODg7XG4gICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgIzg4ODtcbiAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzg4ODtcbiAgICAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgICAgIHBhZGRpbmctbGVmdDogMHB4O1xuICAgICAgIG1hcmdpbi10b3A6IDJweDtcbiAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgICAgIHotaW5kZXg6IDEwMDtcbiAgICAgfVxuICAgICAuYXV0b2NvbXBsZXRlIGxpIHtcbiAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgcGFkZGluZzogMC40ZW0gMCAwLjRlbSAwO1xuICAgICB9XG4gICAgIC5hdXRvY29tcGxldGUgbGkuYWN0aXZlIHtcbiAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGJmO1xuICAgICB9XG5cbiAgICAgLmF1dG9jb21wbGV0ZSAuaGlnaGxpZ2h0IHtcbiAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTJlMmUyO1xuICAgICB9XG4gICAgIC5hdXRvY29tcGxldGUgbGkuYWN0aXZlIC5oaWdobGlnaHQge1xuICAgICAgIGJhY2tncm91bmQ6ICM2NjY7XG4gICAgICAgY29sb3I6ICNmZmY7XG4gICAgIH1gXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgQXV0b2NvbXBsZXRlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICBjbGFzc0xpc3QgPSAnYXV0b2NvbXBsZXRlJztcbiAgQElucHV0KCkgaXRlbXM6IGFueVtdO1xuICBASW5wdXQoKSBjb25maWc6IGFueTtcbiAgQE91dHB1dCgpIHNlbGVjdEV2ZW50OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBAT3V0cHV0KCkgaW5wdXRDaGFuZ2VkRXZlbnQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIGlucHV0RWxlbWVudDogSFRNTElucHV0RWxlbWVudDtcbiAgdmFsdWU6IHN0cmluZztcbiAgY2FuZGlkYXRlczogYW55W107XG4gIGNhbmRpZGF0ZXNMYWJlbHM6IGFueVtdO1xuICBzZWxlY3RlZEluZGV4OiBudW1iZXI7XG4gIHNob3dBdXRvQ29tcGxldGU6IGJvb2xlYW47XG4gIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gIG1heExpbWl0ID0gMDtcbiAgcHJpdmF0ZSBzb3VyY2VGaWVsZDogYW55O1xuICBwcml2YXRlIHRoaXNFbGVtZW50OiBIVE1MRWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgdGhpcy50aGlzRWxlbWVudCA9IGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSAwO1xuICAgIHRoaXMuc2hvd0F1dG9Db21wbGV0ZSA9IGZhbHNlO1xuICAgIHRoaXMudmFsdWUgPSAnJztcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLmNvbmZpZyAmJiB0aGlzLmNvbmZpZy5jbGFzcykge1xuICAgICAgdGhpcy5jbGFzc0xpc3QgKz0gJyAnICsgdGhpcy5jb25maWcuY2xhc3M7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbmZpZyAmJiB0aGlzLmNvbmZpZy5tYXggPiAwKSB7XG4gICAgICB0aGlzLm1heExpbWl0ID0gdGhpcy5jb25maWcubWF4O1xuICAgIH1cbiAgICB0aGlzLnBsYWNlaG9sZGVyID0gJ2F1dG9jb21wbGV0ZSc7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQgPSB0aGlzLnRoaXNFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAnaW5wdXQnXG4gICAgKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXG4gICAgaWYgKCF0aGlzLmlzTnVsbCh0aGlzLmNvbmZpZykpIHtcbiAgICAgIGlmICghdGhpcy5pc051bGwodGhpcy5jb25maWcucGxhY2Vob2xkZXIpKSB7XG4gICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSB0aGlzLmNvbmZpZy5wbGFjZWhvbGRlcjtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5pc051bGwodGhpcy5jb25maWcuc291cmNlRmllbGQpKSB7XG4gICAgICAgIHRoaXMuc291cmNlRmllbGQgPSB0aGlzLmNvbmZpZy5zb3VyY2VGaWVsZDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5maWx0ZXJJdGVtcyh0aGlzLnZhbHVlKTtcbiAgICB0aGlzLmlucHV0RWxlbWVudC5mb2N1cygpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgdGhpcy5maWx0ZXJJdGVtcyh0aGlzLnZhbHVlKTtcbiAgfVxuXG4gIGVudGVyVGV4dChldmVudDogYW55KSB7XG4gICAgY29uc3QgdG90YWwgPSB0aGlzLmNhbmRpZGF0ZXMubGVuZ3RoO1xuICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgY2FzZSAyNzpcbiAgICAgICAgdGhpcy5zaG93QXV0b0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzODpcbiAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gKHRvdGFsICsgdGhpcy5zZWxlY3RlZEluZGV4IC0gMSkgJSB0b3RhbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQwOlxuICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSAodG90YWwgKyB0aGlzLnNlbGVjdGVkSW5kZXggKyAxKSAlIHRvdGFsO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTM6XG4gICAgICAgIGlmICh0aGlzLmNhbmRpZGF0ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMub25TZWxlY3QodGhpcy5zZWxlY3RlZEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMudmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgIHRoaXMuaW5wdXRDaGFuZ2VkRXZlbnQuZW1pdCh0aGlzLnZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgb25TZWxlY3QoaWR4OiBudW1iZXIpIHtcbiAgICB0aGlzLnNob3dBdXRvQ29tcGxldGUgPSBmYWxzZTtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5jYW5kaWRhdGVzTGFiZWxzW2lkeF07XG4gICAgdGhpcy5zZWxlY3RFdmVudC5lbWl0KHRoaXMuY2FuZGlkYXRlc1tpZHhdKTtcbiAgfVxuXG4gIG9uS2V5VXBFdmVudChldmVudDogS2V5Ym9hcmRFdmVudCwgaWR4OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgIHRoaXMub25TZWxlY3QoaWR4KTtcbiAgICB9XG4gfVxuXG4gIGZpbHRlckl0ZW1zKHNlYXJjaDogc3RyaW5nKSB7XG4gICAgY29uc3QgZmllbGQgPSB0aGlzLnNvdXJjZUZpZWxkO1xuICAgIGNvbnN0IGZpbHRlckl0ZW0gPSB0aGlzLmZpbHRlckl0ZW07XG4gICAgaWYgKHRoaXMuaXRlbXMpIHtcbiAgICAgIHRoaXMuY2FuZGlkYXRlcyA9IHRoaXMuaXRlbXMuZmlsdGVyKGl0ZW0gPT4ge1xuICAgICAgICByZXR1cm4gZmlsdGVySXRlbShpdGVtLCBmaWVsZCwgc2VhcmNoKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMubWF4TGltaXQgPiAwKSB7XG4gICAgICAgIHRoaXMuY2FuZGlkYXRlcyA9IHRoaXMuY2FuZGlkYXRlcy5zbGljZSgwLCB0aGlzLm1heExpbWl0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYnVpbGRMYWJlbHMoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEZpZWxkVmFsdWUob2JqZWN0OiBhbnksIHBhdGg6IGFueSkge1xuICAgIGlmICh0eXBlb2Ygb2JqZWN0ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG4gICAgaWYgKHBhdGggaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgbGV0IHJlc3VsdDogYW55ID0gb2JqZWN0O1xuICAgICAgcGF0aC5mb3JFYWNoKChlbGVtZW50OiBhbnkpID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHJlc3VsdCAhPT0gbnVsbCAmJlxuICAgICAgICAgIHJlc3VsdCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgcmVzdWx0W2VsZW1lbnRdICE9PSBudWxsICYmXG4gICAgICAgICAgcmVzdWx0W2VsZW1lbnRdICE9PSB1bmRlZmluZWRcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0W2VsZW1lbnRdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9ICcnO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvYmplY3RbcGF0aF0gfHwgJyc7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpc051bGwob2JqZWN0OiBhbnkpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09PSBudWxsIHx8IG9iamVjdCA9PT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZExhYmVscygpIHtcbiAgICBjb25zdCBmaWVsZCA9IHRoaXMuc291cmNlRmllbGQ7XG4gICAgY29uc3QgZ2V0RmllbGRWYWx1ZSA9IHRoaXMuZ2V0RmllbGRWYWx1ZTtcbiAgICB0aGlzLmNhbmRpZGF0ZXNMYWJlbHMgPSB0aGlzLmNhbmRpZGF0ZXMubWFwKChlOiBhbnkpID0+XG4gICAgICBnZXRGaWVsZFZhbHVlKGUsIGZpZWxkKVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGZpbHRlckl0ZW0oaXRlbTogYW55LCBwYXRoOiBhbnksIHNlYXJjaDogc3RyaW5nKSB7XG4gICAgaWYgKHNlYXJjaCA9PT0gbnVsbCB8fCBzZWFyY2ggPT09IHVuZGVmaW5lZCB8fCBzZWFyY2gubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdDogYW55O1xuICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlc3VsdCA9IGl0ZW07XG4gICAgfSBlbHNlIGlmIChwYXRoIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIHJlc3VsdCA9IGl0ZW07XG4gICAgICBwYXRoLmZvckVhY2goKGVsZW1lbnQ6IGFueSkgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgcmVzdWx0ICE9PSBudWxsICYmXG4gICAgICAgICAgcmVzdWx0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICByZXN1bHRbZWxlbWVudF0gIT09IG51bGwgJiZcbiAgICAgICAgICByZXN1bHRbZWxlbWVudF0gIT09IHVuZGVmaW5lZFxuICAgICAgICApIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHRbZWxlbWVudF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBpdGVtW3BhdGhdIHx8ICcnO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzZWFyY2gudG9Mb3dlckNhc2UoKSkgPj0gMDtcbiAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gIHNlbGVjdG9yOiAnW2lucHV0LWF1dG9jb21wbGV0ZV0nXG59KVxuZXhwb3J0IGNsYXNzIEF1dG9jb21wbGV0ZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQge1xuICBASW5wdXQoKSBjb25maWc6IGFueTtcbiAgQElucHV0KCkgaXRlbXM6IGFueTtcbiAgQElucHV0KCkgbmdNb2RlbDogc3RyaW5nO1xuICBASW5wdXQoKSBjb250cm9sOiBGb3JtQ29udHJvbDtcbiAgQE91dHB1dCgpIG5nTW9kZWxDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBpbnB1dENoYW5nZWRFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIHNlbGVjdEV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHByaXZhdGUgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8QXV0b2NvbXBsZXRlQ29tcG9uZW50PjtcbiAgcHJpdmF0ZSB0aGlzRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgYXV0b2NvbXBsZXRlRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgaW5wdXRFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50O1xuICBwcml2YXRlIHRhYkluZGV4OiBudW1iZXI7XG4gIHByaXZhdGUgcmVzZXQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgcHVibGljIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWZcbiAgKSB7XG4gICAgdGhpcy50aGlzRWxlbWVudCA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy50aGlzRWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdmb3JtJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmNyZWF0ZURpdigpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuY29tcG9uZW50UmVmKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5zZWxlY3RFdmVudC51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuaW5wdXRDaGFuZ2VkRXZlbnQudW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhpZGVBdXRvY29tcGxldGUpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogeyBbcHJvcEtleTogc3RyaW5nXTogU2ltcGxlQ2hhbmdlIH0pIHtcbiAgICBpZiAoY2hhbmdlc1snaXRlbXMnXSAmJiB0aGlzLmNvbXBvbmVudFJlZikge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2U7XG4gICAgICBjb21wb25lbnQuaXRlbXMgPSBjaGFuZ2VzWydpdGVtcyddLmN1cnJlbnRWYWx1ZTtcbiAgICAgIGNvbXBvbmVudC5maWx0ZXJJdGVtcyhjb21wb25lbnQudmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBjb25zdCBpbnB1dCA9IHRoaXMuZ2V0SW5wdXRFbGVtZW50KCk7XG4gICAgaWYgKHRoaXMuY29udHJvbCkge1xuICAgICAgdGhpcy5jb250cm9sLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLnJlc2V0ID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXQuZm9ybSkge1xuICAgICAgaW5wdXQuZm9ybS5hZGRFdmVudExpc3RlbmVyKCdyZXNldCcsICgpID0+IHtcbiAgICAgICAgdGhpcy5yZXNldCA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50LnRhcmdldCddKVxuICBASG9zdExpc3RlbmVyKCdmb2N1cycsIFsnJGV2ZW50LnRhcmdldCddKVxuICBzaG93QXV0b2NvbXBsZXRlKGV2ZW50OiBhbnkpIHtcbiAgICB0aGlzLmhpZGVBdXRvY29tcGxldGUoKTtcbiAgICBpZiAoZXZlbnQgPT09IHRoaXMudGhpc0VsZW1lbnQpIHtcbiAgICAgIHRoaXMuY3JlYXRlQXV0b2NvbXBsZXRlKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0SW5wdXRFbGVtZW50KCkge1xuICAgIGxldCBpbnB1dCA9IHRoaXMudGhpc0VsZW1lbnQgYXMgSFRNTElucHV0RWxlbWVudDtcblxuICAgIGlmICh0aGlzLnRoaXNFbGVtZW50LnRhZ05hbWUgIT09ICdJTlBVVCcgJiYgdGhpcy5hdXRvY29tcGxldGVFbGVtZW50KSB7XG4gICAgICBpbnB1dCA9IHRoaXMudGhpc0VsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgJ2lucHV0J1xuICAgICAgKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIH1cblxuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuXG4gIGhpZGVBdXRvY29tcGxldGUgPSAoZXZlbnQ/OiBhbnkpOiB2b2lkID0+IHtcbiAgICBpZiAoIXRoaXMuY29tcG9uZW50UmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChldmVudCAmJiBldmVudC50YXJnZXQgJiYgdGhpcy50aGlzRWxlbWVudCAmJiBldmVudC50YXJnZXQgPT09IHRoaXMudGhpc0VsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAhZXZlbnQgfHxcbiAgICAgIChldmVudC50YXJnZXQgIT09IHRoaXMudGhpc0VsZW1lbnQgJiYgZXZlbnQudHlwZSA9PT0gJ2NsaWNrJylcbiAgICApIHtcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodGhpcy5pbnB1dEVsZW1lbnRbJ3RhYkluZGV4J10gPCAwKSB7XG4gICAgICB0aGlzLmlucHV0RWxlbWVudFsndGFiSW5kZXgnXSA9IHRoaXMudGFiSW5kZXg7XG4gICAgfVxuICB9XG5cbiAgb25JbnB1dENoYW5nZWQgPSAodmFsOiBzdHJpbmcpID0+IHtcbiAgICB0aGlzLmlucHV0RWxlbWVudC52YWx1ZSA9IHZhbDtcbiAgICBpZiAodmFsICE9PSB0aGlzLm5nTW9kZWwpIHtcbiAgICAgIHRoaXMubmdNb2RlbCA9IHZhbDtcbiAgICAgIHRoaXMubmdNb2RlbENoYW5nZS5lbWl0KHZhbCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlO1xuICAgIGNvbXBvbmVudC5maWx0ZXJJdGVtcyh2YWwpO1xuICAgIHRoaXMuaW5wdXRDaGFuZ2VkRXZlbnQuZW1pdCh2YWwpO1xuICB9XG5cbiAgb25TZWxlY3QgPSAoaXRlbTogYW55KSA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2U7XG4gICAgY29uc3QgdmFsID0gY29tcG9uZW50LnZhbHVlO1xuICAgIGlmICh2YWwgIT09IHRoaXMubmdNb2RlbCkge1xuICAgICAgdGhpcy5uZ01vZGVsID0gdmFsO1xuICAgICAgdGhpcy5uZ01vZGVsQ2hhbmdlLmVtaXQodmFsKTtcbiAgICB9XG4gICAgdGhpcy5zZWxlY3RFdmVudC5lbWl0KGl0ZW0pO1xuICAgIGlmICh0aGlzLmlucHV0RWxlbWVudCkge1xuICAgICAgdGhpcy5pbnB1dEVsZW1lbnQudmFsdWUgPSAnJyArIHZhbDtcbiAgICB9XG4gICAgdGhpcy5oaWRlQXV0b2NvbXBsZXRlKCk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZURpdigpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG4gICAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgdGhpcy50aGlzRWxlbWVudC5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShcbiAgICAgIGVsZW1lbnQsXG4gICAgICB0aGlzLnRoaXNFbGVtZW50Lm5leHRTaWJsaW5nXG4gICAgKTtcbiAgICBlbGVtZW50LmFwcGVuZENoaWxkKHRoaXMudGhpc0VsZW1lbnQpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oaWRlQXV0b2NvbXBsZXRlKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlQXV0b2NvbXBsZXRlKCkge1xuICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFxuICAgICAgQXV0b2NvbXBsZXRlQ29tcG9uZW50XG4gICAgKTtcbiAgICB0aGlzLmNvbXBvbmVudFJlZiA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVDb21wb25lbnQoZmFjdG9yeSk7XG4gICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2U7XG4gICAgY29tcG9uZW50LmNvbmZpZyA9IHRoaXMuY29uZmlnO1xuICAgIGNvbXBvbmVudC5pdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgY29tcG9uZW50LnNlbGVjdEV2ZW50LnN1YnNjcmliZSh0aGlzLm9uU2VsZWN0KTtcbiAgICBjb21wb25lbnQuaW5wdXRDaGFuZ2VkRXZlbnQuc3Vic2NyaWJlKHRoaXMub25JbnB1dENoYW5nZWQpO1xuICAgIHRoaXMuYXV0b2NvbXBsZXRlRWxlbWVudCA9IHRoaXMuY29tcG9uZW50UmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQ7XG4gICAgdGhpcy5hdXRvY29tcGxldGVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQgPSB0aGlzLmdldElucHV0RWxlbWVudCgpO1xuICAgIGlmICh0aGlzLnRoaXNFbGVtZW50LnRhZ05hbWUgIT09ICdJTlBVVCcgJiYgdGhpcy5hdXRvY29tcGxldGVFbGVtZW50KSB7XG4gICAgICB0aGlzLmlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShcbiAgICAgICAgdGhpcy5hdXRvY29tcGxldGVFbGVtZW50LFxuICAgICAgICB0aGlzLmlucHV0RWxlbWVudC5uZXh0U2libGluZ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZXNldCkge1xuICAgICAgdGhpcy5uZ01vZGVsID0gJyc7XG4gICAgICB0aGlzLnJlc2V0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5pbnB1dEVsZW1lbnQudmFsdWUgPSB0aGlzLm5nTW9kZWwgPyB0aGlzLm5nTW9kZWwgOiAnJztcbiAgICBjb21wb25lbnQudmFsdWUgPSB0aGlzLmlucHV0RWxlbWVudC52YWx1ZTtcbiAgICB0aGlzLnRhYkluZGV4ID0gdGhpcy5pbnB1dEVsZW1lbnRbJ3RhYkluZGV4J107XG4gICAgdGhpcy5pbnB1dEVsZW1lbnRbJ3RhYkluZGV4J10gPSAtMTAwO1xuICAgIGlmICh0aGlzLmNvbXBvbmVudFJlZikge1xuICAgICAgY29uc3QgcmVjdCA9IHRoaXMudGhpc0VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBjb25zdCBzdHlsZSA9IHRoaXMuYXV0b2NvbXBsZXRlRWxlbWVudC5zdHlsZTtcbiAgICAgIHN0eWxlLndpZHRoID0gcmVjdC53aWR0aCArICdweCc7XG4gICAgICBzdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICBzdHlsZS56SW5kZXggPSAnMSc7XG4gICAgICBzdHlsZS50b3AgPSAnMCc7XG4gICAgICBzdHlsZS5sZWZ0ID0gJzAnO1xuICAgICAgc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEF1dG9jb21wbGV0ZUNvbXBvbmVudCwgQXV0b2NvbXBsZXRlRGlyZWN0aXZlIH0gZnJvbSAnLi9hdXRvY29tcGxldGUuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgRm9ybXNNb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFtBdXRvY29tcGxldGVDb21wb25lbnQsIEF1dG9jb21wbGV0ZURpcmVjdGl2ZV0sXG4gIGV4cG9ydHM6IFtBdXRvY29tcGxldGVDb21wb25lbnQsIEF1dG9jb21wbGV0ZURpcmVjdGl2ZV0sXG4gIGVudHJ5Q29tcG9uZW50czogW0F1dG9jb21wbGV0ZUNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgQXV0b2NvbXBsZXRlTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBBdXRvY29tcGxldGVNb2R1bGVcbiAgICB9O1xuICB9XG59XG5cbiJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJDb21wb25lbnQiLCJFbGVtZW50UmVmIiwiSW5wdXQiLCJPdXRwdXQiLCJEaXJlY3RpdmUiLCJDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIiLCJWaWV3Q29udGFpbmVyUmVmIiwiSG9zdExpc3RlbmVyIiwiTmdNb2R1bGUiLCJDb21tb25Nb2R1bGUiLCJGb3Jtc01vZHVsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUdBO1FBNEZFLCtCQUFZLFVBQXNCOzZCQWhCdEIsY0FBYzsrQkFHaUIsSUFBSUEsaUJBQVksRUFBTztxQ0FDakIsSUFBSUEsaUJBQVksRUFBTzs0QkFRN0QsQ0FBQztZQUtWLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztZQUM1QyxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQztZQUN2QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1lBQzlCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1NBQ2pCOzs7O1FBRUQsd0NBQVE7OztZQUFSO2dCQUNFLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtvQkFDcEMsSUFBSSxDQUFDLFNBQVMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7aUJBQzNDO2dCQUNELElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUU7b0JBQ3RDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7aUJBQ2pD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