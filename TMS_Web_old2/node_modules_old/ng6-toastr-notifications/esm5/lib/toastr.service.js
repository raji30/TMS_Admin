/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, ApplicationRef, ComponentFactoryResolver, Injector, ReflectiveInjector, NgZone } from "@angular/core";
import { Subject } from "rxjs";
import { ToastrOptions } from "./toastr.options";
import { Toastr } from "./toastr";
import { ToastrComponent } from "./toastr.component";
/**
 * @record
 * @template T
 */
export function IImplicitContext() { }
function IImplicitContext_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    IImplicitContext.prototype.$implicit;
}
var ToastrManager = /** @class */ (function () {
    function ToastrManager(_applicationRef, _componentFactoryResolver, _injector, ngZone, options) {
        this._applicationRef = _applicationRef;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._injector = _injector;
        this.ngZone = ngZone;
        this.options = options;
        this.toastrContainers = [];
        this.index = 0;
        this.toastClicked = new Subject();
    }
    /**
     * @template T
     * @param {?} type
     * @param {?=} providers
     * @return {?}
     */
    ToastrManager.prototype.createToastrComponent = /**
     * @template T
     * @param {?} type
     * @param {?=} providers
     * @return {?}
     */
    function (type, providers) {
        if (providers === void 0) { providers = []; }
        // Resolve a factory for creating components of type `type`.
        var /** @type {?} */ factory = this._componentFactoryResolver.resolveComponentFactory(/** @type {?} */ (type));
        // Resolve and create an injector with the specified providers.
        var /** @type {?} */ _providers = ReflectiveInjector.resolve(providers);
        var /** @type {?} */ injector = ReflectiveInjector.fromResolvedProviders(_providers, this._injector);
        // Create new node for inserting into document.
        var /** @type {?} */ newNode = document.createElement("div");
        newNode.id = "toastr-node-" + Math.floor(Math.random() * 200);
        document.querySelector("body").appendChild(newNode);
        // Create a component using the previously resolved factory & injector.
        var /** @type {?} */ componentRef = factory.create(injector, [], newNode);
        // Insert new component node into document body.
        this.attachToApplication(componentRef);
        return componentRef;
    };
    /**
     * @template T
     * @param {?} componentRef
     * @return {?}
     */
    ToastrManager.prototype.attachToApplication = /**
     * @template T
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        this._applicationRef.attachView(componentRef.hostView);
    };
    /**
     * @template T
     * @param {?} componentRef
     * @return {?}
     */
    ToastrManager.prototype.detachFromApplication = /**
     * @template T
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        this._applicationRef.detachView(componentRef.hostView);
    };
    /**
     * @param {?} position
     * @return {?}
     */
    ToastrManager.prototype.isToastrContainerExist = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        if (this.toastrContainers.length > 0) {
            var /** @type {?} */ i = this.toastrContainers.findIndex(function (x) { return x.position === position; });
            if (i > -1) {
                return true;
            }
        }
        return false;
    };
    /**
     * @param {?} position
     * @return {?}
     */
    ToastrManager.prototype.getToastrComponentRef = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        if (this.toastrContainers.length > 0) {
            var /** @type {?} */ container = this.toastrContainers.find(function (x) { return x.position === position; });
            return container ? container.ref : null;
        }
        return null;
    };
    /**
     * @param {?} toast
     * @return {?}
     */
    ToastrManager.prototype.createTimeout = /**
     * @param {?} toast
     * @return {?}
     */
    function (toast) {
        var _this = this;
        var /** @type {?} */ task;
        this.ngZone.runOutsideAngular(function () {
            task = setTimeout(function () { return _this.ngZone.run(function () { return _this.clearToast(toast); }); }, toast.config.toastTimeout);
        });
        return task.toString();
    };
    /**
     * @param {?} toast
     * @param {?=} options
     * @return {?}
     */
    ToastrManager.prototype.setupToast = /**
     * @param {?} toast
     * @param {?=} options
     * @return {?}
     */
    function (toast, options) {
        toast.id = ++this.index;
        if (options && options.hasOwnProperty("toastTimeout")) {
            options.dismiss = "auto";
        }
        var /** @type {?} */ customConfig = Object.assign({}, this.options, options || {});
        Object.keys(toast.config).forEach(function (k) {
            if (customConfig.hasOwnProperty(k)) {
                toast.config[k] = customConfig[k];
            }
        });
        if (toast.config.dismiss === "auto") {
            toast.timeoutId = this.createTimeout(toast);
        }
        toast.toastrManager = this; // bind ToastrManager instance to Toastr
        var /** @type {?} */ position = toast.config.position;
        if (this.isToastrContainerExist(position)) {
            this.getToastrComponentRef(position).instance.addToastr(toast);
        }
        return toast;
    };
    /**
     * @param {?} toast
     * @return {?}
     */
    ToastrManager.prototype.clearToast = /**
     * @param {?} toast
     * @return {?}
     */
    function (toast) {
        var /** @type {?} */ position = toast.config.position;
        if (this.isToastrContainerExist(position)) {
            var /** @type {?} */ instance = this.getToastrComponentRef(position).instance;
            instance.removeToastr(toast);
        }
    };
    /**
     * @return {?}
     */
    ToastrManager.prototype.clearAllToasts = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.toastrContainers.length > 0) {
            this.toastrContainers.forEach(function (component) {
                console.log(component);
                var /** @type {?} */ ref = component.ref;
                var /** @type {?} */ instance = component.ref.instance;
                instance.removeAllToasts();
                _this.dispose(ref);
            });
        }
    };
    /**
     * @param {?} toastrComponentRef
     * @return {?}
     */
    ToastrManager.prototype.dispose = /**
     * @param {?} toastrComponentRef
     * @return {?}
     */
    function (toastrComponentRef) {
        if (toastrComponentRef) {
            var /** @type {?} */ i = this.toastrContainers.findIndex(function (x) { return x.position === toastrComponentRef.instance.position; });
            if (i > -1) {
                this.toastrContainers.splice(i, 1);
            }
            this.detachFromApplication(toastrComponentRef);
        }
    };
    /**
     * @param {?} toast
     * @return {?}
     */
    ToastrManager.prototype._onToastClicked = /**
     * @param {?} toast
     * @return {?}
     */
    function (toast) {
        this.toastClicked.next(toast);
        if (toast.config.dismiss !== "controlled") {
            this.clearToast(toast);
        }
    };
    /**
     * @param {?} toast
     * @return {?}
     */
    ToastrManager.prototype.dismissToastr = /**
     * @param {?} toast
     * @return {?}
     */
    function (toast) {
        this.clearToast(toast);
    };
    /**
     * @return {?}
     */
    ToastrManager.prototype.dismissAllToastr = /**
     * @return {?}
     */
    function () {
        this.clearAllToasts();
    };
    /**
     * @return {?}
     */
    ToastrManager.prototype.onClickToast = /**
     * @return {?}
     */
    function () {
        return this.toastClicked.asObservable();
    };
    /**
     * @param {?} toastr
     * @param {?=} options
     * @return {?}
     */
    ToastrManager.prototype.showToastr = /**
     * @param {?} toastr
     * @param {?=} options
     * @return {?}
     */
    function (toastr, options) {
        var _this = this;
        var /** @type {?} */ opt = Object.assign({}, this.options, options);
        return new Promise(function (resolve, reject) {
            if (!_this.isToastrContainerExist(opt.position)) {
                var /** @type {?} */ providers = [{ provide: ToastrOptions, useValue: opt }];
                var /** @type {?} */ toastrComponentRef_1 = _this.createToastrComponent(ToastrComponent, providers);
                toastrComponentRef_1.instance.onToastClicked = function (toast) {
                    _this._onToastClicked(toast);
                };
                toastrComponentRef_1.instance.onExit().subscribe(function () {
                    _this.dispose(toastrComponentRef_1);
                });
                _this.toastrContainers.push({
                    position: opt.position,
                    ref: toastrComponentRef_1
                });
            }
            resolve(_this.setupToast(toastr, options));
        });
    };
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    ToastrManager.prototype.errorToastr = /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    function (message, title, options) {
        var /** @type {?} */ data = options && options.data ? options.data : null;
        var /** @type {?} */ toast = new Toastr("error", message, title, data);
        this.showToastr(toast, options);
        return toast;
    };
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    ToastrManager.prototype.infoToastr = /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    function (message, title, options) {
        var /** @type {?} */ data = options && options.data ? options.data : null;
        var /** @type {?} */ toast = new Toastr("info", message, title, data);
        this.showToastr(toast, options);
        return toast;
    };
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    ToastrManager.prototype.successToastr = /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    function (message, title, options) {
        var /** @type {?} */ data = options && options.data ? options.data : null;
        var /** @type {?} */ toast = new Toastr("success", message, title, data);
        this.showToastr(toast, options);
        return toast;
    };
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    ToastrManager.prototype.warningToastr = /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    function (message, title, options) {
        var /** @type {?} */ data = options && options.data ? options.data : null;
        var /** @type {?} */ toast = new Toastr("warning", message, title, data);
        this.showToastr(toast, options);
        return toast;
    };
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    ToastrManager.prototype.customToastr = /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    function (message, title, options) {
        var /** @type {?} */ data = options && options.data ? options.data : null;
        var /** @type {?} */ toast = new Toastr("custom", message, title, data);
        this.showToastr(toast, options);
        return toast;
    };
    ToastrManager.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ToastrManager.ctorParameters = function () { return [
        { type: ApplicationRef },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: NgZone },
        { type: ToastrOptions }
    ]; };
    return ToastrManager;
}());
export { ToastrManager };
function ToastrManager_tsickle_Closure_declarations() {
    /** @type {?} */
    ToastrManager.prototype.toastrContainers;
    /** @type {?} */
    ToastrManager.prototype.index;
    /** @type {?} */
    ToastrManager.prototype.toastClicked;
    /** @type {?} */
    ToastrManager.prototype._applicationRef;
    /** @type {?} */
    ToastrManager.prototype._componentFactoryResolver;
    /** @type {?} */
    ToastrManager.prototype._injector;
    /** @type {?} */
    ToastrManager.prototype.ngZone;
    /** @type {?} */
    ToastrManager.prototype.options;
}

//# sourceMappingURL=data:application/json;base64,