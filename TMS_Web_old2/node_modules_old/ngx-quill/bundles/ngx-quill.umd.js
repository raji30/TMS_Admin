(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('ngx-quill', ['exports', '@angular/common', '@angular/core', '@angular/forms'], factory) :
    (factory((global['ngx-quill'] = {}),global.ng.common,global.ng.core,global.ng.forms));
}(this, (function (exports,common,core,forms) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ Quill = undefined;
    var QuillEditorComponent = (function () {
        function QuillEditorComponent(elementRef, doc, platformId, renderer, zone) {
            var _this = this;
            this.elementRef = elementRef;
            this.doc = doc;
            this.platformId = platformId;
            this.renderer = renderer;
            this.zone = zone;
            this.emptyArray = [];
            this.defaultModules = {
                toolbar: [
                    ['bold', 'italic', 'underline', 'strike'],
                    // toggled buttons
                    ['blockquote', 'code-block'],
                    [{ header: 1 }, { header: 2 }],
                    // custom button values
                    [{ list: 'ordered' }, { list: 'bullet' }],
                    [{ script: 'sub' }, { script: 'super' }],
                    // superscript/subscript
                    [{ indent: '-1' }, { indent: '+1' }],
                    // outdent/indent
                    [{ direction: 'rtl' }],
                    // text direction
                    [{ size: ['small', false, 'large', 'huge'] }],
                    // custom dropdown
                    [{ header: [1, 2, 3, 4, 5, 6, false] }],
                    [
                        { color: this.emptyArray.slice() },
                        { background: this.emptyArray.slice() }
                    ],
                    // dropdown with defaults from theme
                    [{ font: this.emptyArray.slice() }],
                    [{ align: this.emptyArray.slice() }],
                    ['clean'],
                    // remove formatting button
                    ['link', 'image', 'video'] // link and image, video
                ]
            };
            this.format = 'html';
            this.style = {};
            this.strict = true;
            this.customOptions = [];
            this.onEditorCreated = new core.EventEmitter();
            this.onContentChanged = new core.EventEmitter();
            this.onSelectionChanged = new core.EventEmitter();
            this.valueGetter = function (quillEditor, editorElement) {
                var /** @type {?} */ html = editorElement.children[0].innerHTML;
                if (html === '<p><br></p>' || html === '<div><br><div>') {
                    html = null;
                }
                var /** @type {?} */ modelValue = html;
                if (_this.format === 'text') {
                    modelValue = quillEditor.getText();
                }
                else if (_this.format === 'object') {
                    modelValue = quillEditor.getContents();
                }
                else if (_this.format === 'json') {
                    try {
                        modelValue = JSON.stringify(quillEditor.getContents());
                    }
                    catch (e) {
                        modelValue = quillEditor.getText();
                    }
                }
                return modelValue;
            };
            this.valueSetter = function (quillEditor, value, format) {
                if (_this.format === 'html') {
                    return quillEditor.clipboard.convert(value);
                }
                else if (_this.format === 'json') {
                    try {
                        return JSON.parse(value);
                    }
                    catch (e) {
                        return value;
                    }
                }
                return value;
            };
            this.onModelChange = function () { };
            this.onModelTouched = function () { };
        }
        /**
         * @return {?}
         */
        QuillEditorComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (common.isPlatformServer(this.platformId)) {
                    return;
                }
                if (!Quill) {
                    Quill = require('quill');
                }
                var /** @type {?} */ toolbarElem = this.elementRef.nativeElement.querySelector('[quill-editor-toolbar]');
                var /** @type {?} */ modules = this.modules || this.defaultModules;
                var /** @type {?} */ placeholder = 'Insert text here ...';
                if (this.placeholder !== null && this.placeholder !== undefined) {
                    placeholder = this.placeholder.trim();
                }
                if (toolbarElem) {
                    modules['toolbar'] = toolbarElem;
                }
                this.elementRef.nativeElement.insertAdjacentHTML('beforeend', '<div quill-editor-element></div>');
                this.editorElem = this.elementRef.nativeElement.querySelector('[quill-editor-element]');
                if (this.style) {
                    Object.keys(this.style).forEach(function (key) {
                        _this.renderer.setStyle(_this.editorElem, key, _this.style[key]);
                    });
                }
                this.customOptions.forEach(function (customOption) {
                    var /** @type {?} */ newCustomOption = Quill.import(customOption.import);
                    newCustomOption.whitelist = customOption.whitelist;
                    Quill.register(newCustomOption, true);
                });
                this.quillEditor = new Quill(this.editorElem, {
                    modules: modules,
                    placeholder: placeholder,
                    readOnly: this.readOnly || false,
                    theme: this.theme || 'snow',
                    formats: this.formats,
                    bounds: this.bounds ? (this.bounds === 'self' ? this.editorElem : this.bounds) : this.doc.body,
                    strict: this.strict,
                    scrollingContainer: this.scrollingContainer
                });
                if (this.content) {
                    if (this.format === 'object') {
                        this.quillEditor.setContents(this.content, 'silent');
                    }
                    else if (this.format === 'text') {
                        this.quillEditor.setText(this.content, 'silent');
                    }
                    else if (this.format === 'json') {
                        try {
                            this.quillEditor.setContents(JSON.parse(this.content), 'silent');
                        }
                        catch (e) {
                            this.quillEditor.setText(this.content, 'silent');
                        }
                    }
                    else {
                        var /** @type {?} */ contents = this.quillEditor.clipboard.convert(this.content);
                        this.quillEditor.setContents(contents, 'silent');
                    }
                    this.quillEditor.history.clear();
                }
                this.onEditorCreated.emit(this.quillEditor);
                // mark model as touched if editor lost focus
                this.selectionChangeEvent = this.quillEditor.on('selection-change', function (range, oldRange, source) {
                    _this.zone.run(function () {
                        _this.onSelectionChanged.emit({
                            editor: _this.quillEditor,
                            range: range,
                            oldRange: oldRange,
                            source: source
                        });
                        if (!range) {
                            _this.onModelTouched();
                        }
                    });
                });
                // update model if text changes
                this.textChangeEvent = this.quillEditor.on('text-change', function (delta, oldDelta, source) {
                    var /** @type {?} */ text = _this.quillEditor.getText();
                    var /** @type {?} */ content = _this.quillEditor.getContents();
                    var /** @type {?} */ html = _this.editorElem.children[0].innerHTML;
                    if (html === '<p><br></p>' || html === '<div><br><div>') {
                        html = null;
                    }
                    _this.zone.run(function () {
                        _this.onModelChange(_this.valueGetter(_this.quillEditor, _this.editorElem));
                        _this.onContentChanged.emit({
                            editor: _this.quillEditor,
                            html: html,
                            text: text,
                            content: content,
                            delta: delta,
                            oldDelta: oldDelta,
                            source: source
                        });
                    });
                });
            };
        /**
         * @return {?}
         */
        QuillEditorComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.selectionChangeEvent) {
                    this.selectionChangeEvent.removeListener('selection-change');
                }
                if (this.textChangeEvent) {
                    this.textChangeEvent.removeListener('text-change');
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        QuillEditorComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this.quillEditor) {
                    return;
                }
                if (changes['readOnly']) {
                    this.quillEditor.enable(!changes['readOnly'].currentValue);
                }
                if (changes['placeholder']) {
                    this.quillEditor.root.dataset.placeholder =
                        changes['placeholder'].currentValue;
                }
            };
        /**
         * @param {?} currentValue
         * @return {?}
         */
        QuillEditorComponent.prototype.writeValue = /**
         * @param {?} currentValue
         * @return {?}
         */
            function (currentValue) {
                this.content = currentValue;
                if (this.quillEditor) {
                    if (currentValue) {
                        if (this.format === 'text') {
                            this.quillEditor.setText(currentValue);
                        }
                        else {
                            this.quillEditor.setContents(this.valueSetter(this.quillEditor, this.content, this.format));
                        }
                        return;
                    }
                    this.quillEditor.setText('');
                }
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        QuillEditorComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        QuillEditorComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelTouched = fn;
            };
        /**
         * @return {?}
         */
        QuillEditorComponent.prototype.validate = /**
         * @return {?}
         */
            function () {
                if (!this.quillEditor) {
                    return null;
                }
                var /** @type {?} */ err = {}, /** @type {?} */ valid = true;
                var /** @type {?} */ textLength = this.quillEditor.getText().trim().length;
                if (this.minLength && textLength && textLength < this.minLength) {
                    err.minLengthError = {
                        given: textLength,
                        minLength: this.minLength
                    };
                    valid = false;
                }
                if (this.maxLength && textLength > this.maxLength) {
                    err.maxLengthError = {
                        given: textLength,
                        maxLength: this.maxLength
                    };
                    valid = false;
                }
                if (this.required && !textLength) {
                    err.requiredError = {
                        empty: true
                    };
                    valid = false;
                }
                return valid ? null : err;
            };
        QuillEditorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'quill-editor',
                        template: "\n  <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return QuillEditorComponent; }),
                                multi: true
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef(function () { return QuillEditorComponent; }),
                                multi: true
                            }
                        ],
                        encapsulation: core.ViewEncapsulation.None
                    }] }
        ];
        /** @nocollapse */
        QuillEditorComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] },] },
                { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },
                { type: core.Renderer2, },
                { type: core.NgZone, },
            ];
        };
        QuillEditorComponent.propDecorators = {
            "format": [{ type: core.Input },],
            "theme": [{ type: core.Input },],
            "modules": [{ type: core.Input },],
            "readOnly": [{ type: core.Input },],
            "placeholder": [{ type: core.Input },],
            "maxLength": [{ type: core.Input },],
            "minLength": [{ type: core.Input },],
            "required": [{ type: core.Input },],
            "formats": [{ type: core.Input },],
            "style": [{ type: core.Input },],
            "strict": [{ type: core.Input },],
            "scrollingContainer": [{ type: core.Input },],
            "bounds": [{ type: core.Input },],
            "customOptions": [{ type: core.Input },],
            "onEditorCreated": [{ type: core.Output },],
            "onContentChanged": [{ type: core.Output },],
            "onSelectionChanged": [{ type: core.Output },],
            "valueGetter": [{ type: core.Input },],
            "valueSetter": [{ type: core.Input },],
        };
        return QuillEditorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var QuillModule = (function () {
        function QuillModule() {
        }
        QuillModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            QuillEditorComponent
                        ],
                        imports: [],
                        exports: [QuillEditorComponent],
                        providers: []
                    },] }
        ];
        return QuillModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.QuillModule = QuillModule;
    exports.QuillEditorComponent = QuillEditorComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,