{"version":3,"sources":["ng://angular-calendar/modules/common/util.ts","ng://angular-calendar/modules/common/calendar-event-actions.component.ts","ng://angular-calendar/modules/common/calendar-event-title.component.ts","ng://angular-calendar/modules/common/calendar-tooltip.directive.ts","ng://angular-calendar/modules/common/calendar-previous-view.directive.ts","ng://angular-calendar/modules/common/calendar-next-view.directive.ts","ng://angular-calendar/modules/common/calendar-today.directive.ts","ng://angular-calendar/modules/common/calendar-angular-date-formatter.provider.ts","ng://angular-calendar/modules/common/calendar-date-formatter.provider.ts","ng://angular-calendar/modules/common/calendar-date.pipe.ts","ng://angular-calendar/modules/common/calendar-event-title-formatter.provider.ts","ng://angular-calendar/modules/common/calendar-event-title.pipe.ts","ng://angular-calendar/modules/common/click.directive.ts","ng://angular-calendar/modules/common/calendar-utils.provider.ts","ng://angular-calendar/modules/common/calendar-moment-date-formatter.provider.ts","ng://angular-calendar/modules/common/calendar-native-date-formatter.provider.ts","ng://angular-calendar/modules/common/calendar-common.module.ts","ng://angular-calendar/modules/month/calendar-month-view.component.ts","ng://angular-calendar/modules/month/calendar-month-view-header.component.ts","ng://angular-calendar/modules/month/calendar-month-cell.component.ts","ng://angular-calendar/modules/month/calendar-open-day-events.component.ts","ng://angular-calendar/modules/month/calendar-month.module.ts","ng://angular-calendar/modules/common/calendar-drag-helper.provider.ts","ng://angular-calendar/modules/common/calendar-resize-helper.provider.ts","ng://angular-calendar/modules/week/calendar-week-view.component.ts","ng://angular-calendar/modules/week/calendar-week-view-header.component.ts","ng://angular-calendar/modules/week/calendar-week-view-event.component.ts","ng://angular-calendar/modules/week/calendar-week.module.ts","ng://angular-calendar/modules/day/calendar-day-view.component.ts","ng://angular-calendar/modules/day/calendar-all-day-event.component.ts","ng://angular-calendar/modules/day/calendar-day-view-hour-segment.component.ts","ng://angular-calendar/modules/day/calendar-day-view-event.component.ts","ng://angular-calendar/modules/day/calendar-day.module.ts","ng://angular-calendar/modules/calendar.module.ts"],"names":["validateEvents","events","validateEventsWithoutLog","args","_i","arguments","length","console","warn","apply","tslib_1","__spread","isInside","outer","inner","left","right","top","bottom","trackByEventId","index","event","id","trackByWeekDayHeaderDate","day","date","toISOString","trackByIndex","CalendarEventActionsComponent","Component","selector","template","Input","CalendarEventTitleComponent","CalendarTooltipWindowComponent","CalendarTooltipDirective","elementRef","injector","renderer","componentFactoryResolver","viewContainerRef","document","this","Positioning","tooltipFactory","resolveComponentFactory","prototype","ngOnDestroy","hide","onMouseOver","show","onMouseOut","tooltipRef","contents","createComponent","instance","placement","customTemplate","appendToBody","body","appendChild","location","nativeElement","requestAnimationFrame","_this","positionTooltip","remove","indexOf","hostView","targetPosition","positioning","positionElements","children","elm","setStyle","Directive","ElementRef","Injector","Renderer2","ComponentFactoryResolver","ViewContainerRef","Inject","DOCUMENT","HostListener","EventEmitter","CalendarPreviousViewDirective","onClick","subFn","subDays","week","subWeeks","month","subMonths","view","viewDateChange","emit","viewDate","Output","CalendarNextViewDirective","addFn","addDays","addWeeks","addMonths","CalendarTodayDirective","startOfToday","CalendarAngularDateFormatter","monthViewColumnHeader","_a","locale","DatePipe","transform","monthViewDayNumber","monthViewTitle","weekViewColumnHeader","weekViewColumnSubHeader","weekViewTitle","year","getISOWeek","dayViewHour","dayViewTitle","CalendarDateFormatter","_super","tslib_1.__extends","CalendarDatePipe","dateFormatter","method","Pipe","name","LOCALE_ID","CalendarEventTitleFormatter","title","monthTooltip","weekTooltip","dayTooltip","CalendarEventTitlePipe","calendarEventTitle","titleType","ClickDirective","ngOnInit","eventName","window","removeListener","listen","click","next","CalendarUtils","getMonthView","getWeekViewHeader","getWeekView","getDayView","getDayViewHourGrid","Injectable","MOMENT","InjectionToken","CalendarMomentDateFormatter","moment","format","CalendarNativeDateFormatter","Intl","DateTimeFormat","weekday","hour","CalendarCommonModule","forRoot","config","ngModule","providers","DraggableHelper","eventTitleFormatter","utils","NgModule","declarations","imports","CommonModule","exports","entryComponents","CalendarMonthViewComponent","cdr","refresh","refreshSubscription","subscribe","refreshAll","markForCheck","ngOnChanges","changes","excludeDays","weekendDays","refreshHeader","refreshBody","activeDayIsOpen","checkActiveDayIsOpen","unsubscribe","toggleDayHighlight","isHighlighted","days","forEach","backgroundColor","color","secondary","eventDropped","newEnd","getYear","getMonth","getDate","newStart","setDate","setMonth","setYear","start","end","secondsDiff","differenceInSeconds","addSeconds","eventTimesChanged","handleDayClick","clickEvent","target","classList","contains","dayClicked","columnHeaders","weekStartsOn","excluded","emitBeforeViewRender","openDay","find","isSameDay","openRowIndex","Math","floor","totalDaysVisibleInWeek","beforeViewRender","header","period","ChangeDetectorRef","CalendarMonthViewHeaderComponent","CalendarMonthCellComponent","host","class","[class.cal-past]","[class.cal-today]","[class.cal-future]","[class.cal-weekend]","[class.cal-in-month]","[class.cal-out-month]","[class.cal-has-events]","[class.cal-open]","[style.backgroundColor]","CalendarOpenDayEventsComponent","animations","trigger","transition","style","height","overflow","animate","CalendarMonthModule","DragAndDropModule","CalendarDragHelper","dragContainerElement","draggableElement","startPosition","getBoundingClientRect","validateDrag","x","y","newRect","Object","assign","CalendarResizeHelper","resizeContainerElement","minWidth","validateResize","rectangle","width","CalendarWeekViewComponent","Map","weekEvent","resizeStarted","weekViewContainer","resizeEvent","currentResizes","set","originalOffset","offset","originalSpan","span","edge","edges","dayColumnWidth","getDayColumnWidth","resizeHelper","resizing","dayWidth","currentResize","get","diff","round","resizeEnded","daysDiff","delete","eventDragged","draggedByPx","daysDragged","eventRowContainer","offsetWidth","dragStart","dragHelper","size","precision","absolutePositionedEvents","CalendarWeekViewHeaderComponent","CalendarWeekViewEventComponent","CalendarWeekModule","ResizableModule","CalendarDayViewComponent","hourSegmentHeight","dayEvent","segments","segment","dayStartHour","dayStartMinute","dayEndHour","dayEndMinute","hourSegments","refreshHourGrid","eventWidth","refreshView","dropEvent","dropData","dayViewContainer","originalTop","originalHeight","pixelsMoved","minutesMoved","addMinutes","draggedInPixels","hours","dayStart","minute","dayEnd","segmentHeight","hourGrid","CalendarAllDayEventComponent","CalendarDayViewHourSegmentComponent","CalendarDayViewEventComponent","CalendarDayModule","CalendarModule"],"mappings":"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","sourcesContent":["import {\n  CalendarEvent,\n  validateEvents as validateEventsWithoutLog,\n  WeekDay\n} from 'calendar-utils';\n\nexport const validateEvents = (events: CalendarEvent[]) => {\n  const warn = (...args) => console.warn('angular-calendar', ...args);\n  return validateEventsWithoutLog(events, warn);\n};\n\nexport function isInside(outer: ClientRect, inner: ClientRect): boolean {\n  return (\n    outer.left <= inner.left &&\n    inner.left <= outer.right &&\n    outer.left <= inner.right &&\n    inner.right <= outer.right &&\n    outer.top <= inner.top &&\n    inner.top <= outer.bottom &&\n    outer.top <= inner.bottom &&\n    inner.bottom <= outer.bottom\n  );\n}\n\nexport const trackByEventId = (index: number, event: CalendarEvent) =>\n  event.id ? event.id : event;\n\nexport const trackByWeekDayHeaderDate = (index: number, day: WeekDay) =>\n  day.date.toISOString();\n\nexport const trackByIndex = (index: number) => index;\n","import { Component, Input } from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\nimport { trackByIndex } from './util';\n\n@Component({\n  selector: 'mwl-calendar-event-actions',\n  template: `\n    <span *ngIf=\"event.actions\" class=\"cal-event-actions\">\n      <a\n        class=\"cal-event-action\"\n        href=\"javascript:;\"\n        *ngFor=\"let action of event.actions; trackBy:trackByIndex\"\n        (mwlClick)=\"action.onClick({event: event})\"\n        [ngClass]=\"action.cssClass\"\n        [innerHtml]=\"action.label\">\n      </a>\n    </span>\n  `\n})\nexport class CalendarEventActionsComponent {\n  @Input() event: CalendarEvent;\n  trackByIndex = trackByIndex;\n}\n","import { Component, Input, TemplateRef } from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\n\n@Component({\n  selector: 'mwl-calendar-event-title',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-event=\"event\"\n      let-view=\"view\">\n      <a\n        class=\"cal-event-title\"\n        href=\"javascript:;\"\n        [innerHTML]=\"event.title | calendarEventTitle:view:event\">\n      </a>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        event: event,\n        view: view\n      }\">\n    </ng-template>\n  `\n})\nexport class CalendarEventTitleComponent {\n  @Input() event: CalendarEvent;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() view: string;\n}\n","import {\n  Directive,\n  Component,\n  HostListener,\n  OnDestroy,\n  Input,\n  ComponentRef,\n  Injector,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  ElementRef,\n  ComponentFactory,\n  Inject,\n  Renderer2,\n  TemplateRef\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Positioning } from 'positioning';\nimport { CalendarEvent } from 'calendar-utils';\n\n@Component({\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-contents=\"contents\"\n      let-placement=\"placement\"\n      let-event=\"event\">\n      <div class=\"cal-tooltip\" [ngClass]=\"'cal-tooltip-' + placement\">\n        <div class=\"cal-tooltip-arrow\"></div>\n        <div class=\"cal-tooltip-inner\" [innerHtml]=\"contents\"></div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        contents: contents,\n        placement: placement,\n        event: event\n      }\">\n    </ng-template>\n  `\n})\nexport class CalendarTooltipWindowComponent {\n  @Input() contents: string;\n\n  @Input() placement: string;\n\n  @Input() event: CalendarEvent;\n\n  @Input() customTemplate: TemplateRef<any>;\n}\n\n@Directive({\n  selector: '[mwlCalendarTooltip]'\n})\nexport class CalendarTooltipDirective implements OnDestroy {\n  @Input('mwlCalendarTooltip') contents: string; // tslint:disable-line no-input-rename\n\n  @Input('tooltipPlacement') placement: string = 'top'; // tslint:disable-line no-input-rename\n\n  @Input('tooltipTemplate') customTemplate: TemplateRef<any>; // tslint:disable-line no-input-rename\n\n  @Input('tooltipEvent') event: CalendarEvent; // tslint:disable-line no-input-rename\n\n  @Input('tooltipAppendToBody') appendToBody: boolean; // tslint:disable-line no-input-rename\n\n  private tooltipFactory: ComponentFactory<CalendarTooltipWindowComponent>;\n  private tooltipRef: ComponentRef<CalendarTooltipWindowComponent>;\n  private positioning: Positioning = new Positioning();\n\n  constructor(\n    private elementRef: ElementRef,\n    private injector: Injector,\n    private renderer: Renderer2,\n    componentFactoryResolver: ComponentFactoryResolver,\n    private viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private document //tslint:disable-line\n  ) {\n    this.tooltipFactory = componentFactoryResolver.resolveComponentFactory(\n      CalendarTooltipWindowComponent\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.hide();\n  }\n\n  @HostListener('mouseenter')\n  onMouseOver(): void {\n    this.show();\n  }\n\n  @HostListener('mouseleave')\n  onMouseOut(): void {\n    this.hide();\n  }\n\n  private show(): void {\n    if (!this.tooltipRef && this.contents) {\n      this.tooltipRef = this.viewContainerRef.createComponent(\n        this.tooltipFactory,\n        0,\n        this.injector,\n        []\n      );\n      this.tooltipRef.instance.contents = this.contents;\n      this.tooltipRef.instance.placement = this.placement;\n      this.tooltipRef.instance.customTemplate = this.customTemplate;\n      this.tooltipRef.instance.event = this.event;\n      if (this.appendToBody) {\n        this.document.body.appendChild(this.tooltipRef.location.nativeElement);\n      }\n      requestAnimationFrame(() => {\n        this.positionTooltip();\n      });\n    }\n  }\n\n  private hide(): void {\n    if (this.tooltipRef) {\n      this.viewContainerRef.remove(\n        this.viewContainerRef.indexOf(this.tooltipRef.hostView)\n      );\n      this.tooltipRef = null;\n    }\n  }\n\n  private positionTooltip(): void {\n    if (this.tooltipRef) {\n      const targetPosition: ClientRect = this.positioning.positionElements(\n        this.elementRef.nativeElement,\n        this.tooltipRef.location.nativeElement.children[0],\n        this.placement,\n        this.appendToBody\n      );\n\n      const elm: HTMLElement = this.tooltipRef.location.nativeElement\n        .children[0];\n\n      this.renderer.setStyle(elm, 'top', `${targetPosition.top}px`);\n      this.renderer.setStyle(elm, 'left', `${targetPosition.left}px`);\n    }\n  }\n}\n","import {\n  Directive,\n  HostListener,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport subDays from 'date-fns/sub_days/index';\nimport subWeeks from 'date-fns/sub_weeks/index';\nimport subMonths from 'date-fns/sub_months/index';\n\n/**\n * Change the view date to the previous view. For example:\n *\n * ```typescript\n * <button\n *  mwlCalendarPreviousView\n *  [(viewDate)]=\"viewDate\"\n *  [view]=\"view\">\n *  Previous\n * </button>\n * ```\n */\n@Directive({\n  selector: '[mwlCalendarPreviousView]'\n})\nexport class CalendarPreviousViewDirective {\n  /**\n   * The current view\n   */\n  @Input() view: string;\n\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * Called when the view date is changed\n   */\n  @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  @HostListener('click')\n  onClick(): void {\n    const subFn: any = {\n      day: subDays,\n      week: subWeeks,\n      month: subMonths\n    }[this.view];\n\n    this.viewDateChange.emit(subFn(this.viewDate, 1));\n  }\n}\n","import {\n  Directive,\n  HostListener,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport addDays from 'date-fns/add_days/index';\nimport addWeeks from 'date-fns/add_weeks/index';\nimport addMonths from 'date-fns/add_months/index';\n\n/**\n * Change the view date to the next view. For example:\n *\n * ```typescript\n * <button\n *  mwlCalendarNextView\n *  [(viewDate)]=\"viewDate\"\n *  [view]=\"view\">\n *  Next\n * </button>\n * ```\n */\n@Directive({\n  selector: '[mwlCalendarNextView]'\n})\nexport class CalendarNextViewDirective {\n  /**\n   * The current view\n   */\n  @Input() view: string;\n\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * Called when the view date is changed\n   */\n  @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  @HostListener('click')\n  onClick(): void {\n    const addFn: any = {\n      day: addDays,\n      week: addWeeks,\n      month: addMonths\n    }[this.view];\n\n    this.viewDateChange.emit(addFn(this.viewDate, 1));\n  }\n}\n","import {\n  Directive,\n  HostListener,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport startOfToday from 'date-fns/start_of_today/index';\n\n/**\n * Change the view date to the current day. For example:\n *\n * ```typescript\n * <button\n *  mwlCalendarToday\n *  [(viewDate)]=\"viewDate\">\n *  Today\n * </button>\n * ```\n */\n@Directive({\n  selector: '[mwlCalendarToday]'\n})\nexport class CalendarTodayDirective {\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * Called when the view date is changed\n   */\n  @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  @HostListener('click')\n  onClick(): void {\n    this.viewDateChange.emit(startOfToday());\n  }\n}\n","import {\n  CalendarDateFormatterInterface,\n  DateFormatterParams\n} from './calendar-date-formatter.interface';\nimport getISOWeek from 'date-fns/get_iso_week/index';\nimport { DatePipe } from '@angular/common';\n\n/**\n * This will use the angular date pipe to do all date formatting. It is the default date formatter used by the calendar.\n */\nexport class CalendarAngularDateFormatter\n  implements CalendarDateFormatterInterface {\n  /**\n   * The month view header week day labels\n   */\n  public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'EEEE', null, locale);\n  }\n\n  /**\n   * The month view cell day number\n   */\n  public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'd', null, locale);\n  }\n\n  /**\n   * The month view title\n   */\n  public monthViewTitle({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'MMMM y', null, locale);\n  }\n\n  /**\n   * The week view header week day labels\n   */\n  public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'EEEE', null, locale);\n  }\n\n  /**\n   * The week view sub header day and month labels\n   */\n  public weekViewColumnSubHeader({\n    date,\n    locale\n  }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'MMM d', null, locale);\n  }\n\n  /**\n   * The week view title\n   */\n  public weekViewTitle({ date, locale }: DateFormatterParams): string {\n    const year: string = new DatePipe(locale).transform(\n      date,\n      'y',\n      null,\n      locale\n    );\n    const weekNumber: number = getISOWeek(date);\n    return `Week ${weekNumber} of ${year}`;\n  }\n\n  /**\n   * The time formatting down the left hand side of the day view\n   */\n  public dayViewHour({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'h a', null, locale);\n  }\n\n  /**\n   * The day view title\n   */\n  public dayViewTitle({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(\n      date,\n      'EEEE, MMMM d, y',\n      null,\n      locale\n    );\n  }\n}\n","import { CalendarAngularDateFormatter } from './calendar-angular-date-formatter.provider';\n\n/**\n * This class is responsible for all formatting of dates. There are 3 implementations available, the `CalendarAngularDateFormatter` (default) which uses the angular date pipe to format dates, the `CalendarNativeDateFormatter` which will use the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl\" target=\"_blank\">Intl</a> API to format dates, or there is the `CalendarMomentDateFormatter` which uses <a href=\"http://momentjs.com/\" target=\"_blank\">moment</a>.\n *\n * If you wish, you may override any of the defaults via angulars DI. For example:\n *\n * ```typescript\n * import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\n * import { DatePipe } from '@angular/common';\n *\n * class CustomDateFormatter extends CalendarDateFormatter {\n *\n *   public monthViewColumnHeader({date, locale}: DateFormatterParams): string {\n *     return new DatePipe(locale).transform(date, 'EEE', locale); // use short week days\n *   }\n *\n * }\n *\n * // in your component that uses the calendar\n * providers: [{\n *   provide: CalendarDateFormatter,\n *   useClass: CustomDateFormatter\n * }]\n * ```\n */\nexport class CalendarDateFormatter extends CalendarAngularDateFormatter {}\n","import { Pipe, PipeTransform, LOCALE_ID, Inject } from '@angular/core';\nimport { CalendarDateFormatter } from './calendar-date-formatter.provider';\n\n/**\n * This pipe is primarily for rendering the current view title. Example usage:\n * ```typescript\n * // where `viewDate` is a `Date` and view is `'month' | 'week' | 'day'`\n * {{ viewDate | calendarDate:(view + 'ViewTitle'):'en' }}\n * ```\n */\n@Pipe({\n  name: 'calendarDate'\n})\nexport class CalendarDatePipe implements PipeTransform {\n  constructor(\n    private dateFormatter: CalendarDateFormatter,\n    @Inject(LOCALE_ID) private locale: string\n  ) {}\n\n  transform(date: Date, method: string, locale: string = this.locale): string {\n    return this.dateFormatter[method]({ date, locale });\n  }\n}\n","import { CalendarEvent } from 'calendar-utils';\n\n/**\n * This class is responsible for displaying all event titles within the calendar. You may override any of its methods via angulars DI to suit your requirements. For example:\n *\n * ```typescript\n * import { CalendarEventTitleFormatter, CalendarEvent } from 'angular-calendar';\n *\n * class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n *\n *   month(event: CalendarEvent): string {\n *     return `Custom prefix: ${event.title}`;\n *   }\n *\n * }\n *\n * // in your component\n * providers: [{\n *  provide: CalendarEventTitleFormatter,\n *  useClass: CustomEventTitleFormatter\n * }]\n * ```\n */\nexport class CalendarEventTitleFormatter {\n  /**\n   * The month view event title.\n   */\n  month(event: CalendarEvent): string {\n    return event.title;\n  }\n\n  /**\n   * The month view event tooltip. Return a falsey value from this to disable the tooltip.\n   */\n  monthTooltip(event: CalendarEvent): string {\n    return event.title;\n  }\n\n  /**\n   * The week view event title.\n   */\n  week(event: CalendarEvent): string {\n    return event.title;\n  }\n\n  /**\n   * The week view event tooltip. Return a falsey value from this to disable the tooltip.\n   */\n  weekTooltip(event: CalendarEvent): string {\n    return event.title;\n  }\n\n  /**\n   * The day view event title.\n   */\n  day(event: CalendarEvent): string {\n    return event.title;\n  }\n\n  /**\n   * The day view event tooltip. Return a falsey value from this to disable the tooltip.\n   */\n  dayTooltip(event: CalendarEvent): string {\n    return event.title;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\nimport { CalendarEventTitleFormatter } from './calendar-event-title-formatter.provider';\n\n@Pipe({\n  name: 'calendarEventTitle'\n})\nexport class CalendarEventTitlePipe implements PipeTransform {\n  constructor(private calendarEventTitle: CalendarEventTitleFormatter) {}\n\n  transform(title: string, titleType: string, event: CalendarEvent): string {\n    return this.calendarEventTitle[titleType](event);\n  }\n}\n","import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  Output,\n  EventEmitter\n} from '@angular/core';\n\n@Directive({\n  selector: '[mwlClick]'\n})\nexport class ClickDirective implements OnInit, OnDestroy {\n  @Output('mwlClick') click: EventEmitter<MouseEvent> = new EventEmitter(); // tslint:disable-line\n\n  private removeListener: () => void;\n\n  constructor(private renderer: Renderer2, private elm: ElementRef) {}\n\n  ngOnInit(): void {\n    const eventName: string =\n      typeof window !== 'undefined' && typeof window['Hammer'] !== 'undefined'\n        ? 'tap'\n        : 'click';\n    this.removeListener = this.renderer.listen(\n      this.elm.nativeElement,\n      eventName,\n      event => {\n        this.click.next(event);\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.removeListener();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  getMonthView,\n  GetMonthViewArgs,\n  MonthView,\n  getWeekViewHeader,\n  GetWeekViewHeaderArgs,\n  WeekDay,\n  getWeekView,\n  GetWeekViewArgs,\n  getDayView,\n  GetDayViewArgs,\n  DayView,\n  getDayViewHourGrid,\n  GetDayViewHourGridArgs,\n  DayViewHour,\n  WeekView\n} from 'calendar-utils';\n\n@Injectable()\nexport class CalendarUtils {\n  getMonthView(args: GetMonthViewArgs): MonthView {\n    return getMonthView(args);\n  }\n\n  getWeekViewHeader(args: GetWeekViewHeaderArgs): WeekDay[] {\n    return getWeekViewHeader(args);\n  }\n\n  getWeekView(args: GetWeekViewArgs): WeekView {\n    return getWeekView(args);\n  }\n\n  getDayView(args: GetDayViewArgs): DayView {\n    return getDayView(args);\n  }\n\n  getDayViewHourGrid(args: GetDayViewHourGridArgs): DayViewHour[] {\n    return getDayViewHourGrid(args);\n  }\n}\n","import { InjectionToken, Inject } from '@angular/core';\nimport {\n  CalendarDateFormatterInterface,\n  DateFormatterParams\n} from './calendar-date-formatter.interface';\n\nexport const MOMENT: InjectionToken<string> = new InjectionToken('Moment');\n\n/**\n * This will use <a href=\"http://momentjs.com/\" target=\"_blank\">moment</a> to do all date formatting. To use this class:\n *\n * ```typescript\n * import { CalendarDateFormatter, CalendarMomentDateFormatter, MOMENT } from 'angular-calendar';\n * import moment from 'moment';\n *\n * // in your component\n * provide: [{\n *   provide: MOMENT, useValue: moment\n * }, {\n *   provide: CalendarDateFormatter, useClass: CalendarMomentDateFormatter\n * }]\n *\n * ```\n */\nexport class CalendarMomentDateFormatter\n  implements CalendarDateFormatterInterface {\n  /**\n   * @hidden\n   */\n  constructor(@Inject(MOMENT) private moment: any) {}\n\n  /**\n   * The month view header week day labels\n   */\n  public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('dddd');\n  }\n\n  /**\n   * The month view cell day number\n   */\n  public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('D');\n  }\n\n  /**\n   * The month view title\n   */\n  public monthViewTitle({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('MMMM YYYY');\n  }\n\n  /**\n   * The week view header week day labels\n   */\n  public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('dddd');\n  }\n\n  /**\n   * The week view sub header day and month labels\n   */\n  public weekViewColumnSubHeader({\n    date,\n    locale\n  }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('D MMM');\n  }\n\n  /**\n   * The week view title\n   */\n  public weekViewTitle({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('[Week] W [of] YYYY');\n  }\n\n  /**\n   * The time formatting down the left hand side of the day view\n   */\n  public dayViewHour({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('ha');\n  }\n\n  /**\n   * The day view title\n   */\n  public dayViewTitle({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('dddd, D MMMM, YYYY');\n  }\n}\n","import {\n  CalendarDateFormatterInterface,\n  DateFormatterParams\n} from './calendar-date-formatter.interface';\nimport getISOWeek from 'date-fns/get_iso_week/index';\n\n/**\n * This will use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl\" target=\"_blank\">Intl</a> API to do all date formatting.\n *\n * You will need to include a <a href=\"https://github.com/andyearnshaw/Intl.js/\">polyfill</a> for older browsers.\n */\nexport class CalendarNativeDateFormatter\n  implements CalendarDateFormatterInterface {\n  /**\n   * The month view header week day labels\n   */\n  public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n  }\n\n  /**\n   * The month view cell day number\n   */\n  public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(date);\n  }\n\n  /**\n   * The month view title\n   */\n  public monthViewTitle({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, {\n      year: 'numeric',\n      month: 'long'\n    }).format(date);\n  }\n\n  /**\n   * The week view header week day labels\n   */\n  public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n  }\n\n  /**\n   * The week view sub header day and month labels\n   */\n  public weekViewColumnSubHeader({\n    date,\n    locale\n  }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, {\n      day: 'numeric',\n      month: 'short'\n    }).format(date);\n  }\n\n  /**\n   * The week view title\n   */\n  public weekViewTitle({ date, locale }: DateFormatterParams): string {\n    const year: string = new Intl.DateTimeFormat(locale, {\n      year: 'numeric'\n    }).format(date);\n    const weekNumber: number = getISOWeek(date);\n    return `Week ${weekNumber} of ${year}`;\n  }\n\n  /**\n   * The time formatting down the left hand side of the day view\n   */\n  public dayViewHour({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);\n  }\n\n  /**\n   * The day view title\n   */\n  public dayViewTitle({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric',\n      weekday: 'long'\n    }).format(date);\n  }\n}\n","import { ModuleWithProviders, NgModule, Provider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DraggableHelper } from 'angular-draggable-droppable';\nimport { CalendarEventActionsComponent } from './calendar-event-actions.component';\nimport { CalendarEventTitleComponent } from './calendar-event-title.component';\nimport {\n  CalendarTooltipDirective,\n  CalendarTooltipWindowComponent\n} from './calendar-tooltip.directive';\nimport { CalendarPreviousViewDirective } from './calendar-previous-view.directive';\nimport { CalendarNextViewDirective } from './calendar-next-view.directive';\nimport { CalendarTodayDirective } from './calendar-today.directive';\nimport { CalendarDatePipe } from './calendar-date.pipe';\nimport { CalendarEventTitlePipe } from './calendar-event-title.pipe';\nimport { ClickDirective } from './click.directive';\nimport { CalendarEventTitleFormatter } from './calendar-event-title-formatter.provider';\nimport { CalendarDateFormatter } from './calendar-date-formatter.provider';\nimport { CalendarUtils } from './calendar-utils.provider';\n\nexport interface CalendarModuleConfig {\n  eventTitleFormatter?: Provider;\n  dateFormatter?: Provider;\n  utils?: Provider;\n}\n\nexport * from './calendar-event-title-formatter.provider';\nexport * from './calendar-moment-date-formatter.provider';\nexport * from './calendar-native-date-formatter.provider';\nexport * from './calendar-angular-date-formatter.provider';\nexport * from './calendar-date-formatter.provider';\nexport * from './calendar-utils.provider';\nexport * from './calendar-date-formatter.interface';\nexport * from './calendar-event-times-changed-event.interface';\n\nexport {\n  CalendarEvent,\n  EventAction as CalendarEventAction,\n  DAYS_OF_WEEK,\n  ViewPeriod as CalendarViewPeriod\n} from 'calendar-utils';\n\n/**\n * Import this module to if you're just using a singular view and want to save on bundle size. Example usage:\n *\n * ```typescript\n * import { CalendarCommonModule } from 'angular-calendar/modules/common';\n * import { CalendarMonthModule } from 'angular-calendar/modules/month';\n *\n * @NgModule({\n *   imports: [\n *     CalendarCommonModule.forRoot(),\n *     CalendarMonthModule\n *   ]\n * })\n * class MyModule {}\n * ```\n *\n */\n@NgModule({\n  declarations: [\n    CalendarEventActionsComponent,\n    CalendarEventTitleComponent,\n    CalendarTooltipWindowComponent,\n    CalendarTooltipDirective,\n    CalendarPreviousViewDirective,\n    CalendarNextViewDirective,\n    CalendarTodayDirective,\n    CalendarDatePipe,\n    CalendarEventTitlePipe,\n    ClickDirective\n  ],\n  imports: [CommonModule],\n  exports: [\n    CalendarEventActionsComponent,\n    CalendarEventTitleComponent,\n    CalendarTooltipWindowComponent,\n    CalendarTooltipDirective,\n    CalendarPreviousViewDirective,\n    CalendarNextViewDirective,\n    CalendarTodayDirective,\n    CalendarDatePipe,\n    CalendarEventTitlePipe,\n    ClickDirective\n  ],\n  entryComponents: [CalendarTooltipWindowComponent]\n})\nexport class CalendarCommonModule {\n  static forRoot(config: CalendarModuleConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: CalendarCommonModule,\n      providers: [\n        DraggableHelper,\n        config.eventTitleFormatter || CalendarEventTitleFormatter,\n        config.dateFormatter || CalendarDateFormatter,\n        config.utils || CalendarUtils\n      ]\n    };\n  }\n}\n","import {\n  Component,\n  OnChanges,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  OnInit,\n  OnDestroy,\n  LOCALE_ID,\n  Inject,\n  TemplateRef\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  WeekDay,\n  MonthView,\n  MonthViewDay,\n  ViewPeriod\n} from 'calendar-utils';\nimport { Subject, Subscription } from 'rxjs';\nimport isSameDay from 'date-fns/is_same_day/index';\nimport setDate from 'date-fns/set_date/index';\nimport setMonth from 'date-fns/set_month/index';\nimport setYear from 'date-fns/set_year/index';\nimport getDate from 'date-fns/get_date/index';\nimport getMonth from 'date-fns/get_month/index';\nimport getYear from 'date-fns/get_year/index';\nimport differenceInSeconds from 'date-fns/difference_in_seconds/index';\nimport addSeconds from 'date-fns/add_seconds/index';\nimport { CalendarEventTimesChangedEvent } from '../common/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../common/calendar-utils.provider';\nimport { validateEvents, trackByIndex } from '../common/util';\n\nexport interface CalendarMonthViewBeforeRenderEvent {\n  header: WeekDay[];\n  body: MonthViewDay[];\n  period: ViewPeriod;\n}\n\nexport interface CalendarMonthViewEventTimesChangedEvent\n  extends CalendarEventTimesChangedEvent {\n  day: MonthViewDay;\n}\n\n/**\n * Shows all events on a given month. Example usage:\n *\n * ```typescript\n * <mwl-calendar-month-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-month-view>\n * ```\n */\n@Component({\n  selector: 'mwl-calendar-month-view',\n  template: `\n    <div class=\"cal-month-view\">\n      <mwl-calendar-month-view-header\n        [days]=\"columnHeaders\"\n        [locale]=\"locale\"\n        [customTemplate]=\"headerTemplate\">\n      </mwl-calendar-month-view-header>\n      <div class=\"cal-days\">\n        <div *ngFor=\"let rowIndex of view.rowOffsets; trackByIndex\">\n          <div class=\"cal-cell-row\">\n            <mwl-calendar-month-cell\n              *ngFor=\"let day of (view.days | slice : rowIndex : rowIndex + (view.totalDaysVisibleInWeek)); trackBy:trackByDate\"\n              [class.cal-drag-over]=\"day.dragOver\"\n              [ngClass]=\"day?.cssClass\"\n              [day]=\"day\"\n              [openDay]=\"openDay\"\n              [locale]=\"locale\"\n              [tooltipPlacement]=\"tooltipPlacement\"\n              [tooltipAppendToBody]=\"tooltipAppendToBody\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [customTemplate]=\"cellTemplate\"\n              (click)=\"handleDayClick($event, day)\"\n              (highlightDay)=\"toggleDayHighlight($event.event, true)\"\n              (unhighlightDay)=\"toggleDayHighlight($event.event, false)\"\n              mwlDroppable\n              (dragEnter)=\"day.dragOver = true\"\n              (dragLeave)=\"day.dragOver = false\"\n              (drop)=\"day.dragOver = false; eventDropped(day, $event.dropData.event)\"\n              (eventClicked)=\"eventClicked.emit({event: $event.event})\">\n            </mwl-calendar-month-cell>\n          </div>\n          <mwl-calendar-open-day-events\n            [isOpen]=\"openRowIndex === rowIndex\"\n            [events]=\"openDay?.events\"\n            [customTemplate]=\"openDayEventsTemplate\"\n            [eventTitleTemplate]=\"eventTitleTemplate\"\n            (eventClicked)=\"eventClicked.emit({event: $event.event})\">\n          </mwl-calendar-open-day-events>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class CalendarMonthViewComponent\n  implements OnChanges, OnInit, OnDestroy {\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * An array of events to display on view.\n   * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n   */\n  @Input() events: CalendarEvent[] = [];\n\n  /**\n   * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n   */\n  @Input() excludeDays: number[] = [];\n\n  /**\n   * Whether the events list for the day of the `viewDate` option is visible or not\n   */\n  @Input() activeDayIsOpen: boolean = false;\n\n  /**\n   * An observable that when emitted on will re-render the current view\n   */\n  @Input() refresh: Subject<any>;\n\n  /**\n   * The locale used to format dates\n   */\n  @Input() locale: string;\n\n  /**\n   * The placement of the event tooltip\n   */\n  @Input() tooltipPlacement: string = 'top';\n\n  /**\n   * A custom template to use for the event tooltips\n   */\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  /**\n   * Whether to append tooltips to the body or next to the trigger element\n   */\n  @Input() tooltipAppendToBody: boolean = true;\n\n  /**\n   * The start number of the week\n   */\n  @Input() weekStartsOn: number;\n\n  /**\n   * A custom template to use to replace the header\n   */\n  @Input() headerTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use to replace the day cell\n   */\n  @Input() cellTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for the slide down box of events for the active day\n   */\n  @Input() openDayEventsTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for event titles\n   */\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  /**\n   * An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\n   */\n  @Input() weekendDays: number[];\n\n  /**\n   * An output that will be called before the view is rendered for the current month.\n   * If you add the `cssClass` property to a day in the body it will add that class to the cell element in the template\n   */\n  @Output()\n  beforeViewRender = new EventEmitter<CalendarMonthViewBeforeRenderEvent>();\n\n  /**\n   * Called when the day cell is clicked\n   */\n  @Output()\n  dayClicked = new EventEmitter<{\n    day: MonthViewDay;\n  }>();\n\n  /**\n   * Called when the event title is clicked\n   */\n  @Output()\n  eventClicked = new EventEmitter<{\n    event: CalendarEvent;\n  }>();\n\n  /**\n   * Called when an event is dragged and dropped\n   */\n  @Output()\n  eventTimesChanged = new EventEmitter<\n    CalendarMonthViewEventTimesChangedEvent\n  >();\n\n  /**\n   * @hidden\n   */\n  columnHeaders: WeekDay[];\n\n  /**\n   * @hidden\n   */\n  view: MonthView;\n\n  /**\n   * @hidden\n   */\n  openRowIndex: number;\n\n  /**\n   * @hidden\n   */\n  openDay: MonthViewDay;\n\n  /**\n   * @hidden\n   */\n  refreshSubscription: Subscription;\n\n  /**\n   * @hidden\n   */\n  trackByIndex = trackByIndex;\n\n  /**\n   * @hidden\n   */\n  trackByDate = (index: number, day: MonthViewDay) => day.date.toISOString();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private utils: CalendarUtils,\n    @Inject(LOCALE_ID) locale: string\n  ) {\n    this.locale = locale;\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    if (this.refresh) {\n      this.refreshSubscription = this.refresh.subscribe(() => {\n        this.refreshAll();\n        this.cdr.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: any): void {\n    if (changes.viewDate || changes.excludeDays || changes.weekendDays) {\n      this.refreshHeader();\n    }\n\n    if (changes.events) {\n      validateEvents(this.events);\n    }\n\n    if (\n      changes.viewDate ||\n      changes.events ||\n      changes.excludeDays ||\n      changes.weekendDays\n    ) {\n      this.refreshBody();\n    }\n\n    if (\n      changes.activeDayIsOpen ||\n      changes.viewDate ||\n      changes.events ||\n      changes.excludeDays\n    ) {\n      this.checkActiveDayIsOpen();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    if (this.refreshSubscription) {\n      this.refreshSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  toggleDayHighlight(event: CalendarEvent, isHighlighted: boolean): void {\n    this.view.days.forEach(day => {\n      if (isHighlighted && day.events.indexOf(event) > -1) {\n        day.backgroundColor =\n          (event.color && event.color.secondary) || '#D1E8FF';\n      } else {\n        delete day.backgroundColor;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  eventDropped(day: MonthViewDay, event: CalendarEvent): void {\n    const year: number = getYear(day.date);\n    const month: number = getMonth(day.date);\n    const date: number = getDate(day.date);\n    const newStart: Date = setDate(\n      setMonth(setYear(event.start, year), month),\n      date\n    );\n    let newEnd: Date;\n    if (event.end) {\n      const secondsDiff: number = differenceInSeconds(newStart, event.start);\n      newEnd = addSeconds(event.end, secondsDiff);\n    }\n    this.eventTimesChanged.emit({ event, newStart, newEnd, day });\n  }\n\n  /**\n   * @hidden\n   */\n  handleDayClick(clickEvent: any, day: MonthViewDay) {\n    // when using hammerjs, stopPropagation doesn't work. See https://github.com/mattlewis92/angular-calendar/issues/318\n    if (!clickEvent.target.classList.contains('cal-event')) {\n      this.dayClicked.emit({ day });\n    }\n  }\n\n  private refreshHeader(): void {\n    this.columnHeaders = this.utils.getWeekViewHeader({\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      weekendDays: this.weekendDays\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private refreshBody(): void {\n    this.view = this.utils.getMonthView({\n      events: this.events,\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      weekendDays: this.weekendDays\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private checkActiveDayIsOpen(): void {\n    if (this.activeDayIsOpen === true) {\n      this.openDay = this.view.days.find(day =>\n        isSameDay(day.date, this.viewDate)\n      );\n      const index: number = this.view.days.indexOf(this.openDay);\n      this.openRowIndex =\n        Math.floor(index / this.view.totalDaysVisibleInWeek) *\n        this.view.totalDaysVisibleInWeek;\n    } else {\n      this.openRowIndex = null;\n      this.openDay = null;\n    }\n  }\n\n  private refreshAll(): void {\n    this.columnHeaders = null;\n    this.view = null;\n    this.refreshHeader();\n    this.refreshBody();\n    this.checkActiveDayIsOpen();\n  }\n\n  private emitBeforeViewRender(): void {\n    if (this.columnHeaders && this.view) {\n      this.beforeViewRender.emit({\n        header: this.columnHeaders,\n        body: this.view.days,\n        period: this.view.period\n      });\n    }\n  }\n}\n","import { Component, Input, TemplateRef } from '@angular/core';\nimport { WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../common/util';\n\n@Component({\n  selector: 'mwl-calendar-month-view-header',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-days=\"days\"\n      let-locale=\"locale\">\n      <div class=\"cal-cell-row cal-header\">\n        <div\n          class=\"cal-cell\"\n          *ngFor=\"let day of days; trackBy:trackByWeekDayHeaderDate\"\n          [class.cal-past]=\"day.isPast\"\n          [class.cal-today]=\"day.isToday\"\n          [class.cal-future]=\"day.isFuture\"\n          [class.cal-weekend]=\"day.isWeekend\"\n          [ngClass]=\"day.cssClass\">\n          {{ day.date | calendarDate:'monthViewColumnHeader':locale }}\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{days: days, locale: locale}\">\n    </ng-template>\n  `\n})\nexport class CalendarMonthViewHeaderComponent {\n  @Input() days: WeekDay[];\n\n  @Input() locale: string;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef\n} from '@angular/core';\nimport { MonthViewDay, CalendarEvent } from 'calendar-utils';\nimport { trackByEventId } from '../common/util';\n\n@Component({\n  selector: 'mwl-calendar-month-cell',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-day=\"day\"\n      let-openDay=\"openDay\"\n      let-locale=\"locale\"\n      let-tooltipPlacement=\"tooltipPlacement\"\n      let-highlightDay=\"highlightDay\"\n      let-unhighlightDay=\"unhighlightDay\"\n      let-eventClicked=\"eventClicked\"\n      let-tooltipTemplate=\"tooltipTemplate\"\n      let-tooltipAppendToBody=\"tooltipAppendToBody\">\n      <div class=\"cal-cell-top\">\n        <span class=\"cal-day-badge\" *ngIf=\"day.badgeTotal > 0\">{{ day.badgeTotal }}</span>\n        <span class=\"cal-day-number\">{{ day.date | calendarDate:'monthViewDayNumber':locale }}</span>\n      </div>\n      <div class=\"cal-events\" *ngIf=\"day.events.length > 0\">\n        <div\n          class=\"cal-event\"\n          *ngFor=\"let event of day.events; trackBy:trackByEventId\"\n          [style.backgroundColor]=\"event.color?.primary\"\n          [ngClass]=\"event?.cssClass\"\n          (mouseenter)=\"highlightDay.emit({event: event})\"\n          (mouseleave)=\"unhighlightDay.emit({event: event})\"\n          [mwlCalendarTooltip]=\"event.title | calendarEventTitle:'monthTooltip':event\"\n          [tooltipPlacement]=\"tooltipPlacement\"\n          [tooltipEvent]=\"event\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipAppendToBody]=\"tooltipAppendToBody\"\n          mwlDraggable\n          [dropData]=\"{event: event}\"\n          [dragAxis]=\"{x: event.draggable, y: event.draggable}\"\n          (mwlClick)=\"eventClicked.emit({ event: event })\">\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        day: day,\n        openDay: openDay,\n        locale: locale,\n        tooltipPlacement: tooltipPlacement,\n        highlightDay: highlightDay,\n        unhighlightDay: unhighlightDay,\n        eventClicked: eventClicked,\n        tooltipTemplate: tooltipTemplate,\n        tooltipAppendToBody: tooltipAppendToBody\n      }\">\n    </ng-template>\n  `,\n  host: {\n    class: 'cal-cell cal-day-cell',\n    '[class.cal-past]': 'day.isPast',\n    '[class.cal-today]': 'day.isToday',\n    '[class.cal-future]': 'day.isFuture',\n    '[class.cal-weekend]': 'day.isWeekend',\n    '[class.cal-in-month]': 'day.inMonth',\n    '[class.cal-out-month]': '!day.inMonth',\n    '[class.cal-has-events]': 'day.events.length > 0',\n    '[class.cal-open]': 'day === openDay',\n    '[style.backgroundColor]': 'day.backgroundColor'\n  }\n})\nexport class CalendarMonthCellComponent {\n  @Input() day: MonthViewDay;\n\n  @Input() openDay: MonthViewDay;\n\n  @Input() locale: string;\n\n  @Input() tooltipPlacement: string;\n\n  @Input() tooltipAppendToBody: boolean;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() highlightDay: EventEmitter<any> = new EventEmitter();\n\n  @Output() unhighlightDay: EventEmitter<any> = new EventEmitter();\n\n  @Output()\n  eventClicked: EventEmitter<{ event: CalendarEvent }> = new EventEmitter<{\n    event: CalendarEvent;\n  }>();\n\n  trackByEventId = trackByEventId;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, transition, animate } from '@angular/animations';\nimport { CalendarEvent } from 'calendar-utils';\nimport { trackByEventId } from '../common/util';\n\n@Component({\n  selector: 'mwl-calendar-open-day-events',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-events=\"events\"\n      let-eventClicked=\"eventClicked\">\n      <div\n        *ngFor=\"let event of events; trackBy:trackByEventId\"\n        [ngClass]=\"event?.cssClass\"\n        mwlDraggable\n        [dropData]=\"{event: event}\"\n        [dragAxis]=\"{x: event.draggable, y: event.draggable}\">\n        <span\n          class=\"cal-event\"\n          [style.backgroundColor]=\"event.color?.primary\">\n        </span>\n        &ngsp;\n        <mwl-calendar-event-title\n          [event]=\"event\"\n          [customTemplate]=\"eventTitleTemplate\"\n          view=\"month\"\n          (mwlClick)=\"eventClicked.emit({event: event})\">\n        </mwl-calendar-event-title>\n        &ngsp;\n        <mwl-calendar-event-actions [event]=\"event\"></mwl-calendar-event-actions>\n      </div>\n    </ng-template>\n    <div class=\"cal-open-day-events\" [@collapse] *ngIf=\"isOpen\">\n      <ng-template\n        [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n        [ngTemplateOutletContext]=\"{\n          events: events,\n          eventClicked: eventClicked\n        }\">\n      </ng-template>\n    </div>\n  `,\n  animations: [\n    trigger('collapse', [\n      transition('void => *', [\n        style({ height: 0, overflow: 'hidden' }),\n        animate('150ms', style({ height: '*' }))\n      ]),\n      transition('* => void', [\n        style({ height: '*', overflow: 'hidden' }),\n        animate('150ms', style({ height: 0 }))\n      ])\n    ])\n  ]\n})\nexport class CalendarOpenDayEventsComponent {\n  @Input() isOpen: boolean = false;\n\n  @Input() events: CalendarEvent[];\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  @Output()\n  eventClicked: EventEmitter<{ event: CalendarEvent }> = new EventEmitter<{\n    event: CalendarEvent;\n  }>();\n\n  trackByEventId = trackByEventId;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\nimport { CalendarMonthViewComponent } from './calendar-month-view.component';\nimport { CalendarMonthViewHeaderComponent } from './calendar-month-view-header.component';\nimport { CalendarMonthCellComponent } from './calendar-month-cell.component';\nimport { CalendarOpenDayEventsComponent } from './calendar-open-day-events.component';\nimport { CalendarCommonModule } from '../common/calendar-common.module';\n\nexport {\n  CalendarMonthViewComponent,\n  CalendarMonthViewBeforeRenderEvent,\n  CalendarMonthViewEventTimesChangedEvent\n} from './calendar-month-view.component';\nexport { MonthViewDay as CalendarMonthViewDay } from 'calendar-utils';\n\n@NgModule({\n  imports: [CommonModule, DragAndDropModule, CalendarCommonModule],\n  declarations: [\n    CalendarMonthViewComponent,\n    CalendarMonthCellComponent,\n    CalendarOpenDayEventsComponent,\n    CalendarMonthViewHeaderComponent\n  ],\n  exports: [\n    DragAndDropModule,\n    CalendarMonthViewComponent,\n    CalendarMonthCellComponent,\n    CalendarOpenDayEventsComponent,\n    CalendarMonthViewHeaderComponent\n  ]\n})\nexport class CalendarMonthModule {}\n","import { isInside } from './util';\n\nexport class CalendarDragHelper {\n  startPosition: ClientRect;\n\n  constructor(\n    private dragContainerElement: HTMLElement,\n    draggableElement: HTMLElement\n  ) {\n    this.startPosition = draggableElement.getBoundingClientRect();\n  }\n\n  validateDrag({ x, y }: { x: number; y: number }): boolean {\n    const newRect: ClientRect = Object.assign({}, this.startPosition, {\n      left: this.startPosition.left + x,\n      right: this.startPosition.right + x,\n      top: this.startPosition.top + y,\n      bottom: this.startPosition.bottom + y\n    });\n\n    return isInside(this.dragContainerElement.getBoundingClientRect(), newRect);\n  }\n}\n","import { isInside } from './util';\n\nexport class CalendarResizeHelper {\n  constructor(\n    private resizeContainerElement: HTMLElement,\n    private minWidth?: number\n  ) {}\n\n  validateResize({ rectangle }: { rectangle: ClientRect }): boolean {\n    if (this.minWidth && rectangle.width < this.minWidth) {\n      return false;\n    }\n\n    return isInside(\n      this.resizeContainerElement.getBoundingClientRect(),\n      rectangle\n    );\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  OnChanges,\n  OnInit,\n  OnDestroy,\n  LOCALE_ID,\n  Inject,\n  TemplateRef\n} from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n  WeekDay,\n  CalendarEvent,\n  WeekViewEvent,\n  WeekView,\n  ViewPeriod\n} from 'calendar-utils';\nimport { ResizeEvent } from 'angular-resizable-element';\nimport addDays from 'date-fns/add_days/index';\nimport { CalendarDragHelper } from '../common/calendar-drag-helper.provider';\nimport { CalendarResizeHelper } from '../common/calendar-resize-helper.provider';\nimport { CalendarEventTimesChangedEvent } from '../common/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../common/calendar-utils.provider';\nimport { validateEvents, trackByIndex } from '../common/util';\n\nexport interface WeekViewEventResize {\n  originalOffset: number;\n  originalSpan: number;\n  edge: string;\n}\n\nexport interface CalendarWeekViewBeforeRenderEvent {\n  header: WeekDay[];\n  period: ViewPeriod;\n}\n\n/**\n * Shows all events on a given week. Example usage:\n *\n * ```typescript\n * <mwl-calendar-week-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-week-view>\n * ```\n */\n@Component({\n  selector: 'mwl-calendar-week-view',\n  template: `\n    <div class=\"cal-week-view\" #weekViewContainer>\n      <mwl-calendar-week-view-header\n        [days]=\"days\"\n        [locale]=\"locale\"\n        [customTemplate]=\"headerTemplate\"\n        (dayHeaderClicked)=\"dayHeaderClicked.emit($event)\"\n        (eventDropped)=\"eventTimesChanged.emit($event)\">\n      </mwl-calendar-week-view-header>\n      <div *ngFor=\"let eventRow of view.eventRows; trackBy:trackByIndex\" #eventRowContainer class=\"cal-events-row\">\n        <div\n          *ngFor=\"let weekEvent of eventRow.row; trackBy:trackByEventId\"\n          #event\n          class=\"cal-event-container\"\n          [class.cal-draggable]=\"weekEvent.event.draggable\"\n          [class.cal-starts-within-week]=\"!weekEvent.startsBeforeWeek\"\n          [class.cal-ends-within-week]=\"!weekEvent.endsAfterWeek\"\n          [ngClass]=\"weekEvent.event?.cssClass\"\n          [style.width]=\"((100 / days.length) * weekEvent.span) + '%'\"\n          [style.marginLeft]=\"((100 / days.length) * weekEvent.offset) + '%'\"\n          mwlResizable\n          [resizeEdges]=\"{left: weekEvent.event?.resizable?.beforeStart, right: weekEvent.event?.resizable?.afterEnd}\"\n          [resizeSnapGrid]=\"{left: dayColumnWidth, right: dayColumnWidth}\"\n          [validateResize]=\"validateResize\"\n          (resizeStart)=\"resizeStarted(weekViewContainer, weekEvent, $event)\"\n          (resizing)=\"resizing(weekEvent, $event, dayColumnWidth)\"\n          (resizeEnd)=\"resizeEnded(weekEvent)\"\n          mwlDraggable\n          [dragAxis]=\"{x: weekEvent.event.draggable && currentResizes.size === 0, y: false}\"\n          [dragSnapGrid]=\"{x: dayColumnWidth}\"\n          [validateDrag]=\"validateDrag\"\n          (dragPointerDown)=\"dragStart(weekViewContainer, event)\"\n          (dragEnd)=\"eventDragged(weekEvent, $event.x, dayColumnWidth)\">\n          <mwl-calendar-week-view-event\n            [weekEvent]=\"weekEvent\"\n            [tooltipPlacement]=\"tooltipPlacement\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipAppendToBody]=\"tooltipAppendToBody\"\n            [customTemplate]=\"eventTemplate\"\n            [eventTitleTemplate]=\"eventTitleTemplate\"\n            (eventClicked)=\"eventClicked.emit({event: weekEvent.event})\">\n          </mwl-calendar-week-view-event>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class CalendarWeekViewComponent implements OnChanges, OnInit, OnDestroy {\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * An array of events to display on view\n   * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n   */\n  @Input() events: CalendarEvent[] = [];\n\n  /**\n   * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n   */\n  @Input() excludeDays: number[] = [];\n\n  /**\n   * An observable that when emitted on will re-render the current view\n   */\n  @Input() refresh: Subject<any>;\n\n  /**\n   * The locale used to format dates\n   */\n  @Input() locale: string;\n\n  /**\n   * The placement of the event tooltip\n   */\n  @Input() tooltipPlacement: string = 'bottom';\n\n  /**\n   * A custom template to use for the event tooltips\n   */\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  /**\n   * Whether to append tooltips to the body or next to the trigger element\n   */\n  @Input() tooltipAppendToBody: boolean = true;\n\n  /**\n   * The start number of the week\n   */\n  @Input() weekStartsOn: number;\n\n  /**\n   * A custom template to use to replace the header\n   */\n  @Input() headerTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for week view events\n   */\n  @Input() eventTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for event titles\n   */\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  /**\n   * The precision to display events.\n   * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding\n   */\n  @Input() precision: 'days' | 'minutes' = 'days';\n\n  /**\n   * An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\n   */\n  @Input() weekendDays: number[];\n\n  /**\n   * Called when a header week day is clicked. Adding a `cssClass` property on `$event.day` will add that class to the header element\n   */\n  @Output()\n  dayHeaderClicked: EventEmitter<{ day: WeekDay }> = new EventEmitter<{\n    day: WeekDay;\n  }>();\n\n  /**\n   * Called when the event title is clicked\n   */\n  @Output()\n  eventClicked: EventEmitter<{ event: CalendarEvent }> = new EventEmitter<{\n    event: CalendarEvent;\n  }>();\n\n  /**\n   * Called when an event is resized or dragged and dropped\n   */\n  @Output()\n  eventTimesChanged: EventEmitter<\n    CalendarEventTimesChangedEvent\n  > = new EventEmitter<CalendarEventTimesChangedEvent>();\n\n  /**\n   * An output that will be called before the view is rendered for the current week.\n   * If you add the `cssClass` property to a day in the header it will add that class to the cell element in the template\n   */\n  @Output()\n  beforeViewRender = new EventEmitter<CalendarWeekViewBeforeRenderEvent>();\n\n  /**\n   * @hidden\n   */\n  days: WeekDay[];\n\n  /**\n   * @hidden\n   */\n  view: WeekView;\n\n  /**\n   * @hidden\n   */\n  refreshSubscription: Subscription;\n\n  /**\n   * @hidden\n   */\n  currentResizes: Map<WeekViewEvent, WeekViewEventResize> = new Map();\n\n  /**\n   * @hidden\n   */\n  validateDrag: (args: any) => boolean;\n\n  /**\n   * @hidden\n   */\n  validateResize: (args: any) => boolean;\n\n  /**\n   * @hidden\n   */\n  dayColumnWidth: number;\n\n  /**\n   * @hidden\n   */\n  trackByIndex = trackByIndex;\n\n  /**\n   * @hidden\n   */\n  trackByEventId = (index: number, weekEvent: WeekViewEvent) =>\n    weekEvent.event.id ? weekEvent.event.id : weekEvent;\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private utils: CalendarUtils,\n    @Inject(LOCALE_ID) locale: string\n  ) {\n    this.locale = locale;\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    if (this.refresh) {\n      this.refreshSubscription = this.refresh.subscribe(() => {\n        this.refreshAll();\n        this.cdr.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: any): void {\n    if (changes.viewDate || changes.excludeDays || changes.weekendDays) {\n      this.refreshHeader();\n    }\n\n    if (changes.events) {\n      validateEvents(this.events);\n    }\n\n    if (changes.events || changes.viewDate || changes.excludeDays) {\n      this.refreshBody();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    if (this.refreshSubscription) {\n      this.refreshSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  resizeStarted(\n    weekViewContainer: HTMLElement,\n    weekEvent: WeekViewEvent,\n    resizeEvent: ResizeEvent\n  ): void {\n    this.currentResizes.set(weekEvent, {\n      originalOffset: weekEvent.offset,\n      originalSpan: weekEvent.span,\n      edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right'\n    });\n    this.dayColumnWidth = this.getDayColumnWidth(weekViewContainer);\n    const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(\n      weekViewContainer,\n      this.dayColumnWidth\n    );\n    this.validateResize = ({ rectangle }) =>\n      resizeHelper.validateResize({ rectangle });\n    this.cdr.markForCheck();\n  }\n\n  /**\n   * @hidden\n   */\n  resizing(\n    weekEvent: WeekViewEvent,\n    resizeEvent: ResizeEvent,\n    dayWidth: number\n  ): void {\n    const currentResize: WeekViewEventResize = this.currentResizes.get(\n      weekEvent\n    );\n\n    if (resizeEvent.edges.left) {\n      const diff: number = Math.round(+resizeEvent.edges.left / dayWidth);\n      weekEvent.offset = currentResize.originalOffset + diff;\n      weekEvent.span = currentResize.originalSpan - diff;\n    } else if (resizeEvent.edges.right) {\n      const diff: number = Math.round(+resizeEvent.edges.right / dayWidth);\n      weekEvent.span = currentResize.originalSpan + diff;\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  resizeEnded(weekEvent: WeekViewEvent): void {\n    const currentResize: WeekViewEventResize = this.currentResizes.get(\n      weekEvent\n    );\n\n    let daysDiff: number;\n    if (currentResize.edge === 'left') {\n      daysDiff = weekEvent.offset - currentResize.originalOffset;\n    } else {\n      daysDiff = weekEvent.span - currentResize.originalSpan;\n    }\n\n    weekEvent.offset = currentResize.originalOffset;\n    weekEvent.span = currentResize.originalSpan;\n\n    let newStart: Date = weekEvent.event.start;\n    let newEnd: Date = weekEvent.event.end;\n    if (currentResize.edge === 'left') {\n      newStart = addDays(newStart, daysDiff);\n    } else if (newEnd) {\n      newEnd = addDays(newEnd, daysDiff);\n    }\n\n    this.eventTimesChanged.emit({ newStart, newEnd, event: weekEvent.event });\n    this.currentResizes.delete(weekEvent);\n  }\n\n  /**\n   * @hidden\n   */\n  eventDragged(\n    weekEvent: WeekViewEvent,\n    draggedByPx: number,\n    dayWidth: number\n  ): void {\n    const daysDragged: number = draggedByPx / dayWidth;\n    const newStart: Date = addDays(weekEvent.event.start, daysDragged);\n    let newEnd: Date;\n    if (weekEvent.event.end) {\n      newEnd = addDays(weekEvent.event.end, daysDragged);\n    }\n\n    this.eventTimesChanged.emit({ newStart, newEnd, event: weekEvent.event });\n  }\n\n  /**\n   * @hidden\n   */\n  getDayColumnWidth(eventRowContainer: HTMLElement): number {\n    return Math.floor(eventRowContainer.offsetWidth / this.days.length);\n  }\n\n  /**\n   * @hidden\n   */\n  dragStart(weekViewContainer: HTMLElement, event: HTMLElement): void {\n    this.dayColumnWidth = this.getDayColumnWidth(weekViewContainer);\n    const dragHelper: CalendarDragHelper = new CalendarDragHelper(\n      weekViewContainer,\n      event\n    );\n    this.validateDrag = ({ x, y }) =>\n      this.currentResizes.size === 0 && dragHelper.validateDrag({ x, y });\n    this.cdr.markForCheck();\n  }\n\n  private refreshHeader(): void {\n    this.days = this.utils.getWeekViewHeader({\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      weekendDays: this.weekendDays\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private refreshBody(): void {\n    this.view = this.utils.getWeekView({\n      events: this.events,\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      precision: this.precision,\n      absolutePositionedEvents: true\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private refreshAll(): void {\n    this.refreshHeader();\n    this.refreshBody();\n  }\n\n  private emitBeforeViewRender(): void {\n    if (this.days && this.view) {\n      this.beforeViewRender.emit({\n        header: this.days,\n        period: this.view.period\n      });\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef\n} from '@angular/core';\nimport { CalendarEvent, WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../common/util';\n\n@Component({\n  selector: 'mwl-calendar-week-view-header',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-days=\"days\"\n      let-locale=\"locale\"\n      let-dayHeaderClicked=\"dayHeaderClicked\"\n      let-eventDropped=\"eventDropped\">\n      <div class=\"cal-day-headers\">\n        <div\n          class=\"cal-header\"\n          *ngFor=\"let day of days; trackBy:trackByWeekDayHeaderDate\"\n          [class.cal-past]=\"day.isPast\"\n          [class.cal-today]=\"day.isToday\"\n          [class.cal-future]=\"day.isFuture\"\n          [class.cal-weekend]=\"day.isWeekend\"\n          [class.cal-drag-over]=\"day.dragOver\"\n          [ngClass]=\"day.cssClass\"\n          (mwlClick)=\"dayHeaderClicked.emit({day: day})\"\n          mwlDroppable\n          (dragEnter)=\"day.dragOver = true\"\n          (dragLeave)=\"day.dragOver = false\"\n          (drop)=\"day.dragOver = false; eventDropped.emit({event: $event.dropData.event, newStart: day.date})\">\n          <b>{{ day.date | calendarDate:'weekViewColumnHeader':locale }}</b><br>\n          <span>{{ day.date | calendarDate:'weekViewColumnSubHeader':locale }}</span>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{days: days, locale: locale, dayHeaderClicked: dayHeaderClicked, eventDropped: eventDropped}\">\n    </ng-template>\n  `\n})\nexport class CalendarWeekViewHeaderComponent {\n  @Input() days: WeekDay[];\n\n  @Input() locale: string;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Output()\n  dayHeaderClicked: EventEmitter<{ day: WeekDay }> = new EventEmitter<{\n    day: WeekDay;\n  }>();\n\n  @Output()\n  eventDropped: EventEmitter<{\n    event: CalendarEvent;\n    newStart: Date;\n  }> = new EventEmitter<{ event: CalendarEvent; newStart: Date }>();\n\n  trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef\n} from '@angular/core';\nimport { WeekViewEvent } from 'calendar-utils';\n\n@Component({\n  selector: 'mwl-calendar-week-view-event',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-weekEvent=\"weekEvent\"\n      let-tooltipPlacement=\"tooltipPlacement\"\n      let-eventClicked=\"eventClicked\"\n      let-tooltipTemplate=\"tooltipTemplate\"\n      let-tooltipAppendToBody=\"tooltipAppendToBody\">\n      <div\n        class=\"cal-event\"\n        [style.backgroundColor]=\"weekEvent.event.color?.secondary\"\n        [style.borderColor]=\"weekEvent.event.color?.primary\"\n        [mwlCalendarTooltip]=\"weekEvent.event.title | calendarEventTitle:'weekTooltip':weekEvent.event\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipEvent]=\"weekEvent.event\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipAppendToBody]=\"tooltipAppendToBody\">\n        <mwl-calendar-event-actions [event]=\"weekEvent.event\"></mwl-calendar-event-actions>\n        &ngsp;\n        <mwl-calendar-event-title\n          [event]=\"weekEvent.event\"\n          [customTemplate]=\"eventTitleTemplate\"\n          view=\"week\"\n          (mwlClick)=\"eventClicked.emit()\">\n        </mwl-calendar-event-title>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        weekEvent: weekEvent,\n        tooltipPlacement: tooltipPlacement,\n        eventClicked: eventClicked,\n        tooltipTemplate: tooltipTemplate,\n        tooltipAppendToBody: tooltipAppendToBody\n      }\">\n    </ng-template>\n  `\n})\nexport class CalendarWeekViewEventComponent {\n  @Input() weekEvent: WeekViewEvent;\n\n  @Input() tooltipPlacement: string;\n\n  @Input() tooltipAppendToBody: boolean;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() eventClicked: EventEmitter<any> = new EventEmitter();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResizableModule } from 'angular-resizable-element';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\nimport { CalendarWeekViewComponent } from './calendar-week-view.component';\nimport { CalendarWeekViewHeaderComponent } from './calendar-week-view-header.component';\nimport { CalendarWeekViewEventComponent } from './calendar-week-view-event.component';\nimport { CalendarCommonModule } from '../common/calendar-common.module';\n\nexport {\n  CalendarWeekViewComponent,\n  CalendarWeekViewBeforeRenderEvent\n} from './calendar-week-view.component';\nexport {\n  WeekViewEvent as CalendarWeekViewEvent,\n  WeekViewEventRow as CalendarWeekViewEventRow,\n  GetWeekViewArgs as CalendarGetWeekViewArgs\n} from 'calendar-utils';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ResizableModule,\n    DragAndDropModule,\n    CalendarCommonModule\n  ],\n  declarations: [\n    CalendarWeekViewComponent,\n    CalendarWeekViewHeaderComponent,\n    CalendarWeekViewEventComponent\n  ],\n  exports: [\n    ResizableModule,\n    DragAndDropModule,\n    CalendarWeekViewComponent,\n    CalendarWeekViewHeaderComponent,\n    CalendarWeekViewEventComponent\n  ]\n})\nexport class CalendarWeekModule {}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  LOCALE_ID,\n  Inject,\n  OnInit,\n  OnDestroy,\n  TemplateRef\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  DayView,\n  DayViewHour,\n  DayViewHourSegment,\n  DayViewEvent,\n  ViewPeriod\n} from 'calendar-utils';\nimport { Subject, Subscription } from 'rxjs';\nimport { ResizeEvent } from 'angular-resizable-element';\nimport addMinutes from 'date-fns/add_minutes/index';\nimport { CalendarDragHelper } from '../common/calendar-drag-helper.provider';\nimport { CalendarResizeHelper } from '../common/calendar-resize-helper.provider';\nimport { CalendarEventTimesChangedEvent } from '../common/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../common/calendar-utils.provider';\nimport { validateEvents, trackByEventId } from '../common/util';\n\nexport interface CalendarDayViewBeforeRenderEvent {\n  body: {\n    hourGrid: DayViewHour[];\n  };\n  period: ViewPeriod;\n}\n\n/**\n * @hidden\n */\nconst MINUTES_IN_HOUR: number = 60;\n\n/**\n * @hidden\n */\nexport interface DayViewEventResize {\n  originalTop: number;\n  originalHeight: number;\n  edge: string;\n}\n\n/**\n * Shows all events on a given day. Example usage:\n *\n * ```typescript\n * <mwl-calendar-day-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-day-view>\n * ```\n */\n@Component({\n  selector: 'mwl-calendar-day-view',\n  template: `\n    <div class=\"cal-day-view\" #dayViewContainer>\n      <mwl-calendar-all-day-event\n        *ngFor=\"let event of view.allDayEvents; trackBy:trackByEventId\"\n        [event]=\"event\"\n        [customTemplate]=\"allDayEventTemplate\"\n        [eventTitleTemplate]=\"eventTitleTemplate\"\n        (eventClicked)=\"eventClicked.emit({event: event})\">\n      </mwl-calendar-all-day-event>\n      <div class=\"cal-hour-rows\">\n        <div class=\"cal-events\">\n          <div\n            #event\n            *ngFor=\"let dayEvent of view?.events; trackBy:trackByDayEvent\"\n            class=\"cal-event-container\"\n            [class.cal-draggable]=\"dayEvent.event.draggable\"\n            [class.cal-starts-within-day]=\"!dayEvent.startsBeforeDay\"\n            [class.cal-ends-within-day]=\"!dayEvent.endsAfterDay\"\n            [ngClass]=\"dayEvent.event.cssClass\"\n            mwlResizable\n            [resizeEdges]=\"{top: dayEvent.event?.resizable?.beforeStart, bottom: dayEvent.event?.resizable?.afterEnd}\"\n            [resizeSnapGrid]=\"{top: eventSnapSize, bottom: eventSnapSize}\"\n            [validateResize]=\"validateResize\"\n            (resizeStart)=\"resizeStarted(dayEvent, $event, dayViewContainer)\"\n            (resizing)=\"resizing(dayEvent, $event)\"\n            (resizeEnd)=\"resizeEnded(dayEvent)\"\n            mwlDraggable\n            [dragAxis]=\"{x: false, y: dayEvent.event.draggable && currentResizes.size === 0}\"\n            [dragSnapGrid]=\"{y: eventSnapSize}\"\n            [validateDrag]=\"validateDrag\"\n            (dragPointerDown)=\"dragStart(event, dayViewContainer)\"\n            (dragEnd)=\"eventDragged(dayEvent, $event.y)\"\n            [style.marginTop.px]=\"dayEvent.top\"\n            [style.height.px]=\"dayEvent.height\"\n            [style.marginLeft.px]=\"dayEvent.left + 70\"\n            [style.width.px]=\"dayEvent.width - 1\">\n            <mwl-calendar-day-view-event\n              [dayEvent]=\"dayEvent\"\n              [tooltipPlacement]=\"tooltipPlacement\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipAppendToBody]=\"tooltipAppendToBody\"\n              [customTemplate]=\"eventTemplate\"\n              [eventTitleTemplate]=\"eventTitleTemplate\"\n              (eventClicked)=\"eventClicked.emit({event: dayEvent.event})\">\n            </mwl-calendar-day-view-event>\n          </div>\n        </div>\n        <div class=\"cal-hour\" *ngFor=\"let hour of hours; trackBy:trackByHour\" [style.minWidth.px]=\"view?.width + 70\">\n          <mwl-calendar-day-view-hour-segment\n            *ngFor=\"let segment of hour.segments; trackBy:trackByHourSegment\"\n            [style.height.px]=\"hourSegmentHeight\"\n            [segment]=\"segment\"\n            [segmentHeight]=\"hourSegmentHeight\"\n            [locale]=\"locale\"\n            [customTemplate]=\"hourSegmentTemplate\"\n            (click)=\"hourSegmentClicked.emit({date: segment.date})\"\n            [class.cal-drag-over]=\"segment.dragOver\"\n            mwlDroppable\n            (dragEnter)=\"segment.dragOver = true\"\n            (dragLeave)=\"segment.dragOver = false\"\n            (drop)=\"segment.dragOver = false; eventDropped($event, segment)\">\n          </mwl-calendar-day-view-hour-segment>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class CalendarDayViewComponent implements OnChanges, OnInit, OnDestroy {\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * An array of events to display on view\n   * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n   */\n  @Input() events: CalendarEvent[] = [];\n\n  /**\n   * The number of segments in an hour. Must be <= 6\n   */\n  @Input() hourSegments: number = 2;\n\n  /**\n   * The height in pixels of each hour segment\n   */\n  @Input() hourSegmentHeight: number = 30;\n\n  /**\n   * The day start hours in 24 hour time. Must be 0-23\n   */\n  @Input() dayStartHour: number = 0;\n\n  /**\n   * The day start minutes. Must be 0-59\n   */\n  @Input() dayStartMinute: number = 0;\n\n  /**\n   * The day end hours in 24 hour time. Must be 0-23\n   */\n  @Input() dayEndHour: number = 23;\n\n  /**\n   * The day end minutes. Must be 0-59\n   */\n  @Input() dayEndMinute: number = 59;\n\n  /**\n   * The width in pixels of each event on the view\n   */\n  @Input() eventWidth: number = 150;\n\n  /**\n   * An observable that when emitted on will re-render the current view\n   */\n  @Input() refresh: Subject<any>;\n\n  /**\n   * The locale used to format dates\n   */\n  @Input() locale: string;\n\n  /**\n   * The grid size to snap resizing and dragging of events to\n   */\n  @Input() eventSnapSize: number = this.hourSegmentHeight;\n\n  /**\n   * The placement of the event tooltip\n   */\n  @Input() tooltipPlacement: string = 'top';\n\n  /**\n   * A custom template to use for the event tooltips\n   */\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  /**\n   * Whether to append tooltips to the body or next to the trigger element\n   */\n  @Input() tooltipAppendToBody: boolean = true;\n\n  /**\n   * A custom template to use to replace the hour segment\n   */\n  @Input() hourSegmentTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for all day events\n   */\n  @Input() allDayEventTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for day view events\n   */\n  @Input() eventTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for event titles\n   */\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  /**\n   * Called when an event title is clicked\n   */\n  @Output()\n  eventClicked = new EventEmitter<{\n    event: CalendarEvent;\n  }>();\n\n  /**\n   * Called when an hour segment is clicked\n   */\n  @Output()\n  hourSegmentClicked = new EventEmitter<{\n    date: Date;\n  }>();\n\n  /**\n   * Called when an event is resized or dragged and dropped\n   */\n  @Output()\n  eventTimesChanged = new EventEmitter<CalendarEventTimesChangedEvent>();\n\n  /**\n   * An output that will be called before the view is rendered for the current day.\n   * If you add the `cssClass` property to an hour grid segment it will add that class to the hour segment in the template\n   */\n  @Output()\n  beforeViewRender = new EventEmitter<CalendarDayViewBeforeRenderEvent>();\n\n  /**\n   * @hidden\n   */\n  hours: DayViewHour[] = [];\n\n  /**\n   * @hidden\n   */\n  view: DayView;\n\n  /**\n   * @hidden\n   */\n  width: number = 0;\n\n  /**\n   * @hidden\n   */\n  refreshSubscription: Subscription;\n\n  /**\n   * @hidden\n   */\n  currentResizes: Map<DayViewEvent, DayViewEventResize> = new Map();\n\n  /**\n   * @hidden\n   */\n  validateDrag: (args: any) => boolean;\n\n  /**\n   * @hidden\n   */\n  validateResize: (args: any) => boolean;\n\n  /**\n   * @hidden\n   */\n  trackByEventId = trackByEventId;\n\n  /**\n   * @hidden\n   */\n  trackByDayEvent = (index: number, dayEvent: DayViewEvent) =>\n    dayEvent.event.id ? dayEvent.event.id : dayEvent.event;\n\n  /**\n   * @hidden\n   */\n  trackByHour = (index: number, hour: DayViewHour) =>\n    hour.segments[0].date.toISOString();\n\n  /**\n   * @hidden\n   */\n  trackByHourSegment = (index: number, segment: DayViewHourSegment) =>\n    segment.date.toISOString();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private utils: CalendarUtils,\n    @Inject(LOCALE_ID) locale: string\n  ) {\n    this.locale = locale;\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    if (this.refresh) {\n      this.refreshSubscription = this.refresh.subscribe(() => {\n        this.refreshAll();\n        this.cdr.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    if (this.refreshSubscription) {\n      this.refreshSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: any): void {\n    if (\n      changes.viewDate ||\n      changes.dayStartHour ||\n      changes.dayStartMinute ||\n      changes.dayEndHour ||\n      changes.dayEndMinute ||\n      changes.hourSegments\n    ) {\n      this.refreshHourGrid();\n    }\n\n    if (changes.events) {\n      validateEvents(this.events);\n    }\n\n    if (\n      changes.viewDate ||\n      changes.events ||\n      changes.dayStartHour ||\n      changes.dayStartMinute ||\n      changes.dayEndHour ||\n      changes.dayEndMinute ||\n      changes.eventWidth\n    ) {\n      this.refreshView();\n    }\n  }\n\n  eventDropped(\n    dropEvent: { dropData?: { event?: CalendarEvent } },\n    segment: DayViewHourSegment\n  ): void {\n    if (dropEvent.dropData && dropEvent.dropData.event) {\n      this.eventTimesChanged.emit({\n        event: dropEvent.dropData.event,\n        newStart: segment.date\n      });\n    }\n  }\n\n  resizeStarted(\n    event: DayViewEvent,\n    resizeEvent: ResizeEvent,\n    dayViewContainer: HTMLElement\n  ): void {\n    this.currentResizes.set(event, {\n      originalTop: event.top,\n      originalHeight: event.height,\n      edge: typeof resizeEvent.edges.top !== 'undefined' ? 'top' : 'bottom'\n    });\n    const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(\n      dayViewContainer\n    );\n    this.validateResize = ({ rectangle }) =>\n      resizeHelper.validateResize({ rectangle });\n    this.cdr.markForCheck();\n  }\n\n  resizing(event: DayViewEvent, resizeEvent: ResizeEvent): void {\n    const currentResize: DayViewEventResize = this.currentResizes.get(event);\n    if (resizeEvent.edges.top) {\n      event.top = currentResize.originalTop + +resizeEvent.edges.top;\n      event.height = currentResize.originalHeight - +resizeEvent.edges.top;\n    } else if (resizeEvent.edges.bottom) {\n      event.height = currentResize.originalHeight + +resizeEvent.edges.bottom;\n    }\n  }\n\n  resizeEnded(dayEvent: DayViewEvent): void {\n    const currentResize: DayViewEventResize = this.currentResizes.get(dayEvent);\n\n    let pixelsMoved: number;\n    if (currentResize.edge === 'top') {\n      pixelsMoved = dayEvent.top - currentResize.originalTop;\n    } else {\n      pixelsMoved = dayEvent.height - currentResize.originalHeight;\n    }\n\n    dayEvent.top = currentResize.originalTop;\n    dayEvent.height = currentResize.originalHeight;\n\n    const pixelAmountInMinutes: number =\n      MINUTES_IN_HOUR / (this.hourSegments * this.hourSegmentHeight);\n    const minutesMoved: number = pixelsMoved * pixelAmountInMinutes;\n    let newStart: Date = dayEvent.event.start;\n    let newEnd: Date = dayEvent.event.end;\n    if (currentResize.edge === 'top') {\n      newStart = addMinutes(newStart, minutesMoved);\n    } else if (newEnd) {\n      newEnd = addMinutes(newEnd, minutesMoved);\n    }\n\n    this.eventTimesChanged.emit({ newStart, newEnd, event: dayEvent.event });\n    this.currentResizes.delete(dayEvent);\n  }\n\n  dragStart(event: HTMLElement, dayViewContainer: HTMLElement): void {\n    const dragHelper: CalendarDragHelper = new CalendarDragHelper(\n      dayViewContainer,\n      event\n    );\n    this.validateDrag = ({ x, y }) =>\n      this.currentResizes.size === 0 && dragHelper.validateDrag({ x, y });\n    this.cdr.markForCheck();\n  }\n\n  eventDragged(dayEvent: DayViewEvent, draggedInPixels: number): void {\n    const pixelAmountInMinutes: number =\n      MINUTES_IN_HOUR / (this.hourSegments * this.hourSegmentHeight);\n    const minutesMoved: number = draggedInPixels * pixelAmountInMinutes;\n    const newStart: Date = addMinutes(dayEvent.event.start, minutesMoved);\n    let newEnd: Date;\n    if (dayEvent.event.end) {\n      newEnd = addMinutes(dayEvent.event.end, minutesMoved);\n    }\n    this.eventTimesChanged.emit({ newStart, newEnd, event: dayEvent.event });\n  }\n\n  private refreshHourGrid(): void {\n    this.hours = this.utils.getDayViewHourGrid({\n      viewDate: this.viewDate,\n      hourSegments: this.hourSegments,\n      dayStart: {\n        hour: this.dayStartHour,\n        minute: this.dayStartMinute\n      },\n      dayEnd: {\n        hour: this.dayEndHour,\n        minute: this.dayEndMinute\n      }\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private refreshView(): void {\n    this.view = this.utils.getDayView({\n      events: this.events,\n      viewDate: this.viewDate,\n      hourSegments: this.hourSegments,\n      dayStart: {\n        hour: this.dayStartHour,\n        minute: this.dayStartMinute\n      },\n      dayEnd: {\n        hour: this.dayEndHour,\n        minute: this.dayEndMinute\n      },\n      eventWidth: this.eventWidth,\n      segmentHeight: this.hourSegmentHeight\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private refreshAll(): void {\n    this.refreshHourGrid();\n    this.refreshView();\n  }\n\n  private emitBeforeViewRender(): void {\n    if (this.hours && this.view) {\n      this.beforeViewRender.emit({\n        body: {\n          hourGrid: this.hours\n        },\n        period: this.view.period\n      });\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef\n} from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\n\n@Component({\n  selector: 'mwl-calendar-all-day-event',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-event=\"event\"\n      let-eventClicked=\"eventClicked\">\n      <div\n        class=\"cal-all-day-event\"\n        [style.backgroundColor]=\"event.color?.secondary\"\n        [style.borderColor]=\"event.color?.primary\">\n        <mwl-calendar-event-actions [event]=\"event\"></mwl-calendar-event-actions>\n        &ngsp;\n        <mwl-calendar-event-title\n          [event]=\"event\"\n          [customTemplate]=\"eventTitleTemplate\"\n          view=\"day\"\n          (mwlClick)=\"eventClicked.emit()\">\n        </mwl-calendar-event-title>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        event: event,\n        eventClicked: eventClicked\n      }\">\n    </ng-template>\n  `\n})\nexport class CalendarAllDayEventComponent {\n  @Input() event: CalendarEvent;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  @Output() eventClicked: EventEmitter<any> = new EventEmitter();\n}\n","import { Component, Input, TemplateRef } from '@angular/core';\nimport { DayViewHourSegment } from 'calendar-utils';\n\n@Component({\n  selector: 'mwl-calendar-day-view-hour-segment',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-segment=\"segment\"\n      let-locale=\"locale\">\n      <div\n        class=\"cal-hour-segment\"\n        [style.height.px]=\"segmentHeight\"\n        [class.cal-hour-start]=\"segment.isStart\"\n        [class.cal-after-hour-start]=\"!segment.isStart\"\n        [ngClass]=\"segment.cssClass\">\n        <div class=\"cal-time\">\n          {{ segment.date | calendarDate:'dayViewHour':locale }}\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        segment: segment,\n        locale: locale\n      }\">\n    </ng-template>\n  `\n})\nexport class CalendarDayViewHourSegmentComponent {\n  @Input() segment: DayViewHourSegment;\n\n  @Input() segmentHeight: number;\n\n  @Input() locale: string;\n\n  @Input() customTemplate: TemplateRef<any>;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef\n} from '@angular/core';\nimport { DayViewEvent } from 'calendar-utils';\n\n@Component({\n  selector: 'mwl-calendar-day-view-event',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-dayEvent=\"dayEvent\"\n      let-tooltipPlacement=\"tooltipPlacement\"\n      let-eventClicked=\"eventClicked\"\n      let-tooltipTemplate=\"tooltipTemplate\"\n      let-tooltipAppendToBody=\"tooltipAppendToBody\">\n      <div\n        class=\"cal-event\"\n        [style.backgroundColor]=\"dayEvent.event.color?.secondary\"\n        [style.borderColor]=\"dayEvent.event.color?.primary\"\n        [mwlCalendarTooltip]=\"dayEvent.event.title | calendarEventTitle:'dayTooltip':dayEvent.event\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipEvent]=\"dayEvent.event\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipAppendToBody]=\"tooltipAppendToBody\">\n        <mwl-calendar-event-actions [event]=\"dayEvent.event\"></mwl-calendar-event-actions>\n        &ngsp;\n        <mwl-calendar-event-title\n          [event]=\"dayEvent.event\"\n          [customTemplate]=\"eventTitleTemplate\"\n          view=\"day\"\n          (mwlClick)=\"eventClicked.emit()\">\n        </mwl-calendar-event-title>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        dayEvent: dayEvent,\n        tooltipPlacement: tooltipPlacement,\n        eventClicked: eventClicked,\n        tooltipTemplate: tooltipTemplate,\n        tooltipAppendToBody: tooltipAppendToBody\n      }\">\n    </ng-template>\n  `\n})\nexport class CalendarDayViewEventComponent {\n  @Input() dayEvent: DayViewEvent;\n\n  @Input() tooltipPlacement: string;\n\n  @Input() tooltipAppendToBody: boolean;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() eventClicked: EventEmitter<any> = new EventEmitter();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResizableModule } from 'angular-resizable-element';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\nimport { CalendarDayViewComponent } from './calendar-day-view.component';\nimport { CalendarAllDayEventComponent } from './calendar-all-day-event.component';\nimport { CalendarDayViewHourSegmentComponent } from './calendar-day-view-hour-segment.component';\nimport { CalendarDayViewEventComponent } from './calendar-day-view-event.component';\nimport { CalendarCommonModule } from '../common/calendar-common.module';\n\nexport {\n  CalendarDayViewComponent,\n  CalendarDayViewBeforeRenderEvent\n} from './calendar-day-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ResizableModule,\n    DragAndDropModule,\n    CalendarCommonModule\n  ],\n  declarations: [\n    CalendarDayViewComponent,\n    CalendarAllDayEventComponent,\n    CalendarDayViewHourSegmentComponent,\n    CalendarDayViewEventComponent\n  ],\n  exports: [\n    ResizableModule,\n    DragAndDropModule,\n    CalendarDayViewComponent,\n    CalendarAllDayEventComponent,\n    CalendarDayViewHourSegmentComponent,\n    CalendarDayViewEventComponent\n  ]\n})\nexport class CalendarDayModule {}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { DraggableHelper } from 'angular-draggable-droppable';\nimport {\n  CalendarCommonModule,\n  CalendarModuleConfig,\n  CalendarEventTitleFormatter,\n  CalendarDateFormatter,\n  CalendarUtils\n} from './common/calendar-common.module';\nimport { CalendarMonthModule } from './month/calendar-month.module';\nimport { CalendarWeekModule } from './week/calendar-week.module';\nimport { CalendarDayModule } from './day/calendar-day.module';\n\nexport * from './common/calendar-common.module';\nexport * from './month/calendar-month.module';\nexport * from './week/calendar-week.module';\nexport * from './day/calendar-day.module';\n\n/**\n * The main module of this library. Example usage:\n *\n * ```typescript\n * import { CalenderModule } from 'angular-calendar';\n *\n * @NgModule({\n *   imports: [\n *     CalenderModule.forRoot()\n *   ]\n * })\n * class MyModule {}\n * ```\n *\n */\n@NgModule({\n  imports: [\n    CalendarCommonModule,\n    CalendarMonthModule,\n    CalendarWeekModule,\n    CalendarDayModule\n  ],\n  exports: [\n    CalendarCommonModule,\n    CalendarMonthModule,\n    CalendarWeekModule,\n    CalendarDayModule\n  ]\n})\nexport class CalendarModule {\n  static forRoot(config: CalendarModuleConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: CalendarModule,\n      providers: [\n        DraggableHelper,\n        config.eventTitleFormatter || CalendarEventTitleFormatter,\n        config.dateFormatter || CalendarDateFormatter,\n        config.utils || CalendarUtils\n      ]\n    };\n  }\n}\n"]}