{"version":3,"names":[],"mappings":"","sources":["uriBuilder.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar uriQueryBuilder_1 = require(\"./uriQueryBuilder\");\nvar uriSchemaPortList_1 = require(\"./uriSchemaPortList\");\n// #region Uri Format Regex\nvar uriRegExp = /^(([^:/?#]+):)\\/\\/([^/?#]+)(\\?([^#]*))?(#(.*))?/;\nvar uriRegExp_schema = /^(([^:/?#]+):)/;\nvar uriRegExp_hostPort = /\\/\\/[^/?#]+/;\nvar uriRegExp_pathSegments = /(\\/[^/?#]*)+/;\nvar uriRegExp_query = /\\?[^#]*/;\nvar uriRegExp_fragment = /#(.*)/;\nvar UriBuilder = (function () {\n    function UriBuilder() {\n        this.query = {};\n    }\n    Object.defineProperty(UriBuilder.prototype, \"authority\", {\n        get: function () {\n            return this._authority;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UriBuilder.prototype, \"port\", {\n        get: function () {\n            return this._port || uriSchemaPortList_1.UriSchemaPortList.getPort(this.schema);\n        },\n        set: function (value) {\n            this._port = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    UriBuilder.isUriFormat = function (str) {\n        return uriRegExp.test(str);\n    };\n    UriBuilder.updateQuery = function (uri, model) {\n        var builder = UriBuilder.parse(uri);\n        for (var key in model) {\n            if (!model.hasOwnProperty(key)) {\n                continue;\n            }\n            builder.query[key] = model[key];\n        }\n        return builder.toString();\n    };\n    UriBuilder.parse = function (uri) {\n        if (!this.isUriFormat(uri)) {\n            uri = UriBuilder.relative + \"://\" + uri;\n            if (!this.isUriFormat(uri)) {\n                throw new Error('URI Format ERROR');\n            }\n        }\n        var result = new UriBuilder();\n        result.schema = uri.match(uriRegExp_schema)[0];\n        result.schema = result.schema.substring(0, result.schema.length - 1);\n        result.host = uri.match(uriRegExp_hostPort)[0].substring(2);\n        if (result.host.indexOf('@') > -1) {\n            // has authority\n            var authorityTemp = result.host.split('@', 2);\n            result.host = authorityTemp[1];\n            authorityTemp = authorityTemp[0].split(':');\n            result._authority = {\n                user: authorityTemp[0],\n                password: authorityTemp[1]\n            };\n        }\n        var hostPortTemp = result.host.split(':', 2);\n        result.host = hostPortTemp[0];\n        result.port = +hostPortTemp[1];\n        result.pathSegments = uri\n            .match(uriRegExp_pathSegments)[0]\n            .substring(2)\n            .split('/')\n            .slice(1);\n        var queryTemp = uri.match(uriRegExp_query);\n        if (queryTemp &&\n            uri.substring(0, queryTemp.index + 1).indexOf('#') === -1) {\n            result.query = uriQueryBuilder_1.UriQueryBuilder.parse(queryTemp[0]).model;\n        }\n        var hashTemp = uri.match(uriRegExp_fragment);\n        if (hashTemp) {\n            result.fragment = hashTemp[0].substring(1);\n        }\n        return result;\n    };\n    UriBuilder.prototype.setPath = function (path) {\n        if (path.indexOf('/') === 0)\n            path = path.substring(1);\n        this.pathSegments = path.split('/');\n    };\n    UriBuilder.prototype.setAuthority = function (user, password) {\n        if (!this._authority) {\n            this._authority = {\n                user: undefined\n            };\n        }\n        this._authority.user = user;\n        this._authority.password = password;\n    };\n    UriBuilder.prototype.isRelative = function () {\n        return this.schema === UriBuilder.relative;\n    };\n    UriBuilder.prototype.toString = function () {\n        var result = this.schema + \"://\";\n        if (this.schema === UriBuilder.relative) {\n            result = '';\n        }\n        if (this.authority && this.authority.user) {\n            result += this.authority.user;\n            if (this.authority.password) {\n                result += ':' + this.authority.password;\n            }\n            result += '@';\n        }\n        result += this.host;\n        if (!uriSchemaPortList_1.UriSchemaPortList.isDefaultPort(this.schema, this.port)) {\n            result += ':' + this.port;\n        }\n        result += '/';\n        if (this.pathSegments && this.pathSegments.length) {\n            result += this.pathSegments.join('/');\n        }\n        if (this.query) {\n            var queryTemp = new uriQueryBuilder_1.UriQueryBuilder(this.query).toString();\n            if (queryTemp.length) {\n                result += '?' + queryTemp;\n            }\n        }\n        if (this.fragment && this.fragment.length) {\n            result += '#' + this.fragment;\n        }\n        return result;\n    };\n    UriBuilder.relative = 'relative';\n    return UriBuilder;\n}());\nexports.UriBuilder = UriBuilder;\n"],"file":"uriBuilder.js"}