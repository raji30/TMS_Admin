{"version":3,"file":"ngx-spinner.js","sources":["ng://ngx-spinner/lib/ngx-spinner.enum.ts","ng://ngx-spinner/lib/ngx-spinner.service.ts","ng://ngx-spinner/lib/ngx-spinner.component.ts","ng://ngx-spinner/lib/ngx-spinner.module.ts","ng://ngx-spinner/public_api.ts","ng://ngx-spinner/ngx-spinner.ts"],"sourcesContent":["export const LOADERS = {\n  'ball-8bits': 16,\n  'ball-atom': 4,\n  'ball-beat': 3,\n  'ball-circus': 5,\n  'ball-climbing-dot': 4,\n  'ball-clip-rotate': 1,\n  'ball-clip-rotate-multiple': 2,\n  'ball-clip-rotate-pulse': 2,\n  'ball-elastic-dots': 5,\n  'ball-fall': 3,\n  'ball-fussion': 4,\n  'ball-grid-beat': 9,\n  'ball-grid-pulse': 9,\n  'ball-newton-cradle': 4,\n  'ball-pulse': 3,\n  'ball-pulse-rise': 5,\n  'ball-pulse-sync': 3,\n  'ball-rotate': 1,\n  'ball-running-dots': 5,\n  'ball-scale': 1,\n  'ball-scale-multiple': 3,\n  'ball-scale-pulse': 2,\n  'ball-scale-ripple': 1,\n  'ball-scale-ripple-multiple': 3,\n  'ball-spin': 8,\n  'ball-spin-clockwise': 8,\n  'ball-spin-clockwise-fade': 8,\n  'ball-spin-clockwise-fade-rotating': 8,\n  'ball-spin-fade': 8,\n  'ball-spin-fade-rotating': 8,\n  'ball-spin-rotate': 2,\n  'ball-square-clockwise-spin': 8,\n  'ball-square-spin': 8,\n  'ball-triangle-path': 3,\n  'ball-zig-zag': 2,\n  'ball-zig-zag-deflect': 2,\n  'cog': 1,\n  'cube-transition': 2,\n  'fire': 3,\n  'line-scale': 5,\n  'line-scale-party': 5,\n  'line-scale-pulse-out': 5,\n  'line-scale-pulse-out-rapid': 5,\n  'line-spin-clockwise-fade': 8,\n  'line-spin-clockwise-fade-rotating': 8,\n  'line-spin-fade': 8,\n  'line-spin-fade-rotating': 8,\n  'pacman': 6,\n  'square-jelly-box': 2,\n  'square-loader': 1,\n  'square-spin': 1,\n  'timer': 1,\n  'triangle-skew-spin': 1\n};\n\nexport const DEFAULTS = {\n  BD_COLOR: 'rgba(51,51,51,0.8)',\n  SPINNER_COLOR: '#fff',\n  SPINNER_TYPE: 'ball-scale-multiple',\n  Z_INDEX: 99999,\n};\n\nexport const PRIMARY_SPINNER = 'primary';\n\nexport type Size = 'default' | 'small' | 'medium' | 'large';\n\nexport interface Spinner {\n  bdColor?: string;\n  size?: Size;\n  color?: string;\n  type?: string;\n  fullScreen?: boolean;\n  zIndex?: number;\n  template?: string;\n}\n\nexport class NgxSpinner {\n  name: string;\n  bdColor: string;\n  size: Size;\n  color: string;\n  type: string;\n  class: string;\n  divCount: number;\n  divArray: Array<number>;\n  fullScreen: boolean;\n  show: boolean;\n  zIndex: number;\n  template: string;\n\n  constructor(init?: Partial<NgxSpinner>) {\n    Object.assign(this, init);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { NgxSpinner, PRIMARY_SPINNER, Spinner } from './ngx-spinner.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxSpinnerService {\n  /**\n   * Spinner observable\n   *\n   * @memberof NgxSpinnerService\n   */\n  private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\n  /**\n   * Creates an instance of NgxSpinnerService.\n   * @memberof NgxSpinnerService\n   */\n  constructor() { }\n  /**\n  * Get subscription of desired spinner\n  * @memberof NgxSpinnerService\n  **/\n  getSpinner(name: string): Observable<NgxSpinner> {\n    return this.spinnerObservable.asObservable().pipe(filter((x: NgxSpinner) => x && x.name === name));\n  }\n  /**\n   * To show spinner\n   *\n   * @memberof NgxSpinnerService\n   */\n  show(name: string = PRIMARY_SPINNER, spinner?: Spinner) {\n    const showPromise = new Promise((resolve, _reject) => {\n      if (spinner && Object.keys(spinner).length) {\n        spinner['name'] = name;\n        this.spinnerObservable.next(new NgxSpinner({ ...spinner, show: true }));\n        resolve(true);\n      } else {\n        this.spinnerObservable.next(new NgxSpinner({ name, show: true }));\n        resolve(true);\n      }\n    });\n    return showPromise;\n  }\n  /**\n  * To hide spinner\n  *\n  * @memberof NgxSpinnerService\n  */\n  hide(name: string = PRIMARY_SPINNER, debounce: number = 0) {\n    const hidePromise = new Promise((resolve, _reject) => {\n      setTimeout(() => {\n        this.spinnerObservable.next(new NgxSpinner({ name, show: false }));\n        resolve(true);\n      }, debounce);\n    });\n    return hidePromise;\n  }\n}\n","import {\n  Component,\n  OnDestroy,\n  Input,\n  OnInit,\n  OnChanges,\n  SimpleChange,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { NgxSpinnerService } from './ngx-spinner.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { LOADERS, DEFAULTS, Size, NgxSpinner, PRIMARY_SPINNER } from './ngx-spinner.enum';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\n\n@Component({\n  selector: 'ngx-spinner',\n  templateUrl: 'ngx-spinner.component.html',\n  styleUrls: ['ngx-spinner.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('fadeIn', [\n      state('in', style({ opacity: 1 })),\n      transition(':enter', [\n        style({ opacity: 0 }),\n        animate(300)\n      ]),\n      transition(':leave',\n        animate(200, style({ opacity: 0 })))\n    ])\n  ]\n})\nexport class NgxSpinnerComponent implements OnDestroy, OnInit, OnChanges {\n\n  /**\n   * To set backdrop color\n   * Only supports RGBA color format\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() bdColor: string;\n  /**\n   * To set spinner size\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() size: Size;\n  /**\n   * To set spinner color(DEFAULTS.SPINNER_COLOR)\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() color: string;\n  /**\n   * To set type of spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() type: string;\n  /**\n   * To toggle fullscreen mode\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() fullScreen: boolean;\n  /**\n   * Spinner name\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() name: string;\n  /**\n   * z-index value\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() zIndex: number;\n  /**\n   * Custom template for spinner/loader\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() template: string;\n  /**\n   * Spinner Object\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  spinner: NgxSpinner = new NgxSpinner();\n  /**\n   * Array for spinner's divs\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  divArray: Array<number>;\n  /**\n   * Counter for div\n   *\n   * @memberof NgxSpinnerComponent\n   *\n   */\n  divCount: number;\n  /**\n   * Show spinner\n   *\n   * @memberof NgxSpinnerComponent\n  **/\n  show: boolean;\n  /**\n   * Unsubscribe from spinner's observable\n   *\n   * @memberof NgxSpinnerComponent\n  **/\n  ngUnsubscribe: Subject<void> = new Subject();\n\n  /**\n   * Creates an instance of NgxSpinnerComponent.\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  constructor(private spinnerService: NgxSpinnerService, private changeDetector: ChangeDetectorRef) {\n    this.bdColor = DEFAULTS.BD_COLOR;\n    this.zIndex = DEFAULTS.Z_INDEX;\n    this.color = DEFAULTS.SPINNER_COLOR;\n    this.type = DEFAULTS.SPINNER_TYPE;\n    this.size = 'large';\n    this.fullScreen = true;\n    this.name = PRIMARY_SPINNER;\n    this.template = null;\n\n    this.divArray = [];\n    this.divCount = 0;\n    this.show = false;\n  }\n  /**\n   * Initialization method\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnInit() {\n    this.setDefaultOptions();\n    this.spinnerService.getSpinner(this.name)\n      .pipe(\n        takeUntil(this.ngUnsubscribe)\n      )\n      .subscribe((spinner: NgxSpinner) => {\n        this.setDefaultOptions();\n        Object.assign(this.spinner, spinner);\n        if (spinner.show) {\n          this.onInputChange();\n        }\n        this.changeDetector.markForCheck();\n      });\n  }\n  /**\n   * To set default ngx-spinner options\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  setDefaultOptions = () => {\n    this.spinner = new NgxSpinner({\n      name: this.name,\n      bdColor: this.bdColor,\n      size: this.size,\n      color: this.color,\n      type: this.type,\n      fullScreen: this.fullScreen,\n      divArray: this.divArray,\n      divCount: this.divCount,\n      show: this.show,\n      zIndex: this.zIndex,\n      template: this.template,\n    });\n  }\n  /**\n   * On changes event for input variables\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnChanges(changes: { [propKey: string]: SimpleChange }) {\n    for (const propName in changes) {\n      if (propName) {\n        const changedProp = changes[propName];\n        if (changedProp.isFirstChange()) {\n          return;\n        } else if (typeof changedProp.currentValue !== 'undefined' && changedProp.currentValue !== changedProp.previousValue) {\n          if (changedProp.currentValue !== '') {\n            this.spinner[propName] = changedProp.currentValue;\n          }\n        }\n      }\n    }\n  }\n  /**\n   * To get class for spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  getClass(type: string, size: Size): string {\n    this.spinner.divCount = LOADERS[type];\n    this.spinner.divArray = Array(this.spinner.divCount).fill(0).map((x, i) => i);\n    let sizeClass = '';\n    switch (size.toLowerCase()) {\n      case 'small':\n        sizeClass = 'la-sm';\n        break;\n      case 'medium':\n        sizeClass = 'la-2x';\n        break;\n      case 'large':\n        sizeClass = 'la-3x';\n        break;\n      default:\n        break;\n    }\n    return 'la-' + type + ' ' + sizeClass;\n  }\n  /**\n   * Check if input variables have changed\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  onInputChange() {\n    this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\n  }\n  /**\n   * Component destroy event\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnDestroy() {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxSpinnerComponent } from './ngx-spinner.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [NgxSpinnerComponent],\n  exports: [NgxSpinnerComponent]\n})\nexport class NgxSpinnerModule { }\n","/*\n * Public API Surface of ngx-spinner\n */\nexport * from './lib/ngx-spinner.service';\nexport * from './lib/ngx-spinner.component';\nexport * from './lib/ngx-spinner.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}