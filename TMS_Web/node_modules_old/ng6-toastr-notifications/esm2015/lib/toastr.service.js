/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, ApplicationRef, ComponentFactoryResolver, Injector, ReflectiveInjector, NgZone } from "@angular/core";
import { Subject } from "rxjs";
import { ToastrOptions } from "./toastr.options";
import { Toastr } from "./toastr";
import { ToastrComponent } from "./toastr.component";
/**
 * @record
 * @template T
 */
export function IImplicitContext() { }
function IImplicitContext_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    IImplicitContext.prototype.$implicit;
}
export class ToastrManager {
    /**
     * @param {?} _applicationRef
     * @param {?} _componentFactoryResolver
     * @param {?} _injector
     * @param {?} ngZone
     * @param {?} options
     */
    constructor(_applicationRef, _componentFactoryResolver, _injector, ngZone, options) {
        this._applicationRef = _applicationRef;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._injector = _injector;
        this.ngZone = ngZone;
        this.options = options;
        this.toastrContainers = [];
        this.index = 0;
        this.toastClicked = new Subject();
    }
    /**
     * @template T
     * @param {?} type
     * @param {?=} providers
     * @return {?}
     */
    createToastrComponent(type, providers = []) {
        // Resolve a factory for creating components of type `type`.
        const /** @type {?} */ factory = this._componentFactoryResolver.resolveComponentFactory(/** @type {?} */ (type));
        // Resolve and create an injector with the specified providers.
        const /** @type {?} */ _providers = ReflectiveInjector.resolve(providers);
        const /** @type {?} */ injector = ReflectiveInjector.fromResolvedProviders(_providers, this._injector);
        // Create new node for inserting into document.
        let /** @type {?} */ newNode = document.createElement("div");
        newNode.id = "toastr-node-" + Math.floor(Math.random() * 200);
        document.querySelector("body").appendChild(newNode);
        // Create a component using the previously resolved factory & injector.
        const /** @type {?} */ componentRef = factory.create(injector, [], newNode);
        // Insert new component node into document body.
        this.attachToApplication(componentRef);
        return componentRef;
    }
    /**
     * @template T
     * @param {?} componentRef
     * @return {?}
     */
    attachToApplication(componentRef) {
        this._applicationRef.attachView(componentRef.hostView);
    }
    /**
     * @template T
     * @param {?} componentRef
     * @return {?}
     */
    detachFromApplication(componentRef) {
        this._applicationRef.detachView(componentRef.hostView);
    }
    /**
     * @param {?} position
     * @return {?}
     */
    isToastrContainerExist(position) {
        if (this.toastrContainers.length > 0) {
            const /** @type {?} */ i = this.toastrContainers.findIndex(x => x.position === position);
            if (i > -1) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} position
     * @return {?}
     */
    getToastrComponentRef(position) {
        if (this.toastrContainers.length > 0) {
            const /** @type {?} */ container = this.toastrContainers.find(x => x.position === position);
            return container ? container.ref : null;
        }
        return null;
    }
    /**
     * @param {?} toast
     * @return {?}
     */
    createTimeout(toast) {
        let /** @type {?} */ task;
        this.ngZone.runOutsideAngular(() => {
            task = setTimeout(() => this.ngZone.run(() => this.clearToast(toast)), toast.config.toastTimeout);
        });
        return task.toString();
    }
    /**
     * @param {?} toast
     * @param {?=} options
     * @return {?}
     */
    setupToast(toast, options) {
        toast.id = ++this.index;
        if (options && options.hasOwnProperty("toastTimeout")) {
            options.dismiss = "auto";
        }
        const /** @type {?} */ customConfig = Object.assign({}, this.options, options || {});
        Object.keys(toast.config).forEach(k => {
            if (customConfig.hasOwnProperty(k)) {
                toast.config[k] = customConfig[k];
            }
        });
        if (toast.config.dismiss === "auto") {
            toast.timeoutId = this.createTimeout(toast);
        }
        toast.toastrManager = this; // bind ToastrManager instance to Toastr
        const /** @type {?} */ position = toast.config.position;
        if (this.isToastrContainerExist(position)) {
            this.getToastrComponentRef(position).instance.addToastr(toast);
        }
        return toast;
    }
    /**
     * @param {?} toast
     * @return {?}
     */
    clearToast(toast) {
        const /** @type {?} */ position = toast.config.position;
        if (this.isToastrContainerExist(position)) {
            let /** @type {?} */ instance = this.getToastrComponentRef(position).instance;
            instance.removeToastr(toast);
        }
    }
    /**
     * @return {?}
     */
    clearAllToasts() {
        if (this.toastrContainers.length > 0) {
            this.toastrContainers.forEach(component => {
                console.log(component);
                const /** @type {?} */ ref = component.ref;
                const /** @type {?} */ instance = component.ref.instance;
                instance.removeAllToasts();
                this.dispose(ref);
            });
        }
    }
    /**
     * @param {?} toastrComponentRef
     * @return {?}
     */
    dispose(toastrComponentRef) {
        if (toastrComponentRef) {
            const /** @type {?} */ i = this.toastrContainers.findIndex(x => x.position === toastrComponentRef.instance.position);
            if (i > -1) {
                this.toastrContainers.splice(i, 1);
            }
            this.detachFromApplication(toastrComponentRef);
        }
    }
    /**
     * @param {?} toast
     * @return {?}
     */
    _onToastClicked(toast) {
        this.toastClicked.next(toast);
        if (toast.config.dismiss !== "controlled") {
            this.clearToast(toast);
        }
    }
    /**
     * @param {?} toast
     * @return {?}
     */
    dismissToastr(toast) {
        this.clearToast(toast);
    }
    /**
     * @return {?}
     */
    dismissAllToastr() {
        this.clearAllToasts();
    }
    /**
     * @return {?}
     */
    onClickToast() {
        return this.toastClicked.asObservable();
    }
    /**
     * @param {?} toastr
     * @param {?=} options
     * @return {?}
     */
    showToastr(toastr, options) {
        const /** @type {?} */ opt = Object.assign({}, this.options, options);
        return new Promise((resolve, reject) => {
            if (!this.isToastrContainerExist(opt.position)) {
                const /** @type {?} */ providers = [{ provide: ToastrOptions, useValue: opt }];
                let /** @type {?} */ toastrComponentRef = this.createToastrComponent(ToastrComponent, providers);
                toastrComponentRef.instance.onToastClicked = (toast) => {
                    this._onToastClicked(toast);
                };
                toastrComponentRef.instance.onExit().subscribe(() => {
                    this.dispose(toastrComponentRef);
                });
                this.toastrContainers.push({
                    position: opt.position,
                    ref: toastrComponentRef
                });
            }
            resolve(this.setupToast(toastr, options));
        });
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    errorToastr(message, title, options) {
        const /** @type {?} */ data = options && options.data ? options.data : null;
        const /** @type {?} */ toast = new Toastr("error", message, title, data);
        this.showToastr(toast, options);
        return toast;
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    infoToastr(message, title, options) {
        const /** @type {?} */ data = options && options.data ? options.data : null;
        const /** @type {?} */ toast = new Toastr("info", message, title, data);
        this.showToastr(toast, options);
        return toast;
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    successToastr(message, title, options) {
        const /** @type {?} */ data = options && options.data ? options.data : null;
        const /** @type {?} */ toast = new Toastr("success", message, title, data);
        this.showToastr(toast, options);
        return toast;
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    warningToastr(message, title, options) {
        const /** @type {?} */ data = options && options.data ? options.data : null;
        const /** @type {?} */ toast = new Toastr("warning", message, title, data);
        this.showToastr(toast, options);
        return toast;
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} options
     * @return {?}
     */
    customToastr(message, title, options) {
        const /** @type {?} */ data = options && options.data ? options.data : null;
        const /** @type {?} */ toast = new Toastr("custom", message, title, data);
        this.showToastr(toast, options);
        return toast;
    }
}
ToastrManager.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ToastrManager.ctorParameters = () => [
    { type: ApplicationRef },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: NgZone },
    { type: ToastrOptions }
];
function ToastrManager_tsickle_Closure_declarations() {
    /** @type {?} */
    ToastrManager.prototype.toastrContainers;
    /** @type {?} */
    ToastrManager.prototype.index;
    /** @type {?} */
    ToastrManager.prototype.toastClicked;
    /** @type {?} */
    ToastrManager.prototype._applicationRef;
    /** @type {?} */
    ToastrManager.prototype._componentFactoryResolver;
    /** @type {?} */
    ToastrManager.prototype._injector;
    /** @type {?} */
    ToastrManager.prototype.ngZone;
    /** @type {?} */
    ToastrManager.prototype.options;
}

//# sourceMappingURL=data:application/json;base64,