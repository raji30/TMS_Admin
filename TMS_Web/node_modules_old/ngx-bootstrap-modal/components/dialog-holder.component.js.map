{"version":3,"file":"dialog-holder.component.js","sourceRoot":"","sources":["../../.ng_build/components/dialog-holder.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, ViewChild, ViewContainerRef, ComponentFactoryResolver, Type, HostListener } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { DialogComponent } from './dialog.component';\r\nimport { DialogWrapperComponent } from './dialog-wrapper.component';\r\nimport { DialogOptions } from './dialog.service';\r\n\r\n@Component({\r\n    selector: 'dialog-holder',\r\n    template: '<ng-template #element></ng-template>'\r\n})\r\nexport class DialogHolderComponent {\r\n    /**\r\n     * Target element to insert dialogs\r\n     */\r\n    @ViewChild('element', { read: ViewContainerRef }) public element: ViewContainerRef;\r\n\r\n    /**\r\n     * Array of dialogs\r\n     * @type {Array<DialogComponent> }\r\n     */\r\n    dialogs: Array<DialogComponent<any, any>> = [];\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {ComponentFactoryResolver} resolver\r\n     */\r\n    constructor(private resolver: ComponentFactoryResolver) { }\r\n\r\n    /**\r\n     * Adds dialog\r\n     * @param {Type<DialogComponent>} component\r\n     * @param {object?} data\r\n     * @param {DialogOptions?} options\r\n     * @return {Observable<*>}\r\n     */\r\n    addDialog<T, T1>(component: Type<DialogComponent<T, T1>>, data?: T, options?: DialogOptions): Observable<T1> {\r\n        options = Object.assign(<DialogOptions>{\r\n            backdrop: true,\r\n            backdropColor: 'rgba(0,0,0,.5)',\r\n            keyboard: true\r\n        }, options);\r\n\r\n        if (options.backdrop === false)\r\n            options.backdropColor = '';\r\n\r\n        // add body class if this is the only dialog in the stack\r\n        if (!document.body.classList.contains('modal-open')) {\r\n            document.body.classList.add('modal-open');\r\n        }\r\n\r\n        const factory = this.resolver.resolveComponentFactory(DialogWrapperComponent);\r\n        const componentRef = this.element.createComponent(factory, options.index);\r\n        const dialogWrapper: DialogWrapperComponent = <DialogWrapperComponent>componentRef.instance;\r\n        const _component: DialogComponent<T, T1> = dialogWrapper.addComponent(component);\r\n        _component.options = options;\r\n        if (typeof (options.index) !== 'undefined') {\r\n            this.dialogs.splice(options.index, 0, _component);\r\n        }\r\n        else {\r\n            this.dialogs.push(_component);\r\n        }\r\n        setTimeout(() => {\r\n            dialogWrapper.container.nativeElement.classList.add('show');\r\n            dialogWrapper.container.nativeElement.classList.add('in');\r\n        });\r\n        if (options.timeout && options.timeout > 0) {\r\n            setTimeout(() => {\r\n                this.removeDialog(_component);\r\n            }, options.timeout);\r\n        }\r\n        if (options.backdrop === true) {\r\n            dialogWrapper.closeByClickOutside();\r\n        }\r\n        if (options.backdropColor) {\r\n            dialogWrapper.container.nativeElement.style.backgroundColor = options.backdropColor;\r\n        }\r\n        return _component.fillData(data);\r\n    }\r\n\r\n    /**\r\n     * Removes dialog\r\n     * @param {DialogComponent} component\r\n     */\r\n    removeDialog(component: DialogComponent<any, any>) {\r\n        const element = component.wrapper.container.nativeElement;\r\n\r\n        element.classList.remove('show');\r\n        element.classList.remove('in');\r\n        setTimeout(() => {\r\n            this._removeElement(component);\r\n            this.dialogs.length === 0 && document.body.classList.remove('modal-open');\r\n        }, 300);\r\n    }\r\n\r\n    private _removeElement(component: any) {\r\n        const index = this.dialogs.indexOf(component);\r\n        if (index > -1) {\r\n            this.element.remove(index);\r\n            this.dialogs.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        this.element.clear();\r\n        this.dialogs = [];\r\n    }\r\n\r\n    @HostListener('window:keydown', ['$event'])\r\n    documentKeypress(event: KeyboardEvent) {\r\n        // 检查是否最后一个\r\n        if (this.dialogs.length <= 0) return;\r\n\r\n        // 移除最新一个组件\r\n        const component = this.dialogs[this.dialogs.length - 1];\r\n        if (component.options.keyboard === true && event.keyCode === 27)\r\n            this.removeDialog(component);\r\n    }\r\n}\r\n"]}