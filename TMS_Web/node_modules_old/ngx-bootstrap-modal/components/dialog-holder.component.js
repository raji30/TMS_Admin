import { Component, ViewChild, ViewContainerRef, ComponentFactoryResolver, HostListener } from '@angular/core';
import { DialogWrapperComponent } from './dialog-wrapper.component';
var DialogHolderComponent = /** @class */ (function () {
    /**
     * Constructor
     * @param {ComponentFactoryResolver} resolver
     */
    function DialogHolderComponent(resolver) {
        this.resolver = resolver;
        /**
             * Array of dialogs
             * @type {Array<DialogComponent> }
             */
        this.dialogs = [];
    }
    /**
     * Adds dialog
     * @param {Type<DialogComponent>} component
     * @param {object?} data
     * @param {DialogOptions?} options
     * @return {Observable<*>}
     */
    /**
         * Adds dialog
         * @param {Type<DialogComponent>} component
         * @param {object?} data
         * @param {DialogOptions?} options
         * @return {Observable<*>}
         */
    DialogHolderComponent.prototype.addDialog = /**
         * Adds dialog
         * @param {Type<DialogComponent>} component
         * @param {object?} data
         * @param {DialogOptions?} options
         * @return {Observable<*>}
         */
    function (component, data, options) {
        var _this = this;
        options = Object.assign({
            backdrop: true,
            backdropColor: 'rgba(0,0,0,.5)',
            keyboard: true
        }, options);
        if (options.backdrop === false)
            options.backdropColor = '';
        // add body class if this is the only dialog in the stack
        if (!document.body.classList.contains('modal-open')) {
            document.body.classList.add('modal-open');
        }
        var factory = this.resolver.resolveComponentFactory(DialogWrapperComponent);
        var componentRef = this.element.createComponent(factory, options.index);
        var dialogWrapper = componentRef.instance;
        var _component = dialogWrapper.addComponent(component);
        _component.options = options;
        if (typeof (options.index) !== 'undefined') {
            this.dialogs.splice(options.index, 0, _component);
        }
        else {
            this.dialogs.push(_component);
        }
        setTimeout(function () {
            dialogWrapper.container.nativeElement.classList.add('show');
            dialogWrapper.container.nativeElement.classList.add('in');
        });
        if (options.timeout && options.timeout > 0) {
            setTimeout(function () {
                _this.removeDialog(_component);
            }, options.timeout);
        }
        if (options.backdrop === true) {
            dialogWrapper.closeByClickOutside();
        }
        if (options.backdropColor) {
            dialogWrapper.container.nativeElement.style.backgroundColor = options.backdropColor;
        }
        return _component.fillData(data);
    };
    /**
     * Removes dialog
     * @param {DialogComponent} component
     */
    /**
         * Removes dialog
         * @param {DialogComponent} component
         */
    DialogHolderComponent.prototype.removeDialog = /**
         * Removes dialog
         * @param {DialogComponent} component
         */
    function (component) {
        var _this = this;
        var element = component.wrapper.container.nativeElement;
        element.classList.remove('show');
        element.classList.remove('in');
        setTimeout(function () {
            _this._removeElement(component);
            _this.dialogs.length === 0 && document.body.classList.remove('modal-open');
        }, 300);
    };
    DialogHolderComponent.prototype._removeElement = function (component) {
        var index = this.dialogs.indexOf(component);
        if (index > -1) {
            this.element.remove(index);
            this.dialogs.splice(index, 1);
        }
    };
    DialogHolderComponent.prototype.clear = function () {
        this.element.clear();
        this.dialogs = [];
    };
    DialogHolderComponent.prototype.documentKeypress = function (event) {
        // 检查是否最后一个
        if (this.dialogs.length <= 0)
            return;
        // 移除最新一个组件
        var component = this.dialogs[this.dialogs.length - 1];
        if (component.options.keyboard === true && event.keyCode === 27)
            this.removeDialog(component);
    };
    DialogHolderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'dialog-holder',
                    template: '<ng-template #element></ng-template>'
                },] },
    ];
    /** @nocollapse */
    DialogHolderComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver, },
    ]; };
    DialogHolderComponent.propDecorators = {
        "element": [{ type: ViewChild, args: ['element', { read: ViewContainerRef },] },],
        "documentKeypress": [{ type: HostListener, args: ['window:keydown', ['$event'],] },],
    };
    return DialogHolderComponent;
}());
export { DialogHolderComponent };
//# sourceMappingURL=dialog-holder.component.js.map