import { Inject } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { DialogService } from './dialog.service';
/**
 * Abstract dialog
 * @template T - dialog data;
 * @template T1 - dialog result
 */
var DialogComponent = /** @class */ (function () {
    /**
     * Constructor
     * @param {DialogService} dialogService - instance of DialogService
     */
    function DialogComponent(dialogService) {
        this.dialogService = dialogService;
    }
    /**
     *
     * @param {T} data
     * @return {Observable<T1>}
     */
    /**
         *
         * @param {T} data
         * @return {Observable<T1>}
         */
    DialogComponent.prototype.fillData = /**
         *
         * @param {T} data
         * @return {Observable<T1>}
         */
    function (data) {
        var _this = this;
        data = data || {};
        var keys = Object.keys(data);
        for (var i = 0, length_1 = keys.length; i < length_1; i++) {
            var key = keys[i];
            this[key] = data[key];
        }
        return Observable.create(function (observer) {
            _this.observer = observer;
            return function () { return _this.close(); };
        });
    };
    /**
     * Closes dialog
     */
    /**
         * Closes dialog
         */
    DialogComponent.prototype.close = /**
         * Closes dialog
         */
    function (result) {
        if (typeof result !== 'undefined')
            this.result = result;
        this.dialogService.removeDialog(this);
        if (this.observer) {
            this.observer.next(this.result);
            this.observer.complete();
        }
    };
    /** @nocollapse */
    DialogComponent.ctorParameters = function () { return [
        { type: DialogService, decorators: [{ type: Inject, args: [DialogService,] },] },
    ]; };
    return DialogComponent;
}());
export { DialogComponent };
//# sourceMappingURL=dialog.component.js.map