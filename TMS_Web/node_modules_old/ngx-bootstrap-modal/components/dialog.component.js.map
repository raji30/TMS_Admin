{"version":3,"file":"dialog.component.js","sourceRoot":"","sources":["../../.ng_build/components/dialog.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,MAAM,EAAE,MAAM,eAAe,CAAC;AAElD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,EAAE,aAAa,EAAiB,MAAM,kBAAkB,CAAC;;;;;;;IA2B5D;;;OAGG;IACH,yBAA6C;QAAA,kBAAa,GAAb,aAAa;KAAoB;IAE9E;;;;OAIG;;;;;;IACH,kCAAQ;;;;;IAAR,UAAS,IAAS;QAAlB,iBAWC;QAVG,IAAI,GAAG,IAAI,IAAS,EAAE,CAAC;QACvB,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,QAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,QAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACpD,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;SACzB;QACD,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAa;YACnC,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,MAAM,CAAC,cAAM,OAAA,KAAI,CAAC,KAAK,EAAE,EAAZ,CAAY,CAAC;SAC7B,CAAC,CAAC;KACN;IAED;;OAEG;;;;IACH,+BAAK;;;IAAL,UAAM,MAAW;QACb,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,WAAW,CAAC;YAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACxD,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACtC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAChC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;SAC5B;KACJ;;;gBA7DI,aAAa,uBA+BL,MAAM,SAAC,aAAa;;0BAnCrC;;SAWa,eAAe","sourcesContent":["import { OnDestroy, Inject } from '@angular/core';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { DialogWrapperComponent } from './dialog-wrapper.component';\r\nimport { DialogService, DialogOptions } from './dialog.service';\r\n\r\n/**\r\n * Abstract dialog\r\n * @template T - dialog data;\r\n * @template T1 - dialog result\r\n */\r\nexport class DialogComponent<T, T1> {\r\n\r\n    options: DialogOptions;\r\n\r\n    /**\r\n     * Observer to return result from dialog\r\n     */\r\n    private observer: Observer<T1>;\r\n\r\n    /**\r\n     * Dialog result\r\n     * @type {T1}\r\n     */\r\n    protected result: T1;\r\n\r\n    /**\r\n     * Dialog wrapper (modal placeholder)\r\n     */\r\n    wrapper: DialogWrapperComponent;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {DialogService} dialogService - instance of DialogService\r\n     */\r\n    constructor(@Inject(DialogService) protected dialogService: DialogService) { }\r\n\r\n    /**\r\n     *\r\n     * @param {T} data\r\n     * @return {Observable<T1>}\r\n     */\r\n    fillData(data: any): Observable<T1> {\r\n        data = data || <any>{};\r\n        const keys = Object.keys(data);\r\n        for (let i = 0, length = keys.length; i < length; i++) {\r\n            const key = keys[i];\r\n            this[key] = data[key];\r\n        }\r\n        return Observable.create((observer: any) => {\r\n            this.observer = observer;\r\n            return () => this.close();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes dialog\r\n     */\r\n    close(result?: T1): void {\r\n        if (typeof result !== 'undefined') this.result = result;\r\n        this.dialogService.removeDialog(this);\r\n        if (this.observer) {\r\n            this.observer.next(this.result);\r\n            this.observer.complete();\r\n        }\r\n    }\r\n\r\n    [key: string]: any;\r\n}\r\n"]}