{"version":3,"file":"built-in.dialog.js","sourceRoot":"","sources":["../../.ng_build/components/built-in.dialog.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,iBAAiB,EAAE,SAAS,EAAkB,MAAM,eAAe,CAAC;AACxF,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;;IA8Ef,oCAAoC;;;4BAGnD,EAAE;uBACP,EAAE;2BAEH,KAAK;;;IAGlB,mCAAQ,GAAR;QAAA,iBAwDC;QAvDG,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC;QACzB,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC;YAClB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;QAE1C,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;YACb,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;QAEnC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC5B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;oBACpB,KAAK,OAAO;wBACR,OAAO,CAAC,UAAU,GAAG,wJAAwJ,CAAC;wBAC9K,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC;4BAAC,OAAO,CAAC,UAAU,GAAG,SAAS,CAAC;wBACxD,KAAK,CAAC;oBACV,KAAK,KAAK;wBACN,OAAO,CAAC,UAAU,GAAG,gEAAgE,CAAC;wBACtF,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC;4BAAC,OAAO,CAAC,UAAU,GAAG,SAAS,CAAC;wBACxD,KAAK,CAAC;iBACb;aACJ;YAED,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBAC/D,IAAM,IAAI,GAAG,EAAE,CAAC;;gBAEhB,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;oBACrC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;iBAC5D;gBACD,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC;aAC/B;YACD,OAAO,CAAC,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;YAE/D,OAAO,CAAC,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC;gBACpC,SAAS,EAAE,IAAI;gBACf,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,GAAG;gBACR,IAAI,EAAE,CAAC;aACV,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;SAC/B;;QAGD,IAAI,YAAY,GAAG,OAAO,CAAC,UAAU,CAAC;QACtC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,KAAK,UAAU,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACrE,YAAY,GAAG,OAAO,YAAY,KAAK,WAAW,CAAC,CAAC,CAAC,CAAE,YAAY,CAAE,CAAC,CAAC,CAAC,EAAE,CAAC;SAC9E;QACD,OAAO,CAAC,UAAU,GAAG,YAAY,IAAI,EAAE,CAAC;QAEpC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACrC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,WAAW,EAAE,CAAC;SACtB;QAED,UAAU,CAAC;YACP,KAAI,CAAC,QAAQ,EAAE,CAAC;SACnB,EAAE,GAAG,CAAC,CAAC;KACX;IAEO,sCAAW,GAAnB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC,CAAC;YAClC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,KAAK,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,MAAM,CAAC,KAAK,CAAC;aAChB;YACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,MAAM,CAAC,KAAK,CAAC;aAChB;SACJ;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;YAC/E,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,MAAM,CAAC,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC;KACf;IAEO,mCAAQ,GAAhB;QACI,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;QACjD,IAAI,WAAW,GAAQ,IAAI,CAAC;QAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC7B,WAAW,GAAG,WAAW,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC;SACtE;QAAC,IAAI,CAAC,CAAC;YACJ,WAAW,GAAG,WAAW,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;SAC7D;QACD,EAAE,CAAC,CAAC,WAAW,CAAC;YAAC,WAAW,CAAC,KAAK,EAAE,CAAC;KACxC;IAED,oCAAS,GAAT;QACI,IAAI,CAAC,WAAW,EAAE,CAAC;KACtB;IAED,kCAAO,GAAP,UAAQ,KAAoB;QACxB,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,KAAK,EAAE,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,EAAE,EAAE,CAAC;SACb;KACJ;IAED,6BAAE,GAAF;QACI,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;YACpB,KAAK,SAAS;gBACV,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACnB,KAAK,CAAC;YACV,KAAK,QAAQ;gBACT,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;oBAAC,MAAM,CAAC;gBAChC,IAAI,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;gBAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,KAAK,UAAU,CAAC,CAAC,CAAC;oBAChC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY;yBACd,MAAM,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,QAAQ,EAAb,CAAa,CAAC;yBACpC,GAAG,CAAC,UAAC,IAAS;wBACX,OAAO,IAAI,CAAC,QAAQ,CAAC;wBACrB,MAAM,CAAC,IAAI,CAAC;qBACf,CAAC,CAAC;iBAClB;gBACD,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;gBAClB,KAAK,CAAC;SACb;QAED,IAAI,CAAC,KAAK,EAAE,CAAC;KAChB;;gBA7MJ,SAAS,SAAC;oBACP,QAAQ,EAAE,iBAAiB;oBAC3B,QAAQ,EAAE,y3LAoEM;oBAChB,SAAS,EAAE,CAAE,cAAc,CAAE;oBAC7B,aAAa,EAAE,iBAAiB,CAAC,IAAI;oBACrC,mBAAmB,EAAE,KAAK;iBAC7B;;;;;8BAEI,SAAS,SAAC,WAAW;;2BAhF1B;EA+EsC,eAAe;SAAxC,gBAAgB","sourcesContent":["import { Component, ViewEncapsulation, ViewChild, OnInit, Inject } from '@angular/core';\r\nimport { DialogComponent } from './dialog.component';\r\nimport { BuiltInOptions } from './built-in.options';\r\n\r\n@Component({\r\n    selector: 'dialog-built-in',\r\n    template: `<div class=\"modal-dialog modal-{{opt.size}}\" [ngClass]=\"classs\" #container>\r\n                <div class=\"modal-content\" [ngClass]=\"{'text-center':opt.icon}\">\r\n                   <div class=\"modal-header\" *ngIf=\"opt.title\" [hidden]=\"opt.icon\">\r\n                     <h5 class=\"modal-title\">{{opt.title}}</h5>\r\n                    <button *ngIf=\"opt.showCloseButton\" type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" (click)=\"close()\">\r\n                        <span aria-hidden=\"true\">&times;</span>\r\n                    </button>\r\n                   </div>\r\n                   <div class=\"modal-body\">\r\n                    <div *ngIf=\"opt.icon\" [ngSwitch]=\"opt.icon\">\r\n                        <div class=\"modal-icon modal-error animate-error-icon\" *ngSwitchCase=\"'error'\">\r\n                            <span class=\"x-mark animate-x-mark\"><span class=\"x-mark-line-left\"></span><span class=\"x-mark-line-right\"></span></span>\r\n                        </div>\r\n                        <div class=\"modal-icon modal-question\" *ngSwitchCase=\"'question'\">?</div>\r\n                        <div class=\"modal-icon modal-warning\" *ngSwitchCase=\"'warning'\">!</div>\r\n                        <div class=\"modal-icon modal-info\" *ngSwitchCase=\"'info'\">i</div>\r\n                        <div class=\"modal-icon modal-success animate-success-icon\" *ngSwitchCase=\"'success'\">\r\n                            <div class=\"success-circular-line-left\" style=\"background: rgb(255, 255, 255);\"></div>\r\n                            <span class=\"success-line-tip animate-success-line-tip\"></span>\r\n                            <span class=\"success-line-long animate-success-line-long\"></span>\r\n                            <div class=\"success-ring\"></div>\r\n                            <div class=\"success-fix\" style=\"background: rgb(255, 255, 255);\"></div>\r\n                            <div class=\"success-circular-line-right\" style=\"background: rgb(255, 255, 255);\"></div>\r\n                        </div>\r\n                    </div>\r\n                     <div *ngIf=\"opt.content\" [innerHTML]=\"opt.content\"></div>\r\n                     <div [ngSwitch]=\"opt.input\" *ngIf=\"opt.type === 'prompt'\" class=\"modal-{{opt.type}}\" [ngClass]=\"{'has-danger has-error': prompError}\">\r\n                        <textarea *ngSwitchCase=\"'textarea'\" placeholder=\"{{opt.inputPlaceholder}}\" [(ngModel)]=\"promptData\"\r\n                            class=\"form-control\" [ngClass]=\"{'form-control-danger': prompError}\"></textarea>\r\n                        <select *ngSwitchCase=\"'select'\" [(ngModel)]=\"promptData\" name=\"promptData\"\r\n                            (ngModelChange)=\"onChanage()\"\r\n                            class=\"form-control\" [ngClass]=\"{'form-control-danger': prompError}\">\r\n                            <option *ngFor=\"let i of opt.inputOptions\" [ngValue]=\"i\">{{i.text}}</option>\r\n                        </select>\r\n                        <div *ngSwitchCase=\"'range'\" class=\"row modal-range\">\r\n                            <div class=\"col-{{opt.size}}-9\">\r\n                                <input type=\"range\" [min]=\"opt.inputAttributes.min\" [max]=\"opt.inputAttributes.max\" [(ngModel)]=\"promptData\" name=\"promptData\"\r\n                                    (ngModelChange)=\"onChanage()\" class=\"form-control\">\r\n                            </div>\r\n                            <div class=\"col-{{opt.size}}-3\"><p class=\"form-control-static\">{{promptData}}</p></div>\r\n                        </div>\r\n                        <div *ngSwitchCase=\"'checkbox'\">\r\n                            <label *ngFor=\"let i of opt.inputOptions\" class=\"checkbox-inline custom-control custom-checkbox\">\r\n                                <input type=\"checkbox\" [(ngModel)]=\"i._checked\" [value]=\"i\" name=\"checkbox1\"\r\n                                    class=\"custom-control-input\">\r\n                                <span class=\"custom-control-indicator\"></span>\r\n                                <span class=\"custom-control-description\"> {{i.text}}</span>\r\n                            </label>\r\n                        </div>\r\n                        <div *ngSwitchCase=\"'radio'\">\r\n                            <label *ngFor=\"let i of opt.inputOptions\" class=\"radio-inline custom-control custom-radio\">\r\n                                <input type=\"radio\" (click)=\"promptData=i\" [checked]=\"i===promptData\" class=\"custom-control-input\">\r\n                                <span class=\"custom-control-indicator\"></span>\r\n                                <span class=\"custom-control-description\"> {{i.text}}</span>\r\n                            </label>\r\n                        </div>\r\n                        <input *ngSwitchDefault type=\"{{opt.input}}\"\r\n                            placeholder=\"{{opt.inputPlaceholder}}\" [(ngModel)]=\"promptData\" name=\"promptData\"\r\n                            (ngModelChange)=\"onChanage()\" (keyup)=\"onKeyup($event)\" [maxlength]=\"opt.inputAttributes.maxlength\"\r\n                            class=\"form-control\" [ngClass]=\"{'form-control-danger': prompError}\">\r\n                        <div class=\"form-control-feedback\" *ngIf=\"prompError\">{{opt.inputError}}</div>\r\n                    </div>\r\n                   </div>\r\n                   <div class=\"modal-footer\" *ngIf=\"opt.showConfirmButton || opt.showCancelButton\">\r\n                     <button type=\"button\" class=\"cancel btn\" tabIndex=\"2\" (click)=\"close()\" [ngClass]=\"opt.cancelButtonClass\" [hidden]=\"!opt.showCancelButton\">{{opt.cancelButtonText}}</button>\r\n                     <button type=\"button\" class=\"confirm btn\" tabIndex=\"1\" (click)=\"ok()\" [disabled]=\"prompError\" [ngClass]=\"opt.confirmButtonClass\" [hidden]=\"!opt.showConfirmButton\">{{opt.confirmButtonText}}</button>\r\n                   </div>\r\n                </div>\r\n             </div>`,\r\n    styleUrls: [ './dialog.css' ],\r\n    encapsulation: ViewEncapsulation.None,\r\n    preserveWhitespaces: false\r\n})\r\nexport class BuiltInComponent extends DialogComponent<BuiltInOptions, any> implements OnInit {\r\n    @ViewChild('container') container: any;\r\n    opt: BuiltInOptions;\r\n    checkboxMap: any = {};\r\n    classs: any = {};\r\n\r\n    prompError = false;\r\n    promptData: any;\r\n\r\n    ngOnInit() {\r\n        const options = this.opt;\r\n        if (options.className)\r\n            this.classs[options.className] = true;\r\n\r\n        if (options.icon)\r\n            this.classs['has-icon'] = true;\r\n\r\n        if (options.type === 'prompt') {\r\n            if (!options.inputRegex) {\r\n                switch (options.input) {\r\n                    case 'email':\r\n                        options.inputRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n                        if (!options.inputError) options.inputError = '邮箱格式不正确';\r\n                        break;\r\n                    case 'url':\r\n                        options.inputRegex = /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/;\r\n                        if (!options.inputError) options.inputError = '网址格式不正确';\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (options.inputOptions && !Array.isArray(options.inputOptions)) {\r\n                const keys = [];\r\n                // tslint:disable-next-line:forin\r\n                for (const key in options.inputOptions) {\r\n                    keys.push({ key: key, text: options.inputOptions[key] });\r\n                }\r\n                options.inputOptions = keys;\r\n            }\r\n            options.inputOptions = Object.assign([], options.inputOptions);\r\n\r\n            options.inputAttributes = Object.assign({\r\n                maxlength: null,\r\n                min: 0,\r\n                max: 100,\r\n                step: 1\r\n            }, options.inputAttributes);\r\n        }\r\n\r\n        // 默认值\r\n        let defaultValue = options.inputValue;\r\n        if (options.input === 'checkbox' && !Array.isArray(options.inputValue)) {\r\n            defaultValue = typeof defaultValue !== 'undefined' ? [ defaultValue ] : [];\r\n        }\r\n        options.inputValue = defaultValue || '';\r\n\r\n            console.log(options);\r\n        this.promptData = options.inputValue;\r\n        if (this.promptData) {\r\n            this.promptCheck();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.setFocus();\r\n        }, 100);\r\n    }\r\n\r\n    private promptCheck(): boolean {\r\n        if (this.opt.inputRequired === true) {\r\n            if (this.opt.input === 'checkbox' && this.promptData.length === 0) {\r\n                this.prompError = true;\r\n                return false;\r\n            }\r\n            if (!this.promptData) {\r\n                this.prompError = true;\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.opt.inputRegex && !this.opt.inputRegex.test(this.promptData.toString())) {\r\n            this.prompError = true;\r\n            return false;\r\n        }\r\n\r\n        this.prompError = false;\r\n        return true;\r\n    }\r\n\r\n    private setFocus() {\r\n        const containerEl = this.container.nativeElement;\r\n        let firstFormEl: any = null;\r\n        if (this.opt.type === 'prompt') {\r\n            firstFormEl = containerEl.querySelector('input, textarea, select');\r\n        } else {\r\n            firstFormEl = containerEl.querySelector('button.confirm');\r\n        }\r\n        if (firstFormEl) firstFormEl.focus();\r\n    }\r\n\r\n    onChanage() {\r\n        this.promptCheck();\r\n    }\r\n\r\n    onKeyup(event: KeyboardEvent) {\r\n        if (event.keyCode === 13) {\r\n            this.ok();\r\n        }\r\n    }\r\n\r\n    ok() {\r\n        switch (this.opt.type) {\r\n            case 'confirm':\r\n                this.result = true;\r\n                break;\r\n            case 'prompt':\r\n                if (!this.promptCheck()) return;\r\n                let ret = this.promptData;\r\n                if (this.opt.input === 'checkbox') {\r\n                    ret = this.opt.inputOptions\r\n                                .filter((item: any) => item._checked)\r\n                                .map((item: any) => {\r\n                                    delete item._checked;\r\n                                    return item;\r\n                                });\r\n                }\r\n                this.result = ret;\r\n                break;\r\n        }\r\n\r\n        this.close();\r\n    }\r\n}\r\n"]}