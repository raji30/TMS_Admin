{"version":3,"file":"dialog.service.js","sourceRoot":"","sources":["../../.ng_build/components/dialog.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, ComponentFactoryResolver, ApplicationRef, Injector, EmbeddedViewRef, Type, Optional } from '@angular/core';\nimport { DialogHolderComponent } from './dialog-holder.component';\nimport { DialogComponent } from './dialog.component';\nimport { Observable } from 'rxjs/Observable';\nimport { BuiltInOptions } from './built-in.options';\nimport { BuiltInComponent } from './built-in.dialog';\n\nexport interface DialogOptions {\n    /**\n     * 指定模态顺序\n     *\n     * @type {number}\n     * @default 自动叠加\n     */\n    index?: number;\n    /**\n     * 自动关闭时间（单位：ms）\n     *\n     * @type {number}\n     * @default 不会自动关闭\n     */\n    timeout?: number;\n    /**\n     * 是否包括背景且点击背景会关闭，如果传递的是字符串 'static' 点击背景不会关闭。\n     *\n     * @type {boolean}\n     * @default true\n     */\n    backdrop?: boolean | 'static';\n    /**\n     * 背景色\n     *\n     * @type {string}\n     * @default 'rgba(0,0,0,.5)' 半透明\n     */\n    backdropColor?: string;\n    /**\n     * 键盘上的 esc 键被按下时关闭模态框。\n     *\n     * @type {boolean}\n     * @default true\n     */\n    keyboard?: boolean;\n}\n\nexport class DialogServiceConfig {\n    container?: HTMLElement = null;\n\n    builtInOptions?: BuiltInOptions;\n}\n\n@Injectable()\nexport class DialogService {\n\n    /**\n     * Placeholder of modal dialogs\n     * @type {DialogHolderComponent}\n     */\n    private dialogHolderComponent: DialogHolderComponent;\n\n    /**\n     * HTML container for dialogs\n     * type {HTMLElement}\n     */\n    private container: HTMLElement;\n\n    /**\n     * @param {ComponentFactoryResolver} resolver\n     * @param {ApplicationRef} applicationRef\n     * @param {Injector} injector\n     * @param {DialogServiceConfig} config\n     */\n    constructor(private resolver: ComponentFactoryResolver, private applicationRef: ApplicationRef, private injector: Injector, @Optional() config: DialogServiceConfig) {\n        this.container = config && config.container;\n        this.DEFOPT = config && config.builtInOptions;\n    }\n\n    /**\n     * Adds dialog\n     * @param {Type<DialogComponent<T, T1>>} component\n     * @param {T?} data\n     * @param {DialogOptions?} options\n     * @return {Observable<T1>}\n     */\n    addDialog<T, T1>(component: Type<DialogComponent<T, T1>>, data?: T, options?: DialogOptions): Observable<T1> {\n        if (!this.dialogHolderComponent) {\n            this.dialogHolderComponent = this.createDialogHolder();\n        }\n        return this.dialogHolderComponent.addDialog<T, T1>(component, data, options);\n    }\n\n    /**\n     * Hides and removes dialog from DOM\n     * @param {DialogComponent} component\n     */\n    removeDialog(component: DialogComponent<any, any>): void {\n        if (!this.dialogHolderComponent) {\n            return;\n        }\n        this.dialogHolderComponent.removeDialog(component);\n    }\n\n    /**\n     * Closes all dialogs\n     */\n    removeAll(): void {\n        this.dialogHolderComponent.clear();\n    }\n\n    /**\n     * Creates and add to DOM dialog holder component\n     * @return {DialogHolderComponent}\n     */\n    private createDialogHolder(): DialogHolderComponent {\n        const componentFactory = this.resolver.resolveComponentFactory(DialogHolderComponent);\n\n        const componentRef = componentFactory.create(this.injector);\n        const componentRootNode = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        if (!this.container) this.container = document.body;\n        this.applicationRef.attachView(componentRef.hostView);\n\n        componentRef.onDestroy(() => {\n            this.applicationRef.detachView(componentRef.hostView);\n        });\n        this.container.appendChild(componentRootNode);\n\n        return componentRef.instance;\n    }\n\n    public DEFOPT: BuiltInOptions;\n\n    /**\n     * 构建一个内置模态\n     * @param builtInOptions 内置配置参数\n     * @param options 模态配置参数\n     */\n    show(builtInOptions: BuiltInOptions, options?: DialogOptions) {\n        const opt = Object.assign(<BuiltInOptions>{\n            type: 'default',\n            size: 'sm',\n            input: 'text',\n            inputOptions: {},\n            inputAttributes: {},\n            showCloseButton: true,\n            showCancelButton: true,\n            cancelButtonText: '取消',\n            cancelButtonClass: 'btn-default',\n            showConfirmButton: true,\n            confirmButtonText: '确认',\n            confirmButtonClass: 'btn-primary'\n        }, this.DEFOPT, builtInOptions);\n\n        this.addDialog<BuiltInOptions, any>(BuiltInComponent, <any>{\n            opt: opt\n        }, this.mergerDialog({\n            timeout: 0,\n            backdrop: true,\n            backdropColor: 'rgba(0,0,0,.5)',\n            keyboard: true\n        }, Object.assign(builtInOptions, options))).subscribe(res => {\n            if (opt.onHide)\n                opt.onHide(res);\n        });\n\n        if (opt.onShow)\n            opt.onShow();\n    }\n\n    private mergerDialog(options: DialogOptions, built: BuiltInOptions): DialogOptions {\n        const newOptions: any = {};\n        if (!built) return newOptions;\n        Object.keys(options).forEach(key => {\n            if (typeof built[key] !== 'undefined') newOptions[key] = built[key];\n        });\n        return newOptions;\n    }\n\n    /**\n     * Show Alter\n     *\n     * @param {string} title\n     * @param {string} content\n     * @param {BuiltInOptions} 覆盖内置配置参数\n     */\n    alert(title: string, content: string, options?: BuiltInOptions) {\n        this.show(Object.assign({}, options, <BuiltInOptions>{\n            type: 'alert',\n            title: title,\n            content: content,\n            showCancelButton: false\n        }), this.mergerDialog({\n            timeout: 0,\n            backdrop: true,\n            backdropColor: 'rgba(0,0,0,.5)',\n            keyboard: true\n        }, options));\n    }\n\n    /**\n     * Show confirm\n     *\n     * @param {string} title\n     * @param {string} content\n     * @param {BuiltInOptions} 覆盖内置配置参数\n     * @returns {Promise<boolean>} 返回一个Promise布尔类型\n     */\n    confirm(title: string, content: string, options?: BuiltInOptions): Promise<boolean> {\n        return new Promise<boolean>((resolve, reject) => {\n            this.show(Object.assign({}, options, <BuiltInOptions>{\n                type: 'confirm',\n                title: title,\n                content: content,\n                onHide: (res: boolean) => {\n                    resolve(res === undefined ? false : res);\n                }\n            }), this.mergerDialog({\n                timeout: 0,\n                backdrop: 'static',\n                backdropColor: 'rgba(0,0,0,.5)',\n                keyboard: false\n            }, options));\n        });\n    }\n\n    /**\n     * Show prompt\n     *\n     * @param {string} title\n     * @param {BuiltInOptions} 覆盖内置配置参数\n     * @returns {Promise<any>} 返回一个Promise任意类型\n     */\n    prompt(title: string, options?: BuiltInOptions): Promise<any> {\n        return new Promise<any>((resolve, reject) => {\n            this.show(Object.assign(<BuiltInOptions>{\n                input: 'text',\n                inputRequired: true,\n                inputError: '不可为空'\n            }, options, <BuiltInOptions>{\n                type: 'prompt',\n                title: title,\n                onHide: (res: any) => {\n                    resolve(res);\n                }\n            }), this.mergerDialog({\n                timeout: 0,\n                backdrop: 'static',\n                backdropColor: 'rgba(0,0,0,.5)',\n                keyboard: false\n            }, options));\n        });\n    }\n}\n"]}