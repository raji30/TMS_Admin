(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('uribuilder'), require('cleanpath'), require('rxjs/operator/toPromise'), require('rxjs/operator/takeUntil'), require('safe-pipe')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', 'uribuilder', 'cleanpath', 'rxjs/operator/toPromise', 'rxjs/operator/takeUntil', 'safe-pipe'], factory) :
	(factory((global['ngx-document-view'] = {}),global.ng.core,global.ng.common,global.uribuilder,global.cleanpath,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.safePipe));
}(this, (function (exports,core,common,uribuilder,cleanpath,toPromise,takeUntil,safePipe) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {string} */
var ViewProviders = {
    /**
       * Google
       */
    google: 'google',
    /**
       * Microsoft
       */
    microsoft: 'microsoft',
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DocumentViewDirective = (function () {
    /**
     * @param {?} iframe
     */
    function DocumentViewDirective(iframe) {
        this.iframe = iframe;
        this._provider = ViewProviders.google;
        this.providerChange = new core.EventEmitter();
        this._originSrc = ((this.iframe.nativeElement)).src;
    }
    Object.defineProperty(DocumentViewDirective.prototype, "provider", {
        /**
         * @return {?}
         */
        get: function () {
            return this._provider;
        },
        /**
         * 檢視器提供者
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._provider = value;
            this.ngOnInit();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DocumentViewDirective.prototype, "originSrc", {
        /**
         * 原始文件連結
         * @return {?}
         */
        get: function () {
            return this._originSrc;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DocumentViewDirective.prototype.ngOnInit = function () {
        ((this.iframe
            .nativeElement)).src = this.getDocumentUrl();
    };
    /**
     * 根據對應的檢視器提供者產生文件網址
     * @return {?}
     */
    DocumentViewDirective.prototype.getDocumentUrl = function () {
        if (this.provider === ViewProviders.google) {
            return ('http://docs.google.com/gview?url=' +
                encodeURI(this._originSrc) +
                '&embedded=true');
        }
        else if (this.provider === ViewProviders.microsoft) {
            return ('https://view.officeapps.live.com/op/embed.aspx?src=' +
                encodeURI(this._originSrc));
        }
        return null;
    };
    /**
     * 轉換連結與編碼
     * @param {?} url 連結
     * @return {?}
     */
    DocumentViewDirective.prototype.encodeURI = function (url) {
        if (uribuilder.UriBuilder.parse(url).isRelative()) {
            url = cleanpath.cleanPath(document.baseURI + '/' + url);
        }
        return encodeURIComponent(url);
    };
    return DocumentViewDirective;
}());
DocumentViewDirective.decorators = [
    { type: core.Directive, args: [{
                selector: 'iframe[ngx-document]'
            },] },
];
/** @nocollapse */
DocumentViewDirective.ctorParameters = function () { return [
    { type: core.ElementRef, },
]; };
DocumentViewDirective.propDecorators = {
    "provider": [{ type: core.Input },],
    "providerChange": [{ type: core.Output },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DocumentViewModule = (function () {
    function DocumentViewModule() {
    }
    return DocumentViewModule;
}());
DocumentViewModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, safePipe.SafePipeModule],
                declarations: [DocumentViewDirective],
                exports: [DocumentViewDirective]
            },] },
];
/** @nocollapse */
DocumentViewModule.ctorParameters = function () { return []; };

exports.DocumentViewModule = DocumentViewModule;
exports.ViewProviders = ViewProviders;
exports.ɵa = DocumentViewDirective;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-document-view.umd.js.map
