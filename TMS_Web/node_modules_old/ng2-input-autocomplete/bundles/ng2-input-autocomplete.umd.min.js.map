{"version":3,"sources":["ng://ng2-input-autocomplete/lib/autocomplete.component.ts","ng://ng2-input-autocomplete/lib/autocomplete.module.ts"],"names":["AutocompleteComponent","elementRef","EventEmitter","this","thisElement","nativeElement","selectedIndex","showAutoComplete","value","prototype","ngOnInit","config","class","classList","max","maxLimit","placeholder","inputElement","querySelector","isNull","sourceField","filterItems","focus","ngOnChanges","enterText","event","total","candidates","length","keyCode","onSelect","preventDefault","target","inputChangedEvent","emit","idx","candidatesLabels","selectEvent","onKeyUpEvent","search","field","filterItem","items","filter","item","slice","buildLabels","getFieldValue","object","path","Array","result_1","forEach","element","undefined","map","e","result","toLowerCase","indexOf","Component","args","selector","template","ElementRef","Input","Output","AutocompleteDirective","resolver","viewContainerRef","_this","componentRef","parentElement","type","destroy","tabIndex","val","ngModel","ngModelChange","instance","hideAutocomplete","tagName","createDiv","ngOnDestroy","unsubscribe","document","removeEventListener","changes","component","currentValue","ngAfterViewInit","input","getInputElement","control","valueChanges","subscribe","reset","form","addEventListener","showAutocomplete","createAutocomplete","autocompleteElement","createElement","style","display","position","insertBefore","nextSibling","appendChild","factory","resolveComponentFactory","createComponent","onInputChanged","location","rect","getBoundingClientRect","width","zIndex","top","left","Directive","ComponentFactoryResolver","ViewContainerRef","HostListener","AutocompleteModule","forRoot","ngModule","NgModule","imports","CommonModule","FormsModule","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["/*\n  MIT LICENSE @liuy97\n*/\nimport {\n  Component,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  AfterViewInit,\n  Output,\n  SimpleChange,\n  ViewContainerRef,\n  HostBinding\n} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\n@Component({\n  // tslint:disable-next-line\n  selector: 'ng2-input-autocomplete',\n  template: `\n  <div [ngClass]=\"classList\">\n    <input type=\"text\"\n      placeholder=\"{{placeholder}}\"\n      (blur)=\"showAutoComplete = false;\"\n      (focus)=\"showAutoComplete = true;\"\n      [value]=\"value\"\n      (keyup)=\"enterText($event)\">\n    <ul *ngIf=\"showAutoComplete && candidates && candidates.length > 0\">\n      <li *ngFor=\"let candidate of candidates; let idx = index\"\n        [ngClass]=\"{ active: (idx === selectedIndex) }\"\n        (keyup)=\"onKeyUpEvent($event, idx)\"\n        (mouseover)=\"selectedIndex = idx;\"\n        (mousedown)=\"onSelect(idx)\">\n        {{candidatesLabels[idx]}}\n      </li>\n    </ul>\n  </div>`,\n  styles: [\n    `.autocomplete ul {\n       position: absolute;\n       left: 0;\n       width: 100%;\n       border-left: 1px solid #888;\n       border-right: 1px solid #888;\n       border-bottom: 1px solid #888;\n       list-style: none;\n       padding-left: 0px;\n       margin-top: 2px;\n       background-color: #fff;\n       z-index: 100;\n     }\n     .autocomplete li {\n       text-align: left;\n       list-style: none;\n       width: 100%;\n       padding: 0.4em 0 0.4em 0;\n     }\n     .autocomplete li.active {\n       width: 100%;\n       background-color: #4bf;\n     }\n\n     .autocomplete .highlight {\n       background-color: #e2e2e2;\n     }\n     .autocomplete li.active .highlight {\n       background: #666;\n       color: #fff;\n     }`\n  ]\n})\nexport class AutocompleteComponent implements OnInit, OnChanges {\n  classList = 'autocomplete';\n  @Input() items: any[];\n  @Input() config: any;\n  @Output() selectEvent: EventEmitter<any> = new EventEmitter<any>();\n  @Output() inputChangedEvent: EventEmitter<any> = new EventEmitter<any>();\n  inputElement: HTMLInputElement;\n  value: string;\n  candidates: any[];\n  candidatesLabels: any[];\n  selectedIndex: number;\n  showAutoComplete: boolean;\n  placeholder: string;\n  maxLimit = 0;\n  private sourceField: any;\n  private thisElement: HTMLElement;\n\n  constructor(elementRef: ElementRef) {\n    this.thisElement = elementRef.nativeElement;\n    this.selectedIndex = 0;\n    this.showAutoComplete = false;\n    this.value = '';\n  }\n\n  ngOnInit() {\n    if (this.config && this.config.class) {\n      this.classList += ' ' + this.config.class;\n    }\n    if (this.config && this.config.max > 0) {\n      this.maxLimit = this.config.max;\n    }\n    this.placeholder = 'autocomplete';\n    this.inputElement = this.thisElement.querySelector(\n      'input'\n    ) as HTMLInputElement;\n\n    if (!this.isNull(this.config)) {\n      if (!this.isNull(this.config.placeholder)) {\n        this.placeholder = this.config.placeholder;\n      }\n      if (!this.isNull(this.config.sourceField)) {\n        this.sourceField = this.config.sourceField;\n      }\n    }\n    this.filterItems(this.value);\n    this.inputElement.focus();\n  }\n\n  ngOnChanges() {\n    this.filterItems(this.value);\n  }\n\n  enterText(event: any) {\n    const total = this.candidates.length;\n    switch (event.keyCode) {\n      case 27:\n        this.showAutoComplete = false;\n        break;\n      case 38:\n        this.selectedIndex = (total + this.selectedIndex - 1) % total;\n        break;\n      case 40:\n        this.selectedIndex = (total + this.selectedIndex + 1) % total;\n        break;\n      case 13:\n        if (this.candidates.length > 0) {\n          this.onSelect(this.selectedIndex);\n        }\n        event.preventDefault();\n        break;\n      default:\n        this.value = event.target.value;\n        this.inputChangedEvent.emit(this.value);\n        break;\n    }\n  }\n\n  onSelect(idx: number) {\n    this.showAutoComplete = false;\n    this.value = this.candidatesLabels[idx];\n    this.selectEvent.emit(this.candidates[idx]);\n  }\n\n  onKeyUpEvent(event: KeyboardEvent, idx: number): void {\n    if (event.keyCode === 13) {\n      this.onSelect(idx);\n    }\n }\n\n  filterItems(search: string) {\n    const field = this.sourceField;\n    const filterItem = this.filterItem;\n    if (this.items) {\n      this.candidates = this.items.filter(item => {\n        return filterItem(item, field, search);\n      });\n      if (this.maxLimit > 0) {\n        this.candidates = this.candidates.slice(0, this.maxLimit);\n      }\n      this.buildLabels();\n    }\n  }\n\n  private getFieldValue(object: any, path: any) {\n    if (typeof object === 'string') {\n      return object;\n    }\n    if (path instanceof Array) {\n      let result: any = object;\n      path.forEach((element: any) => {\n        if (\n          result !== null &&\n          result !== undefined &&\n          result[element] !== null &&\n          result[element] !== undefined\n        ) {\n          result = result[element];\n        } else {\n          result = '';\n        }\n      });\n      return result;\n    } else {\n      return object[path] || '';\n    }\n  }\n\n  private isNull(object: any) {\n    return object === null || object === undefined;\n  }\n\n  private buildLabels() {\n    const field = this.sourceField;\n    const getFieldValue = this.getFieldValue;\n    this.candidatesLabels = this.candidates.map((e: any) =>\n      getFieldValue(e, field)\n    );\n  }\n\n  private filterItem(item: any, path: any, search: string) {\n    if (search === null || search === undefined || search.length === 0) {\n      return true;\n    }\n    let result: any;\n    if (typeof item === 'string') {\n      result = item;\n    } else if (path instanceof Array) {\n      result = item;\n      path.forEach((element: any) => {\n        if (\n          result !== null &&\n          result !== undefined &&\n          result[element] !== null &&\n          result[element] !== undefined\n        ) {\n          result = result[element];\n        } else {\n          result = '';\n        }\n      });\n    } else {\n      result = item[path] || '';\n    }\n    return result.toLowerCase().indexOf(search.toLowerCase()) >= 0;\n  }\n}\n\n@Directive({\n  // tslint:disable-next-line\n  selector: '[input-autocomplete]'\n})\nexport class AutocompleteDirective implements OnInit, OnDestroy, OnChanges, AfterViewInit {\n  @Input() config: any;\n  @Input() items: any;\n  @Input() ngModel: string;\n  @Input() control: FormControl;\n  @Output() ngModelChange = new EventEmitter();\n  @Output() inputChangedEvent = new EventEmitter();\n  @Output() selectEvent = new EventEmitter();\n\n  private componentRef: ComponentRef<AutocompleteComponent>;\n  private thisElement: HTMLElement;\n  private autocompleteElement: HTMLElement;\n  private inputElement: HTMLInputElement;\n  private tabIndex: number;\n  private reset = false;\n\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    public viewContainerRef: ViewContainerRef\n  ) {\n    this.thisElement = this.viewContainerRef.element.nativeElement;\n  }\n\n  ngOnInit() {\n    if (this.thisElement.tagName.toLowerCase() === 'form') {\n      return;\n    }\n    this.createDiv();\n  }\n\n  ngOnDestroy() {\n    if (this.componentRef) {\n      this.componentRef.instance.selectEvent.unsubscribe();\n      this.componentRef.instance.inputChangedEvent.unsubscribe();\n    }\n    document.removeEventListener('click', this.hideAutocomplete);\n  }\n\n  ngOnChanges(changes: { [propKey: string]: SimpleChange }) {\n    if (changes['items'] && this.componentRef) {\n      const component = this.componentRef.instance;\n      component.items = changes['items'].currentValue;\n      component.filterItems(component.value);\n    }\n  }\n\n  ngAfterViewInit() {\n    const input = this.getInputElement();\n    if (this.control) {\n      this.control.valueChanges.subscribe(() => {\n        this.reset = true;\n      });\n    }\n    if (input.form) {\n      input.form.addEventListener('reset', () => {\n        this.reset = true;\n      });\n    }\n  }\n\n  @HostListener('click', ['$event.target'])\n  @HostListener('focus', ['$event.target'])\n  showAutocomplete(event: any) {\n    this.hideAutocomplete();\n    if (event === this.thisElement) {\n      this.createAutocomplete();\n    }\n  }\n\n  getInputElement() {\n    let input = this.thisElement as HTMLInputElement;\n\n    if (this.thisElement.tagName !== 'INPUT' && this.autocompleteElement) {\n      input = this.thisElement.querySelector(\n        'input'\n      ) as HTMLInputElement;\n    }\n\n    return input;\n  }\n\n  hideAutocomplete = (event?: any): void => {\n    if (!this.componentRef) {\n      return;\n    }\n    if (event && event.target && this.thisElement && event.target === this.thisElement.parentElement) {\n      return;\n    }\n    if (\n      !event ||\n      (event.target !== this.thisElement && event.type === 'click')\n    ) {\n      this.componentRef.destroy();\n      this.componentRef = undefined;\n    }\n    if (this.inputElement['tabIndex'] < 0) {\n      this.inputElement['tabIndex'] = this.tabIndex;\n    }\n  }\n\n  onInputChanged = (val: string) => {\n    this.inputElement.value = val;\n    if (val !== this.ngModel) {\n      this.ngModel = val;\n      this.ngModelChange.emit(val);\n    }\n    const component = this.componentRef.instance;\n    component.filterItems(val);\n    this.inputChangedEvent.emit(val);\n  }\n\n  onSelect = (item: any) => {\n    const component = this.componentRef.instance;\n    const val = component.value;\n    if (val !== this.ngModel) {\n      this.ngModel = val;\n      this.ngModelChange.emit(val);\n    }\n    this.selectEvent.emit(item);\n    if (this.inputElement) {\n      this.inputElement.value = '' + val;\n    }\n    this.hideAutocomplete();\n  }\n\n  private createDiv() {\n    const element = document.createElement('div');\n    element.style.display = 'inline-block';\n    element.style.position = 'relative';\n    this.thisElement.parentElement.insertBefore(\n      element,\n      this.thisElement.nextSibling\n    );\n    element.appendChild(this.thisElement);\n    document.addEventListener('click', this.hideAutocomplete);\n  }\n\n  private createAutocomplete() {\n    const factory = this.resolver.resolveComponentFactory(\n      AutocompleteComponent\n    );\n    this.componentRef = this.viewContainerRef.createComponent(factory);\n    const component = this.componentRef.instance;\n    component.config = this.config;\n    component.items = this.items;\n    component.selectEvent.subscribe(this.onSelect);\n    component.inputChangedEvent.subscribe(this.onInputChanged);\n    this.autocompleteElement = this.componentRef.location.nativeElement;\n    this.autocompleteElement.style.display = 'none';\n    this.inputElement = this.getInputElement();\n    if (this.thisElement.tagName !== 'INPUT' && this.autocompleteElement) {\n      this.inputElement.parentElement.insertBefore(\n        this.autocompleteElement,\n        this.inputElement.nextSibling\n      );\n    }\n\n    if (this.reset) {\n      this.ngModel = '';\n      this.reset = false;\n    }\n\n    this.inputElement.value = this.ngModel ? this.ngModel : '';\n    component.value = this.inputElement.value;\n    this.tabIndex = this.inputElement['tabIndex'];\n    this.inputElement['tabIndex'] = -100;\n    if (this.componentRef) {\n      const rect = this.thisElement.getBoundingClientRect();\n      const style = this.autocompleteElement.style;\n      style.width = rect.width + 'px';\n      style.position = 'absolute';\n      style.zIndex = '1';\n      style.top = '0';\n      style.left = '0';\n      style.display = 'inline-block';\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { AutocompleteComponent, AutocompleteDirective } from './autocomplete.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule],\n  declarations: [AutocompleteComponent, AutocompleteDirective],\n  exports: [AutocompleteComponent, AutocompleteDirective],\n  entryComponents: [AutocompleteComponent]\n})\nexport class AutocompleteModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: AutocompleteModule\n    };\n  }\n}\n\n"]}